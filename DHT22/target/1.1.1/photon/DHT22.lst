
/Users/pradykolli/Downloads/IoT/DHT22/target/1.1.1/photon/DHT22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005638  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a5650  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000006c  20000300  080a5654  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000354  2000036c  2000036c  0004036c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a56c0  080a56c0  000356c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a56e8  080a56e8  000356e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000f5662  00000000  00000000  000356ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00015d0e  00000000  00000000  0012ad4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00015d07  00000000  00000000  00140a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002468  00000000  00000000  00156763  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000039f8  00000000  00000000  00158bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002de0c  00000000  00000000  0015c5c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00032759  00000000  00000000  0018a3cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000b5e91  00000000  00000000  001bcb28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c760  00000000  00000000  002729bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	64 50 0a 08                                         dP..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 ffd5 	bl	80a4fdc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 ffda 	bl	80a4ff2 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a5654 	.word	0x080a5654
 80a004c:	2000036c 	.word	0x2000036c
 80a0050:	2000036c 	.word	0x2000036c
 80a0054:	200006c0 	.word	0x200006c0
 80a0058:	200006c0 	.word	0x200006c0

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f9d1 	bl	80a2404 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a55ec 	.word	0x080a55ec
 80a0084:	080a5644 	.word	0x080a5644

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b81c 	b.w	80a00c4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f867 	bl	80a0160 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 b977 	b.w	80a2388 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bfed 	b.w	80a1078 <malloc>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f000 bfeb 	b.w	80a1078 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f000 bff1 	b.w	80a1088 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_Z11dht_wrapperv>:
 * to confirm backwards compatibility.
 */
 // This wrapper is in charge of calling
 // must be defined like this for the lib work
void dht_wrapper() {
  DHT.isrCallback();
 80a00b8:	4801      	ldr	r0, [pc, #4]	; (80a00c0 <_Z11dht_wrapperv+0x8>)
 80a00ba:	f000 bad1 	b.w	80a0660 <_ZN14PietteTech_DHT11isrCallbackEv>
 80a00be:	bf00      	nop
 80a00c0:	20000374 	.word	0x20000374

080a00c4 <setup>:
unsigned int DHTnextSampleTime;	    // Next time we want to start sample
bool bDHTstarted;		    // flag to indicate we started acquisition
int n;                              // counter

void setup()
{
 80a00c4:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(9600);
 80a00c6:	f002 f879 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a00ca:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00ce:	f002 f869 	bl	80a21a4 <_ZN9USBSerial5beginEl>
  while (!Serial.available() && millis() < 30000) {
 80a00d2:	f247 552f 	movw	r5, #29999	; 0x752f
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00d6:	4c1a      	ldr	r4, [pc, #104]	; (80a0140 <setup+0x7c>)
 80a00d8:	f002 f870 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a00dc:	6803      	ldr	r3, [r0, #0]
 80a00de:	691b      	ldr	r3, [r3, #16]
 80a00e0:	4798      	blx	r3
 80a00e2:	b990      	cbnz	r0, 80a010a <setup+0x46>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a00e4:	f000 fde2 	bl	80a0cac <HAL_Timer_Get_Milli_Seconds>
 80a00e8:	42a8      	cmp	r0, r5
 80a00ea:	d80e      	bhi.n	80a010a <setup+0x46>
    Serial.println("Press any key to start.");
 80a00ec:	f002 f866 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a00f0:	4914      	ldr	r1, [pc, #80]	; (80a0144 <setup+0x80>)
 80a00f2:	f001 f9c0 	bl	80a1476 <_ZN5Print7printlnEPKc>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a00f6:	f000 fdd9 	bl	80a0cac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00fa:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a00fc:	f000 ff5c 	bl	80a0fb8 <spark_process>
    Particle.process();
    delay(1000);
 80a0100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0104:	f000 ffd8 	bl	80a10b8 <delay>
int n;                              // counter

void setup()
{
  Serial.begin(9600);
  while (!Serial.available() && millis() < 30000) {
 80a0108:	e7e6      	b.n	80a00d8 <setup+0x14>
    Serial.println("Press any key to start.");
    Particle.process();
    delay(1000);
  }
  Serial.println("DHT Example program using DHT.acquire and DHT.aquiring");
 80a010a:	f002 f857 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a010e:	490e      	ldr	r1, [pc, #56]	; (80a0148 <setup+0x84>)
 80a0110:	f001 f9b1 	bl	80a1476 <_ZN5Print7printlnEPKc>
  Serial.print("LIB version: ");
 80a0114:	f002 f852 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a0118:	490c      	ldr	r1, [pc, #48]	; (80a014c <setup+0x88>)
 80a011a:	f001 f999 	bl	80a1450 <_ZN5Print5printEPKc>
  Serial.println(DHTLIB_VERSION);
 80a011e:	f002 f84d 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a0122:	490b      	ldr	r1, [pc, #44]	; (80a0150 <setup+0x8c>)
 80a0124:	f001 f9a7 	bl	80a1476 <_ZN5Print7printlnEPKc>
  Serial.println("---------------");
 80a0128:	f002 f848 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a012c:	4909      	ldr	r1, [pc, #36]	; (80a0154 <setup+0x90>)
 80a012e:	f001 f9a2 	bl	80a1476 <_ZN5Print7printlnEPKc>
  
  DHT.begin();
 80a0132:	4809      	ldr	r0, [pc, #36]	; (80a0158 <setup+0x94>)
 80a0134:	f000 f9fb 	bl	80a052e <_ZN14PietteTech_DHT5beginEv>

  DHTnextSampleTime = 0;  // Start the first sample immediately
 80a0138:	4b08      	ldr	r3, [pc, #32]	; (80a015c <setup+0x98>)
 80a013a:	2200      	movs	r2, #0
 80a013c:	601a      	str	r2, [r3, #0]
 80a013e:	bd38      	pop	{r3, r4, r5, pc}
 80a0140:	200005cc 	.word	0x200005cc
 80a0144:	080a5078 	.word	0x080a5078
 80a0148:	080a5090 	.word	0x080a5090
 80a014c:	080a50c7 	.word	0x080a50c7
 80a0150:	080a5249 	.word	0x080a5249
 80a0154:	080a50d5 	.word	0x080a50d5
 80a0158:	20000374 	.word	0x20000374
 80a015c:	200003d0 	.word	0x200003d0

080a0160 <loop>:
void dht_wrapper() {
  DHT.isrCallback();
}

void loop()
{
 80a0160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0162:	f000 fda3 	bl	80a0cac <HAL_Timer_Get_Milli_Seconds>
  // Check if we need to start the next sample
  if (millis() > DHTnextSampleTime) {
 80a0166:	4e6b      	ldr	r6, [pc, #428]	; (80a0314 <loop+0x1b4>)
 80a0168:	6833      	ldr	r3, [r6, #0]
 80a016a:	4283      	cmp	r3, r0
 80a016c:	f080 80d0 	bcs.w	80a0310 <loop+0x1b0>
    if (!bDHTstarted) {		// start the sample
 80a0170:	4d69      	ldr	r5, [pc, #420]	; (80a0318 <loop+0x1b8>)
 80a0172:	782b      	ldrb	r3, [r5, #0]
 80a0174:	b9ab      	cbnz	r3, 80a01a2 <loop+0x42>
      Serial.print("\n");
 80a0176:	f002 f821 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a017a:	4968      	ldr	r1, [pc, #416]	; (80a031c <loop+0x1bc>)
 80a017c:	f001 f968 	bl	80a1450 <_ZN5Print5printEPKc>
      Serial.print(n);
 80a0180:	f002 f81c 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a0184:	4b66      	ldr	r3, [pc, #408]	; (80a0320 <loop+0x1c0>)
 80a0186:	220a      	movs	r2, #10
 80a0188:	6819      	ldr	r1, [r3, #0]
 80a018a:	f001 f9cc 	bl	80a1526 <_ZN5Print5printEii>
      Serial.print(": Retrieving information from sensor: ");
 80a018e:	f002 f815 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a0192:	4964      	ldr	r1, [pc, #400]	; (80a0324 <loop+0x1c4>)
 80a0194:	f001 f95c 	bl	80a1450 <_ZN5Print5printEPKc>
      DHT.acquire();
 80a0198:	4863      	ldr	r0, [pc, #396]	; (80a0328 <loop+0x1c8>)
 80a019a:	f000 f9e1 	bl	80a0560 <_ZN14PietteTech_DHT7acquireEv>
      bDHTstarted = true;
 80a019e:	2301      	movs	r3, #1
 80a01a0:	702b      	strb	r3, [r5, #0]
    }

    if (!DHT.acquiring()) {		// has sample completed?
 80a01a2:	4861      	ldr	r0, [pc, #388]	; (80a0328 <loop+0x1c8>)
 80a01a4:	f000 faa8 	bl	80a06f8 <_ZN14PietteTech_DHT9acquiringEv>
 80a01a8:	2800      	cmp	r0, #0
 80a01aa:	f040 80b1 	bne.w	80a0310 <loop+0x1b0>

        // get DHT status
      int result = DHT.getStatus();
 80a01ae:	485e      	ldr	r0, [pc, #376]	; (80a0328 <loop+0x1c8>)
 80a01b0:	f000 faae 	bl	80a0710 <_ZN14PietteTech_DHT9getStatusEv>
 80a01b4:	4604      	mov	r4, r0

      Serial.print("Read sensor: ");
 80a01b6:	f002 f801 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a01ba:	495c      	ldr	r1, [pc, #368]	; (80a032c <loop+0x1cc>)
 80a01bc:	f001 f948 	bl	80a1450 <_ZN5Print5printEPKc>
      switch (result) {
 80a01c0:	1de0      	adds	r0, r4, #7
 80a01c2:	2807      	cmp	r0, #7
 80a01c4:	d825      	bhi.n	80a0212 <loop+0xb2>
 80a01c6:	e8df f000 	tbb	[pc, r0]
 80a01ca:	1c20      	.short	0x1c20
 80a01cc:	0c101418 	.word	0x0c101418
 80a01d0:	0408      	.short	0x0408
      case DHTLIB_OK:
        Serial.println("OK");
 80a01d2:	f001 fff3 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a01d6:	4956      	ldr	r1, [pc, #344]	; (80a0330 <loop+0x1d0>)
 80a01d8:	e01e      	b.n	80a0218 <loop+0xb8>
        break;
      case DHTLIB_ERROR_CHECKSUM:
        Serial.println("Error\n\r\tChecksum error");
 80a01da:	f001 ffef 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a01de:	4955      	ldr	r1, [pc, #340]	; (80a0334 <loop+0x1d4>)
 80a01e0:	e01a      	b.n	80a0218 <loop+0xb8>
        break;
      case DHTLIB_ERROR_ISR_TIMEOUT:
        Serial.println("Error\n\r\tISR time out error");
 80a01e2:	f001 ffeb 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a01e6:	4954      	ldr	r1, [pc, #336]	; (80a0338 <loop+0x1d8>)
 80a01e8:	e016      	b.n	80a0218 <loop+0xb8>
        break;
      case DHTLIB_ERROR_RESPONSE_TIMEOUT:
        Serial.println("Error\n\r\tResponse time out error");
 80a01ea:	f001 ffe7 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a01ee:	4953      	ldr	r1, [pc, #332]	; (80a033c <loop+0x1dc>)
 80a01f0:	e012      	b.n	80a0218 <loop+0xb8>
        break;
      case DHTLIB_ERROR_DATA_TIMEOUT:
        Serial.println("Error\n\r\tData time out error");
 80a01f2:	f001 ffe3 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a01f6:	4952      	ldr	r1, [pc, #328]	; (80a0340 <loop+0x1e0>)
 80a01f8:	e00e      	b.n	80a0218 <loop+0xb8>
        break;
      case DHTLIB_ERROR_ACQUIRING:
        Serial.println("Error\n\r\tAcquiring");
 80a01fa:	f001 ffdf 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a01fe:	4951      	ldr	r1, [pc, #324]	; (80a0344 <loop+0x1e4>)
 80a0200:	e00a      	b.n	80a0218 <loop+0xb8>
        break;
      case DHTLIB_ERROR_DELTA:
        Serial.println("Error\n\r\tDelta time to small");
 80a0202:	f001 ffdb 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a0206:	4950      	ldr	r1, [pc, #320]	; (80a0348 <loop+0x1e8>)
 80a0208:	e006      	b.n	80a0218 <loop+0xb8>
        break;
      case DHTLIB_ERROR_NOTSTARTED:
        Serial.println("Error\n\r\tNot started");
 80a020a:	f001 ffd7 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a020e:	494f      	ldr	r1, [pc, #316]	; (80a034c <loop+0x1ec>)
 80a0210:	e002      	b.n	80a0218 <loop+0xb8>
        break;
      default:
        Serial.println("Unknown error");
 80a0212:	f001 ffd3 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a0216:	494e      	ldr	r1, [pc, #312]	; (80a0350 <loop+0x1f0>)
 80a0218:	f001 f92d 	bl	80a1476 <_ZN5Print7printlnEPKc>
        break;
      }

      Serial.print("Humidity (%): ");
 80a021c:	f001 ffce 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a0220:	494c      	ldr	r1, [pc, #304]	; (80a0354 <loop+0x1f4>)
 80a0222:	f001 f915 	bl	80a1450 <_ZN5Print5printEPKc>
      Serial.println(DHT.getHumidity(), 2);
 80a0226:	f001 ffc9 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a022a:	4607      	mov	r7, r0
 80a022c:	483e      	ldr	r0, [pc, #248]	; (80a0328 <loop+0x1c8>)
 80a022e:	f000 fa8b 	bl	80a0748 <_ZN14PietteTech_DHT11getHumidityEv>
 80a0232:	f004 f8cb 	bl	80a43cc <__aeabi_f2d>
 80a0236:	2402      	movs	r4, #2
 80a0238:	4602      	mov	r2, r0
 80a023a:	460b      	mov	r3, r1
 80a023c:	4638      	mov	r0, r7
 80a023e:	9400      	str	r4, [sp, #0]
 80a0240:	f001 fa22 	bl	80a1688 <_ZN5Print7printlnEdi>

      Serial.print("Temperature (oC): ");
 80a0244:	f001 ffba 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a0248:	4943      	ldr	r1, [pc, #268]	; (80a0358 <loop+0x1f8>)
 80a024a:	f001 f901 	bl	80a1450 <_ZN5Print5printEPKc>
      Serial.println(DHT.getCelsius(), 2);
 80a024e:	f001 ffb5 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a0252:	4607      	mov	r7, r0
 80a0254:	4834      	ldr	r0, [pc, #208]	; (80a0328 <loop+0x1c8>)
 80a0256:	f000 fa5d 	bl	80a0714 <_ZN14PietteTech_DHT10getCelsiusEv>
 80a025a:	f004 f8b7 	bl	80a43cc <__aeabi_f2d>
 80a025e:	9400      	str	r4, [sp, #0]
 80a0260:	4602      	mov	r2, r0
 80a0262:	460b      	mov	r3, r1
 80a0264:	4638      	mov	r0, r7
 80a0266:	f001 fa0f 	bl	80a1688 <_ZN5Print7printlnEdi>

      Serial.print("Temperature (oF): ");
 80a026a:	f001 ffa7 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a026e:	493b      	ldr	r1, [pc, #236]	; (80a035c <loop+0x1fc>)
 80a0270:	f001 f8ee 	bl	80a1450 <_ZN5Print5printEPKc>
      Serial.println(DHT.getFahrenheit(), 2);
 80a0274:	f001 ffa2 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a0278:	4607      	mov	r7, r0
 80a027a:	482b      	ldr	r0, [pc, #172]	; (80a0328 <loop+0x1c8>)
 80a027c:	f000 fa7e 	bl	80a077c <_ZN14PietteTech_DHT13getFahrenheitEv>
 80a0280:	f004 f8a4 	bl	80a43cc <__aeabi_f2d>
 80a0284:	9400      	str	r4, [sp, #0]
 80a0286:	4602      	mov	r2, r0
 80a0288:	460b      	mov	r3, r1
 80a028a:	4638      	mov	r0, r7
 80a028c:	f001 f9fc 	bl	80a1688 <_ZN5Print7printlnEdi>

      Serial.print("Temperature (K): ");
 80a0290:	f001 ff94 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a0294:	4932      	ldr	r1, [pc, #200]	; (80a0360 <loop+0x200>)
 80a0296:	f001 f8db 	bl	80a1450 <_ZN5Print5printEPKc>
      Serial.println(DHT.getKelvin(), 2);
 80a029a:	f001 ff8f 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a029e:	4607      	mov	r7, r0
 80a02a0:	4821      	ldr	r0, [pc, #132]	; (80a0328 <loop+0x1c8>)
 80a02a2:	f000 fa95 	bl	80a07d0 <_ZN14PietteTech_DHT9getKelvinEv>
 80a02a6:	f004 f891 	bl	80a43cc <__aeabi_f2d>
 80a02aa:	9400      	str	r4, [sp, #0]
 80a02ac:	4602      	mov	r2, r0
 80a02ae:	460b      	mov	r3, r1
 80a02b0:	4638      	mov	r0, r7
 80a02b2:	f001 f9e9 	bl	80a1688 <_ZN5Print7printlnEdi>

      Serial.print("Dew Point (oC): ");
 80a02b6:	f001 ff81 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a02ba:	492a      	ldr	r1, [pc, #168]	; (80a0364 <loop+0x204>)
 80a02bc:	f001 f8c8 	bl	80a1450 <_ZN5Print5printEPKc>
      Serial.println(DHT.getDewPoint());
 80a02c0:	f001 ff7c 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a02c4:	4607      	mov	r7, r0
 80a02c6:	4818      	ldr	r0, [pc, #96]	; (80a0328 <loop+0x1c8>)
 80a02c8:	f000 faaa 	bl	80a0820 <_ZN14PietteTech_DHT11getDewPointEv>
 80a02cc:	9400      	str	r4, [sp, #0]
 80a02ce:	4602      	mov	r2, r0
 80a02d0:	460b      	mov	r3, r1
 80a02d2:	4638      	mov	r0, r7
 80a02d4:	f001 f9d8 	bl	80a1688 <_ZN5Print7printlnEdi>

      Serial.print("Dew Point Slow (oC): ");
 80a02d8:	f001 ff70 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a02dc:	4922      	ldr	r1, [pc, #136]	; (80a0368 <loop+0x208>)
 80a02de:	f001 f8b7 	bl	80a1450 <_ZN5Print5printEPKc>
      Serial.println(DHT.getDewPointSlow());
 80a02e2:	f001 ff6b 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a02e6:	4607      	mov	r7, r0
 80a02e8:	480f      	ldr	r0, [pc, #60]	; (80a0328 <loop+0x1c8>)
 80a02ea:	f000 fb01 	bl	80a08f0 <_ZN14PietteTech_DHT15getDewPointSlowEv>
 80a02ee:	9400      	str	r4, [sp, #0]
 80a02f0:	4602      	mov	r2, r0
 80a02f2:	460b      	mov	r3, r1
 80a02f4:	4638      	mov	r0, r7
 80a02f6:	f001 f9c7 	bl	80a1688 <_ZN5Print7printlnEdi>

      n++;  // increment counter
 80a02fa:	4a09      	ldr	r2, [pc, #36]	; (80a0320 <loop+0x1c0>)
 80a02fc:	6813      	ldr	r3, [r2, #0]
 80a02fe:	3301      	adds	r3, #1
 80a0300:	6013      	str	r3, [r2, #0]
      bDHTstarted = false;  // reset the sample flag so we can take another
 80a0302:	2300      	movs	r3, #0
 80a0304:	702b      	strb	r3, [r5, #0]
 80a0306:	f000 fcd1 	bl	80a0cac <HAL_Timer_Get_Milli_Seconds>
      DHTnextSampleTime = millis() + DHT_SAMPLE_INTERVAL;  // set the time for next sample
 80a030a:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 80a030e:	6030      	str	r0, [r6, #0]
    }
  }
}
 80a0310:	b003      	add	sp, #12
 80a0312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0314:	200003d0 	.word	0x200003d0
 80a0318:	200003d4 	.word	0x200003d4
 80a031c:	080a529f 	.word	0x080a529f
 80a0320:	20000370 	.word	0x20000370
 80a0324:	080a50e5 	.word	0x080a50e5
 80a0328:	20000374 	.word	0x20000374
 80a032c:	080a510c 	.word	0x080a510c
 80a0330:	080a511a 	.word	0x080a511a
 80a0334:	080a511d 	.word	0x080a511d
 80a0338:	080a5134 	.word	0x080a5134
 80a033c:	080a514f 	.word	0x080a514f
 80a0340:	080a516f 	.word	0x080a516f
 80a0344:	080a518b 	.word	0x080a518b
 80a0348:	080a519d 	.word	0x080a519d
 80a034c:	080a51b9 	.word	0x080a51b9
 80a0350:	080a51cd 	.word	0x080a51cd
 80a0354:	080a51db 	.word	0x080a51db
 80a0358:	080a51ea 	.word	0x080a51ea
 80a035c:	080a51fd 	.word	0x080a51fd
 80a0360:	080a5210 	.word	0x080a5210
 80a0364:	080a5222 	.word	0x080a5222
 80a0368:	080a5233 	.word	0x080a5233

080a036c <_GLOBAL__sub_I_DHT>:
 80a036c:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a036e:	f000 fca5 	bl	80a0cbc <HAL_Pin_Map>
 80a0372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
 //declaration
void dht_wrapper(); // must be declared before the lib initialization

// Lib instantiate
PietteTech_DHT DHT(DHTPIN, DHTTYPE, dht_wrapper);
 80a0376:	4b03      	ldr	r3, [pc, #12]	; (80a0384 <_GLOBAL__sub_I_DHT+0x18>)
 80a0378:	2216      	movs	r2, #22
 80a037a:	2103      	movs	r1, #3
 80a037c:	4802      	ldr	r0, [pc, #8]	; (80a0388 <_GLOBAL__sub_I_DHT+0x1c>)
 80a037e:	f000 b8d3 	b.w	80a0528 <_ZN14PietteTech_DHTC1EhhPFvvE>
 80a0382:	bf00      	nop
 80a0384:	080a00b9 	.word	0x080a00b9
 80a0388:	20000374 	.word	0x20000374

080a038c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a038c:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a038e:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0390:	6898      	ldr	r0, [r3, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a0392:	f012 0f01 	tst.w	r2, #1
 80a0396:	ea4f 0262 	mov.w	r2, r2, asr #1
 80a039a:	bf18      	it	ne
 80a039c:	5881      	ldrne	r1, [r0, r2]
 80a039e:	681b      	ldr	r3, [r3, #0]
 80a03a0:	4410      	add	r0, r2
 80a03a2:	bf18      	it	ne
 80a03a4:	58cb      	ldrne	r3, [r1, r3]
 80a03a6:	4718      	bx	r3

080a03a8 <_ZN14PietteTech_DHT12_isrCallbackEv>:
 * NOTE:  isrCallback is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
 80a03a8:	b570      	push	{r4, r5, r6, lr}
 80a03aa:	4604      	mov	r4, r0
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a03ac:	f000 fc76 	bl	80a0c9c <HAL_Timer_Get_Micro_Seconds>
  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
  _us = newUs;

  if (delta > 6000) {
 80a03b0:	f241 7270 	movw	r2, #6000	; 0x1770
 */
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
 80a03b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  _us = newUs;
 80a03b6:	63a0      	str	r0, [r4, #56]	; 0x38
 */
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
 80a03b8:	1ac3      	subs	r3, r0, r3
  _us = newUs;

  if (delta > 6000) {
 80a03ba:	4293      	cmp	r3, r2
 80a03bc:	d90b      	bls.n	80a03d6 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
    _status = DHTLIB_ERROR_ISR_TIMEOUT;
 80a03be:	f06f 0301 	mvn.w	r3, #1
 80a03c2:	62e3      	str	r3, [r4, #44]	; 0x2c
    _state = STOPPED;
 80a03c4:	2303      	movs	r3, #3
 80a03c6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    detachInterrupt(_sigPin);
 80a03ca:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    }
    break;
  default:
    break;
  }
}
 80a03ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _us = newUs;

  if (delta > 6000) {
    _status = DHTLIB_ERROR_ISR_TIMEOUT;
    _state = STOPPED;
    detachInterrupt(_sigPin);
 80a03d2:	f000 bebf 	b.w	80a1154 <_Z15detachInterruptt>
    return;
  }
  switch (_state) {
 80a03d6:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80a03da:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80a03de:	b112      	cbz	r2, 80a03e6 <_ZN14PietteTech_DHT12_isrCallbackEv+0x3e>
 80a03e0:	2901      	cmp	r1, #1
 80a03e2:	d020      	beq.n	80a0426 <_ZN14PietteTech_DHT12_isrCallbackEv+0x7e>
 80a03e4:	bd70      	pop	{r4, r5, r6, pc}
  case RESPONSE:            // Spec: 80us LOW followed by 80us HIGH
    if (delta < 65) {      // Spec: 20-200us to first falling edge of response
 80a03e6:	2b40      	cmp	r3, #64	; 0x40
 80a03e8:	d803      	bhi.n	80a03f2 <_ZN14PietteTech_DHT12_isrCallbackEv+0x4a>
      _us -= delta;
 80a03ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80a03ec:	1ad3      	subs	r3, r2, r3
 80a03ee:	63a3      	str	r3, [r4, #56]	; 0x38
      break; //do nothing, it started the response signal
 80a03f0:	bd70      	pop	{r4, r5, r6, pc}
      
// --------------- issue: https://github.com/particle-iot/device-os/issues/1654 -----------------
//    } if (125 < delta && delta < 200) { // originally 
    } if (125 < delta && delta < 220) {   // account for timing offset with Particle Mesh devices
 80a03f2:	f1a3 027e 	sub.w	r2, r3, #126	; 0x7e
 80a03f6:	2a5d      	cmp	r2, #93	; 0x5d
 80a03f8:	b2dd      	uxtb	r5, r3
 80a03fa:	d805      	bhi.n	80a0408 <_ZN14PietteTech_DHT12_isrCallbackEv+0x60>
// ----------------------------------------------------------------------------------------------

#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a03fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80a03fe:	1c5a      	adds	r2, r3, #1
 80a0400:	6422      	str	r2, [r4, #64]	; 0x40
 80a0402:	701d      	strb	r5, [r3, #0]
#endif
      _state = DATA;
 80a0404:	2301      	movs	r3, #1
 80a0406:	e071      	b.n	80a04ec <_ZN14PietteTech_DHT12_isrCallbackEv+0x144>
    }
    else {
      detachInterrupt(_sigPin);
 80a0408:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a040c:	f000 fea2 	bl	80a1154 <_Z15detachInterruptt>
      _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
      _state = STOPPED;
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a0410:	6c22      	ldr	r2, [r4, #64]	; 0x40
#endif
      _state = DATA;
    }
    else {
      detachInterrupt(_sigPin);
      _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
 80a0412:	f06f 0302 	mvn.w	r3, #2
 80a0416:	62e3      	str	r3, [r4, #44]	; 0x2c
      _state = STOPPED;
 80a0418:	2303      	movs	r3, #3
 80a041a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a041e:	1c53      	adds	r3, r2, #1
 80a0420:	6423      	str	r3, [r4, #64]	; 0x40
 80a0422:	7015      	strb	r5, [r2, #0]
 80a0424:	bd70      	pop	{r4, r5, r6, pc}
#endif
    }
    break;
  case DATA:          // Spec: 50us low followed by high of 26-28us = 0, 70us = 1
    if (60 < delta && delta < 155) { //valid in timing
 80a0426:	f1a3 023d 	sub.w	r2, r3, #61	; 0x3d
 80a042a:	2a5d      	cmp	r2, #93	; 0x5d
 80a042c:	d84f      	bhi.n	80a04ce <_ZN14PietteTech_DHT12_isrCallbackEv+0x126>
      _bits[_idx] <<= 1; // shift the data
 80a042e:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
      if (delta > 110) //is a one
 80a0432:	2b6e      	cmp	r3, #110	; 0x6e
#endif
    }
    break;
  case DATA:          // Spec: 50us low followed by high of 26-28us = 0, 70us = 1
    if (60 < delta && delta < 155) { //valid in timing
      _bits[_idx] <<= 1; // shift the data
 80a0434:	4421      	add	r1, r4
 80a0436:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 80a043a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a043e:	b2d2      	uxtb	r2, r2
 80a0440:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
      if (delta > 110) //is a one
 80a0444:	d908      	bls.n	80a0458 <_ZN14PietteTech_DHT12_isrCallbackEv+0xb0>
        _bits[_idx] |= 1;
 80a0446:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 80a044a:	4422      	add	r2, r4
 80a044c:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 80a0450:	f041 0101 	orr.w	r1, r1, #1
 80a0454:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a0458:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a045a:	b2db      	uxtb	r3, r3
 80a045c:	1c51      	adds	r1, r2, #1
 80a045e:	6421      	str	r1, [r4, #64]	; 0x40
 80a0460:	7013      	strb	r3, [r2, #0]
#endif
      if (_cnt == 0) { // we have completed the byte, go to next
 80a0462:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80a0466:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a046a:	bb4b      	cbnz	r3, 80a04c0 <_ZN14PietteTech_DHT12_isrCallbackEv+0x118>
        _cnt = 7; // restart at MSB
 80a046c:	2307      	movs	r3, #7
 80a046e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if (++_idx == 5) { // go to next byte, if we have got 5 bytes stop.
 80a0472:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80a0476:	3301      	adds	r3, #1
 80a0478:	b2db      	uxtb	r3, r3
 80a047a:	2b05      	cmp	r3, #5
 80a047c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 80a0480:	d136      	bne.n	80a04f0 <_ZN14PietteTech_DHT12_isrCallbackEv+0x148>
          detachInterrupt(_sigPin);
 80a0482:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0486:	f000 fe65 	bl	80a1154 <_Z15detachInterruptt>
          // Verify checksum
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 80a048a:	f894 6030 	ldrb.w	r6, [r4, #48]	; 0x30
 80a048e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80a0492:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
          if (_bits[4] != sum) {
 80a0496:	4432      	add	r2, r6
      if (_cnt == 0) { // we have completed the byte, go to next
        _cnt = 7; // restart at MSB
        if (++_idx == 5) { // go to next byte, if we have got 5 bytes stop.
          detachInterrupt(_sigPin);
          // Verify checksum
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 80a0498:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
          if (_bits[4] != sum) {
 80a049c:	4413      	add	r3, r2
 80a049e:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 80a04a2:	4403      	add	r3, r0
 80a04a4:	b2db      	uxtb	r3, r3
 80a04a6:	428b      	cmp	r3, r1
 80a04a8:	d002      	beq.n	80a04b0 <_ZN14PietteTech_DHT12_isrCallbackEv+0x108>
            _status = DHTLIB_ERROR_CHECKSUM;
 80a04aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a04ae:	e01b      	b.n	80a04e8 <_ZN14PietteTech_DHT12_isrCallbackEv+0x140>
            _state = STOPPED;
          }
          else {
            _status = DHTLIB_OK;
            _state = ACQUIRED;
 80a04b0:	2302      	movs	r3, #2
          if (_bits[4] != sum) {
            _status = DHTLIB_ERROR_CHECKSUM;
            _state = STOPPED;
          }
          else {
            _status = DHTLIB_OK;
 80a04b2:	62e5      	str	r5, [r4, #44]	; 0x2c
            _state = ACQUIRED;
 80a04b4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
            _convert = true;
 80a04b8:	2301      	movs	r3, #1
 80a04ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80a04be:	bd70      	pop	{r4, r5, r6, pc}
          }
          break;
        }
      }
      else _cnt--;
 80a04c0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80a04c4:	3b01      	subs	r3, #1
 80a04c6:	b2db      	uxtb	r3, r3
 80a04c8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80a04cc:	bd70      	pop	{r4, r5, r6, pc}
 80a04ce:	6c60      	ldr	r0, [r4, #68]	; 0x44
    }
    else if (delta < 10) {
 80a04d0:	2b09      	cmp	r3, #9
      detachInterrupt(_sigPin);
 80a04d2:	b280      	uxth	r0, r0
          break;
        }
      }
      else _cnt--;
    }
    else if (delta < 10) {
 80a04d4:	d804      	bhi.n	80a04e0 <_ZN14PietteTech_DHT12_isrCallbackEv+0x138>
      detachInterrupt(_sigPin);
 80a04d6:	f000 fe3d 	bl	80a1154 <_Z15detachInterruptt>
      _status = DHTLIB_ERROR_DELTA;
 80a04da:	f06f 0305 	mvn.w	r3, #5
 80a04de:	e003      	b.n	80a04e8 <_ZN14PietteTech_DHT12_isrCallbackEv+0x140>
      _state = STOPPED;
    }
    else {
      detachInterrupt(_sigPin);
 80a04e0:	f000 fe38 	bl	80a1154 <_Z15detachInterruptt>
      _status = DHTLIB_ERROR_DATA_TIMEOUT;
 80a04e4:	f06f 0303 	mvn.w	r3, #3
 80a04e8:	62e3      	str	r3, [r4, #44]	; 0x2c
      _state = STOPPED;
 80a04ea:	2303      	movs	r3, #3
 80a04ec:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80a04f0:	bd70      	pop	{r4, r5, r6, pc}

080a04f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a04f2:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a04f4:	b538      	push	{r3, r4, r5, lr}
 80a04f6:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a04f8:	d005      	beq.n	80a0506 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
 80a04fa:	2a03      	cmp	r2, #3
 80a04fc:	d00f      	beq.n	80a051e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
 80a04fe:	2a01      	cmp	r2, #1
 80a0500:	d110      	bne.n	80a0524 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0502:	680b      	ldr	r3, [r1, #0]
 80a0504:	e009      	b.n	80a051a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0506:	200c      	movs	r0, #12
 80a0508:	680d      	ldr	r5, [r1, #0]
 80a050a:	f7ff fdc6 	bl	80a009a <_Znwj>
 80a050e:	4603      	mov	r3, r0
 80a0510:	b118      	cbz	r0, 80a051a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
 80a0512:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a0516:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a051a:	6023      	str	r3, [r4, #0]
 80a051c:	e002      	b.n	80a0524 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a051e:	6800      	ldr	r0, [r0, #0]
 80a0520:	f7ff fdbf 	bl	80a00a2 <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0524:	2000      	movs	r0, #0
 80a0526:	bd38      	pop	{r3, r4, r5, pc}

080a0528 <_ZN14PietteTech_DHTC1EhhPFvvE>:
 *        it is no longer used or needed
 */
PietteTech_DHT::PietteTech_DHT() {
}
PietteTech_DHT::PietteTech_DHT(uint8_t sigPin, uint8_t dht_type, void(*callback_wrapper)()) {
  _sigPin = sigPin;
 80a0528:	6441      	str	r1, [r0, #68]	; 0x44
  _type = dht_type;
 80a052a:	6482      	str	r2, [r0, #72]	; 0x48
}
 80a052c:	4770      	bx	lr

080a052e <_ZN14PietteTech_DHT5beginEv>:

/*
 * NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::begin() {
 80a052e:	b538      	push	{r3, r4, r5, lr}
 80a0530:	4604      	mov	r4, r0
  _firstreading = true;
  _lastreadtime = 0;
 80a0532:	2300      	movs	r3, #0
 80a0534:	64c3      	str	r3, [r0, #76]	; 0x4c
  _state = STOPPED;
 80a0536:	2303      	movs	r3, #3
/*
 * NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::begin() {
  _firstreading = true;
 80a0538:	2501      	movs	r5, #1
  _lastreadtime = 0;
  _state = STOPPED;
 80a053a:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _status = DHTLIB_ERROR_NOTSTARTED;
 80a053e:	f06f 0306 	mvn.w	r3, #6
/*
 * NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::begin() {
  _firstreading = true;
 80a0542:	f880 5050 	strb.w	r5, [r0, #80]	; 0x50
  _lastreadtime = 0;
  _state = STOPPED;
  _status = DHTLIB_ERROR_NOTSTARTED;
 80a0546:	62c3      	str	r3, [r0, #44]	; 0x2c
  pinMode(_sigPin, OUTPUT);
 80a0548:	4629      	mov	r1, r5
 80a054a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
 80a054e:	f001 ffa9 	bl	80a24a4 <pinMode>
  digitalWrite(_sigPin, HIGH);
 80a0552:	4629      	mov	r1, r5
 80a0554:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
}
 80a0558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  _firstreading = true;
  _lastreadtime = 0;
  _state = STOPPED;
  _status = DHTLIB_ERROR_NOTSTARTED;
  pinMode(_sigPin, OUTPUT);
  digitalWrite(_sigPin, HIGH);
 80a055c:	f001 bfb3 	b.w	80a24c6 <digitalWrite>

080a0560 <_ZN14PietteTech_DHT7acquireEv>:
  _sigPin = sigPin;
  _type = dht_type;
  this->begin();
}

int PietteTech_DHT::acquire() {
 80a0560:	b570      	push	{r4, r5, r6, lr}
 80a0562:	4604      	mov	r4, r0
 80a0564:	b086      	sub	sp, #24
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0566:	f000 fba1 	bl	80a0cac <HAL_Timer_Get_Milli_Seconds>
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading
  unsigned long currenttime = millis();
  if (!_firstreading && ((currenttime - _lastreadtime) < 2000)) {
 80a056a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80a056e:	b923      	cbnz	r3, 80a057a <_ZN14PietteTech_DHT7acquireEv+0x1a>
 80a0570:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80a0572:	1ac3      	subs	r3, r0, r3
 80a0574:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a0578:	d30a      	bcc.n	80a0590 <_ZN14PietteTech_DHT7acquireEv+0x30>
    // return last correct measurement, (this read time - last read time) < device limit
    return DHTLIB_ACQUIRED;
  }

  if (_state == STOPPED || _state == ACQUIRED) {
 80a057a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80a057e:	2b03      	cmp	r3, #3
 80a0580:	d008      	beq.n	80a0594 <_ZN14PietteTech_DHT7acquireEv+0x34>
 80a0582:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80a0586:	2b02      	cmp	r3, #2
 80a0588:	d004      	beq.n	80a0594 <_ZN14PietteTech_DHT7acquireEv+0x34>
    attachInterrupt(_sigPin, &PietteTech_DHT::_isrCallback, this, FALLING);

    return DHTLIB_ACQUIRING;
  }
  else
    return DHTLIB_ERROR_ACQUIRING;
 80a058a:	f06f 0004 	mvn.w	r0, #4
 80a058e:	e05f      	b.n	80a0650 <_ZN14PietteTech_DHT7acquireEv+0xf0>
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading
  unsigned long currenttime = millis();
  if (!_firstreading && ((currenttime - _lastreadtime) < 2000)) {
    // return last correct measurement, (this read time - last read time) < device limit
    return DHTLIB_ACQUIRED;
 80a0590:	2002      	movs	r0, #2
 80a0592:	e05d      	b.n	80a0650 <_ZN14PietteTech_DHT7acquireEv+0xf0>

  if (_state == STOPPED || _state == ACQUIRED) {
    /*
     * Setup the initial state machine
     */
    _firstreading = false;
 80a0594:	2300      	movs	r3, #0

#if defined(DHT_DEBUG_TIMING)
    /*
     * Clear the debug timings array
     */
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 80a0596:	461a      	mov	r2, r3

  if (_state == STOPPED || _state == ACQUIRED) {
    /*
     * Setup the initial state machine
     */
    _firstreading = false;
 80a0598:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    _lastreadtime = currenttime;
 80a059c:	64e0      	str	r0, [r4, #76]	; 0x4c
    _state = RESPONSE;
 80a059e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29

#if defined(DHT_DEBUG_TIMING)
    /*
     * Clear the debug timings array
     */
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 80a05a2:	54e2      	strb	r2, [r4, r3]
 80a05a4:	3301      	adds	r3, #1
 80a05a6:	2b29      	cmp	r3, #41	; 0x29
 80a05a8:	f04f 0500 	mov.w	r5, #0
 80a05ac:	d1f9      	bne.n	80a05a2 <_ZN14PietteTech_DHT7acquireEv+0x42>

    /*
     * Set the initial values in the buffer and variables
     */
    for (int i = 0; i < 5; i++) _bits[i] = 0;
    _cnt = 7;
 80a05ae:	2307      	movs	r3, #7
#endif

    /*
     * Set the initial values in the buffer and variables
     */
    for (int i = 0; i < 5; i++) _bits[i] = 0;
 80a05b0:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 80a05b4:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 80a05b8:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 80a05bc:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
 80a05c0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    _cnt = 7;
 80a05c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    _idx = 0;
    _hum = 0;
 80a05c8:	2300      	movs	r3, #0
 80a05ca:	6563      	str	r3, [r4, #84]	; 0x54
    _temp = 0;
 80a05cc:	65a3      	str	r3, [r4, #88]	; 0x58

    /*
     * Toggle the digital output to trigger the DHT device
     * to send us temperature and humidity data
     */
    pinMode(_sigPin, OUTPUT);
 80a05ce:	2101      	movs	r1, #1
 80a05d0:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
#if defined(DHT_DEBUG_TIMING)
    /*
     * Clear the debug timings array
     */
    for (int i = 0; i < 41; i++) _edges[i] = 0;
    _e = &_edges[0];
 80a05d4:	6424      	str	r4, [r4, #64]	; 0x40
    /*
     * Set the initial values in the buffer and variables
     */
    for (int i = 0; i < 5; i++) _bits[i] = 0;
    _cnt = 7;
    _idx = 0;
 80a05d6:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36

    /*
     * Toggle the digital output to trigger the DHT device
     * to send us temperature and humidity data
     */
    pinMode(_sigPin, OUTPUT);
 80a05da:	f001 ff63 	bl	80a24a4 <pinMode>
    digitalWrite(_sigPin, LOW);
 80a05de:	4629      	mov	r1, r5
 80a05e0:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a05e4:	f001 ff6f 	bl	80a24c6 <digitalWrite>
    if (_type == DHT11)
 80a05e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80a05ea:	2b0b      	cmp	r3, #11
 80a05ec:	d103      	bne.n	80a05f6 <_ZN14PietteTech_DHT7acquireEv+0x96>
      delay(18);                  // DHT11 Spec: 18ms min
 80a05ee:	2012      	movs	r0, #18
 80a05f0:	f000 fd62 	bl	80a10b8 <delay>
 80a05f4:	e003      	b.n	80a05fe <_ZN14PietteTech_DHT7acquireEv+0x9e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a05f6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80a05fa:	f000 fb47 	bl	80a0c8c <HAL_Delay_Microseconds>
    else
      delayMicroseconds(1500);    // DHT22 Spec: 0.8-20ms, 1ms typ
    pinMode(_sigPin, INPUT);        // Note Hi-Z mode with pullup resistor
 80a05fe:	2100      	movs	r1, #0
 80a0600:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0604:	f001 ff4e 	bl	80a24a4 <pinMode>

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0608:	f000 fb48 	bl	80a0c9c <HAL_Timer_Get_Micro_Seconds>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a060c:	2500      	movs	r5, #0
                                    // will keep this high until the DHT responds.
    /*
     * Attach the interrupt handler to receive the data once the DHT
     * starts to send us data
     */
    _us = micros();
 80a060e:	63a0      	str	r0, [r4, #56]	; 0x38
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0610:	200c      	movs	r0, #12
    attachInterrupt(_sigPin, &PietteTech_DHT::_isrCallback, this, FALLING);
 80a0612:	f8b4 6044 	ldrh.w	r6, [r4, #68]	; 0x44
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0616:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0618:	f7ff fd3f 	bl	80a009a <_Znwj>
 80a061c:	b118      	cbz	r0, 80a0626 <_ZN14PietteTech_DHT7acquireEv+0xc6>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80a061e:	4b0d      	ldr	r3, [pc, #52]	; (80a0654 <_ZN14PietteTech_DHT7acquireEv+0xf4>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0620:	6084      	str	r4, [r0, #8]
 80a0622:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0626:	4b0c      	ldr	r3, [pc, #48]	; (80a0658 <_ZN14PietteTech_DHT7acquireEv+0xf8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0628:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a062a:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a062c:	4b0b      	ldr	r3, [pc, #44]	; (80a065c <_ZN14PietteTech_DHT7acquireEv+0xfc>)
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
 80a062e:	2202      	movs	r2, #2
 80a0630:	9304      	str	r3, [sp, #16]
 80a0632:	2300      	movs	r3, #0
 80a0634:	9300      	str	r3, [sp, #0]
 80a0636:	a902      	add	r1, sp, #8
 80a0638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a063c:	4630      	mov	r0, r6
 80a063e:	f000 fdcb 	bl	80a11d8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a0642:	9b04      	ldr	r3, [sp, #16]
 80a0644:	b11b      	cbz	r3, 80a064e <_ZN14PietteTech_DHT7acquireEv+0xee>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0646:	a902      	add	r1, sp, #8
 80a0648:	2203      	movs	r2, #3
 80a064a:	4608      	mov	r0, r1
 80a064c:	4798      	blx	r3
 80a064e:	2001      	movs	r0, #1

    return DHTLIB_ACQUIRING;
  }
  else
    return DHTLIB_ERROR_ACQUIRING;
}
 80a0650:	b006      	add	sp, #24
 80a0652:	bd70      	pop	{r4, r5, r6, pc}
 80a0654:	080a03a9 	.word	0x080a03a9
 80a0658:	080a038d 	.word	0x080a038d
 80a065c:	080a04f3 	.word	0x080a04f3

080a0660 <_ZN14PietteTech_DHT11isrCallbackEv>:

/*
 * NOTE:  isrCallback is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::isrCallback() { }
 80a0660:	4770      	bx	lr
 80a0662:	0000      	movs	r0, r0
 80a0664:	0000      	movs	r0, r0
	...

080a0668 <_ZN14PietteTech_DHT7convertEv>:
  default:
    break;
  }
}

void PietteTech_DHT::convert() {
 80a0668:	b510      	push	{r4, lr}
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
 80a066a:	6c83      	ldr	r3, [r0, #72]	; 0x48
  default:
    break;
  }
}

void PietteTech_DHT::convert() {
 80a066c:	4604      	mov	r4, r0
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
 80a066e:	2b0b      	cmp	r3, #11
 80a0670:	d030      	beq.n	80a06d4 <_ZN14PietteTech_DHT7convertEv+0x6c>
 80a0672:	db39      	blt.n	80a06e8 <_ZN14PietteTech_DHT7convertEv+0x80>
 80a0674:	3b15      	subs	r3, #21
 80a0676:	2b01      	cmp	r3, #1
 80a0678:	d836      	bhi.n	80a06e8 <_ZN14PietteTech_DHT7convertEv+0x80>
    _hum = _bits[0];
    _temp = _bits[2];
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
 80a067a:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 80a067e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80a0682:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a0686:	b280      	uxth	r0, r0
 80a0688:	f003 fe8e 	bl	80a43a8 <__aeabi_i2d>
 80a068c:	a318      	add	r3, pc, #96	; (adr r3, 80a06f0 <_ZN14PietteTech_DHT7convertEv+0x88>)
 80a068e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0692:	f003 feef 	bl	80a4474 <__aeabi_dmul>
 80a0696:	f004 f9e5 	bl	80a4a64 <__aeabi_d2f>
    _temp = (_bits[2] & 0x80 ?
 80a069a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    _hum = _bits[0];
    _temp = _bits[2];
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
 80a069e:	6560      	str	r0, [r4, #84]	; 0x54
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
 80a06a0:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
      word(_bits[2], _bits[3])) * 0.1;
 80a06a4:	f013 0f80 	tst.w	r3, #128	; 0x80
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
 80a06a8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
      word(_bits[2], _bits[3])) * 0.1;
 80a06ac:	bf1b      	ittet	ne
 80a06ae:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
 80a06b2:	eb03 2000 	addne.w	r0, r3, r0, lsl #8
 80a06b6:	eb03 2000 	addeq.w	r0, r3, r0, lsl #8
 80a06ba:	4240      	negne	r0, r0
 80a06bc:	bf08      	it	eq
 80a06be:	b280      	uxtheq	r0, r0
 80a06c0:	f003 fe72 	bl	80a43a8 <__aeabi_i2d>
 80a06c4:	a30a      	add	r3, pc, #40	; (adr r3, 80a06f0 <_ZN14PietteTech_DHT7convertEv+0x88>)
 80a06c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a06ca:	f003 fed3 	bl	80a4474 <__aeabi_dmul>
 80a06ce:	f004 f9c9 	bl	80a4a64 <__aeabi_d2f>
 80a06d2:	e008      	b.n	80a06e6 <_ZN14PietteTech_DHT7convertEv+0x7e>

void PietteTech_DHT::convert() {
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
  case DHT11:
    _hum = _bits[0];
 80a06d4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 80a06d8:	f004 faca 	bl	80a4c70 <__aeabi_ui2f>
 80a06dc:	6560      	str	r0, [r4, #84]	; 0x54
    _temp = _bits[2];
 80a06de:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 80a06e2:	f004 fac5 	bl	80a4c70 <__aeabi_ui2f>
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
      word(_bits[2], _bits[3])) * 0.1;
 80a06e6:	65a0      	str	r0, [r4, #88]	; 0x58
    break;
  }
  _convert = false;
 80a06e8:	2300      	movs	r3, #0
 80a06ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80a06ee:	bd10      	pop	{r4, pc}
 80a06f0:	9999999a 	.word	0x9999999a
 80a06f4:	3fb99999 	.word	0x3fb99999

080a06f8 <_ZN14PietteTech_DHT9acquiringEv>:
}

bool PietteTech_DHT::acquiring() {
  if (_state != ACQUIRED && _state != STOPPED)
 80a06f8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a06fc:	2b02      	cmp	r3, #2
 80a06fe:	d005      	beq.n	80a070c <_ZN14PietteTech_DHT9acquiringEv+0x14>
 80a0700:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80a0704:	3803      	subs	r0, #3
 80a0706:	bf18      	it	ne
 80a0708:	2001      	movne	r0, #1
 80a070a:	4770      	bx	lr
    return true;
  return false;
 80a070c:	2000      	movs	r0, #0
}
 80a070e:	4770      	bx	lr

080a0710 <_ZN14PietteTech_DHT9getStatusEv>:

int PietteTech_DHT::getStatus() {
  return _status;
 80a0710:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
 80a0712:	4770      	bx	lr

080a0714 <_ZN14PietteTech_DHT10getCelsiusEv>:

float PietteTech_DHT::getCelsius() {
 80a0714:	b510      	push	{r4, lr}
  DHT_CHECK_STATE;
 80a0716:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29

int PietteTech_DHT::getStatus() {
  return _status;
}

float PietteTech_DHT::getCelsius() {
 80a071a:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a071c:	2b03      	cmp	r3, #3
 80a071e:	d103      	bne.n	80a0728 <_ZN14PietteTech_DHT10getCelsiusEv+0x14>
 80a0720:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0722:	f004 faa9 	bl	80a4c78 <__aeabi_i2f>
 80a0726:	bd10      	pop	{r4, pc}
 80a0728:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a072c:	2b02      	cmp	r3, #2
 80a072e:	d106      	bne.n	80a073e <_ZN14PietteTech_DHT10getCelsiusEv+0x2a>
 80a0730:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a0734:	b10b      	cbz	r3, 80a073a <_ZN14PietteTech_DHT10getCelsiusEv+0x26>
 80a0736:	f7ff ff97 	bl	80a0668 <_ZN14PietteTech_DHT7convertEv>
  return _temp;
 80a073a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80a073c:	bd10      	pop	{r4, pc}
int PietteTech_DHT::getStatus() {
  return _status;
}

float PietteTech_DHT::getCelsius() {
  DHT_CHECK_STATE;
 80a073e:	4801      	ldr	r0, [pc, #4]	; (80a0744 <_ZN14PietteTech_DHT10getCelsiusEv+0x30>)
  return _temp;
}
 80a0740:	bd10      	pop	{r4, pc}
 80a0742:	bf00      	nop
 80a0744:	c0a00000 	.word	0xc0a00000

080a0748 <_ZN14PietteTech_DHT11getHumidityEv>:

float PietteTech_DHT::getHumidity() {
 80a0748:	b510      	push	{r4, lr}
  DHT_CHECK_STATE;
 80a074a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
float PietteTech_DHT::getCelsius() {
  DHT_CHECK_STATE;
  return _temp;
}

float PietteTech_DHT::getHumidity() {
 80a074e:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a0750:	2b03      	cmp	r3, #3
 80a0752:	d103      	bne.n	80a075c <_ZN14PietteTech_DHT11getHumidityEv+0x14>
 80a0754:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0756:	f004 fa8f 	bl	80a4c78 <__aeabi_i2f>
 80a075a:	bd10      	pop	{r4, pc}
 80a075c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a0760:	2b02      	cmp	r3, #2
 80a0762:	d106      	bne.n	80a0772 <_ZN14PietteTech_DHT11getHumidityEv+0x2a>
 80a0764:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a0768:	b10b      	cbz	r3, 80a076e <_ZN14PietteTech_DHT11getHumidityEv+0x26>
 80a076a:	f7ff ff7d 	bl	80a0668 <_ZN14PietteTech_DHT7convertEv>
  return _hum;
 80a076e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80a0770:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
  return _temp;
}

float PietteTech_DHT::getHumidity() {
  DHT_CHECK_STATE;
 80a0772:	4801      	ldr	r0, [pc, #4]	; (80a0778 <_ZN14PietteTech_DHT11getHumidityEv+0x30>)
  return _hum;
}
 80a0774:	bd10      	pop	{r4, pc}
 80a0776:	bf00      	nop
 80a0778:	c0a00000 	.word	0xc0a00000

080a077c <_ZN14PietteTech_DHT13getFahrenheitEv>:

float PietteTech_DHT::getFahrenheit() {
 80a077c:	b510      	push	{r4, lr}
  DHT_CHECK_STATE;
 80a077e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
float PietteTech_DHT::getHumidity() {
  DHT_CHECK_STATE;
  return _hum;
}

float PietteTech_DHT::getFahrenheit() {
 80a0782:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a0784:	2b03      	cmp	r3, #3
 80a0786:	d103      	bne.n	80a0790 <_ZN14PietteTech_DHT13getFahrenheitEv+0x14>
 80a0788:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a078a:	f004 fa75 	bl	80a4c78 <__aeabi_i2f>
 80a078e:	bd10      	pop	{r4, pc}
 80a0790:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a0794:	2b02      	cmp	r3, #2
 80a0796:	d110      	bne.n	80a07ba <_ZN14PietteTech_DHT13getFahrenheitEv+0x3e>
 80a0798:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a079c:	b10b      	cbz	r3, 80a07a2 <_ZN14PietteTech_DHT13getFahrenheitEv+0x26>
 80a079e:	f7ff ff63 	bl	80a0668 <_ZN14PietteTech_DHT7convertEv>
  return _temp * 9 / 5 + 32;
 80a07a2:	4907      	ldr	r1, [pc, #28]	; (80a07c0 <_ZN14PietteTech_DHT13getFahrenheitEv+0x44>)
 80a07a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80a07a6:	f004 fabb 	bl	80a4d20 <__aeabi_fmul>
 80a07aa:	4906      	ldr	r1, [pc, #24]	; (80a07c4 <_ZN14PietteTech_DHT13getFahrenheitEv+0x48>)
 80a07ac:	f004 fb6c 	bl	80a4e88 <__aeabi_fdiv>
 80a07b0:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80a07b4:	f004 f9ac 	bl	80a4b10 <__addsf3>
 80a07b8:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
  return _hum;
}

float PietteTech_DHT::getFahrenheit() {
  DHT_CHECK_STATE;
 80a07ba:	4803      	ldr	r0, [pc, #12]	; (80a07c8 <_ZN14PietteTech_DHT13getFahrenheitEv+0x4c>)
  return _temp * 9 / 5 + 32;
}
 80a07bc:	bd10      	pop	{r4, pc}
 80a07be:	bf00      	nop
 80a07c0:	41100000 	.word	0x41100000
 80a07c4:	40a00000 	.word	0x40a00000
 80a07c8:	c0a00000 	.word	0xc0a00000
 80a07cc:	00000000 	.word	0x00000000

080a07d0 <_ZN14PietteTech_DHT9getKelvinEv>:

float PietteTech_DHT::getKelvin() {
 80a07d0:	b510      	push	{r4, lr}
  DHT_CHECK_STATE;
 80a07d2:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
float PietteTech_DHT::getFahrenheit() {
  DHT_CHECK_STATE;
  return _temp * 9 / 5 + 32;
}

float PietteTech_DHT::getKelvin() {
 80a07d6:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a07d8:	2b03      	cmp	r3, #3
 80a07da:	d103      	bne.n	80a07e4 <_ZN14PietteTech_DHT9getKelvinEv+0x14>
 80a07dc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a07de:	f004 fa4b 	bl	80a4c78 <__aeabi_i2f>
 80a07e2:	bd10      	pop	{r4, pc}
 80a07e4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a07e8:	2b02      	cmp	r3, #2
 80a07ea:	d10f      	bne.n	80a080c <_ZN14PietteTech_DHT9getKelvinEv+0x3c>
 80a07ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a07f0:	b10b      	cbz	r3, 80a07f6 <_ZN14PietteTech_DHT9getKelvinEv+0x26>
 80a07f2:	f7ff ff39 	bl	80a0668 <_ZN14PietteTech_DHT7convertEv>
  return _temp + 273.15;
 80a07f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80a07f8:	f003 fde8 	bl	80a43cc <__aeabi_f2d>
 80a07fc:	a304      	add	r3, pc, #16	; (adr r3, 80a0810 <_ZN14PietteTech_DHT9getKelvinEv+0x40>)
 80a07fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0802:	f003 fc85 	bl	80a4110 <__adddf3>
 80a0806:	f004 f92d 	bl	80a4a64 <__aeabi_d2f>
 80a080a:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
  return _temp * 9 / 5 + 32;
}

float PietteTech_DHT::getKelvin() {
  DHT_CHECK_STATE;
 80a080c:	4802      	ldr	r0, [pc, #8]	; (80a0818 <_ZN14PietteTech_DHT9getKelvinEv+0x48>)
  return _temp + 273.15;
}
 80a080e:	bd10      	pop	{r4, pc}
 80a0810:	66666666 	.word	0x66666666
 80a0814:	40711266 	.word	0x40711266
 80a0818:	c0a00000 	.word	0xc0a00000
 80a081c:	00000000 	.word	0x00000000

080a0820 <_ZN14PietteTech_DHT11getDewPointEv>:
}

// delta max = 0.6544 wrt dewPoint()
// 5x faster than dewPoint()
// reference: http://en.wikipedia.org/wiki/Dew_point
double PietteTech_DHT::getDewPoint() {
 80a0820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  DHT_CHECK_STATE;
 80a0824:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
}

// delta max = 0.6544 wrt dewPoint()
// 5x faster than dewPoint()
// reference: http://en.wikipedia.org/wiki/Dew_point
double PietteTech_DHT::getDewPoint() {
 80a0828:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a082a:	2b03      	cmp	r3, #3
 80a082c:	d104      	bne.n	80a0838 <_ZN14PietteTech_DHT11getDewPointEv+0x18>
 80a082e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0830:	f003 fdba 	bl	80a43a8 <__aeabi_i2d>
 80a0834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0838:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a083c:	2b02      	cmp	r3, #2
 80a083e:	d146      	bne.n	80a08ce <_ZN14PietteTech_DHT11getDewPointEv+0xae>
 80a0840:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a0844:	b10b      	cbz	r3, 80a084a <_ZN14PietteTech_DHT11getDewPointEv+0x2a>
 80a0846:	f7ff ff0f 	bl	80a0668 <_ZN14PietteTech_DHT7convertEv>
  double a = 17.271;
  double b = 237.7;
  double temp_ = (a * (double)_temp) / (b + (double)_temp) + log((double)_hum / 100);
 80a084a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80a084c:	f003 fdbe 	bl	80a43cc <__aeabi_f2d>
 80a0850:	4606      	mov	r6, r0
 80a0852:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80a0854:	460f      	mov	r7, r1
 80a0856:	f003 fdb9 	bl	80a43cc <__aeabi_f2d>
 80a085a:	2200      	movs	r2, #0
 80a085c:	4b22      	ldr	r3, [pc, #136]	; (80a08e8 <_ZN14PietteTech_DHT11getDewPointEv+0xc8>)
 80a085e:	f003 ff33 	bl	80a46c8 <__aeabi_ddiv>
 80a0862:	f001 fff3 	bl	80a284c <log>
 80a0866:	a31c      	add	r3, pc, #112	; (adr r3, 80a08d8 <_ZN14PietteTech_DHT11getDewPointEv+0xb8>)
 80a0868:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a086c:	4604      	mov	r4, r0
 80a086e:	460d      	mov	r5, r1
 80a0870:	4630      	mov	r0, r6
 80a0872:	4639      	mov	r1, r7
 80a0874:	f003 fdfe 	bl	80a4474 <__aeabi_dmul>
 80a0878:	a319      	add	r3, pc, #100	; (adr r3, 80a08e0 <_ZN14PietteTech_DHT11getDewPointEv+0xc0>)
 80a087a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a087e:	4680      	mov	r8, r0
 80a0880:	4689      	mov	r9, r1
 80a0882:	4630      	mov	r0, r6
 80a0884:	4639      	mov	r1, r7
 80a0886:	f003 fc43 	bl	80a4110 <__adddf3>
 80a088a:	4602      	mov	r2, r0
 80a088c:	460b      	mov	r3, r1
 80a088e:	4640      	mov	r0, r8
 80a0890:	4649      	mov	r1, r9
 80a0892:	f003 ff19 	bl	80a46c8 <__aeabi_ddiv>
 80a0896:	4622      	mov	r2, r4
 80a0898:	462b      	mov	r3, r5
 80a089a:	f003 fc39 	bl	80a4110 <__adddf3>
  double Td = (b * temp_) / (a - temp_);
 80a089e:	a310      	add	r3, pc, #64	; (adr r3, 80a08e0 <_ZN14PietteTech_DHT11getDewPointEv+0xc0>)
 80a08a0:	e9d3 2300 	ldrd	r2, r3, [r3]
// reference: http://en.wikipedia.org/wiki/Dew_point
double PietteTech_DHT::getDewPoint() {
  DHT_CHECK_STATE;
  double a = 17.271;
  double b = 237.7;
  double temp_ = (a * (double)_temp) / (b + (double)_temp) + log((double)_hum / 100);
 80a08a4:	4606      	mov	r6, r0
 80a08a6:	460f      	mov	r7, r1
  double Td = (b * temp_) / (a - temp_);
 80a08a8:	f003 fde4 	bl	80a4474 <__aeabi_dmul>
 80a08ac:	4632      	mov	r2, r6
 80a08ae:	4604      	mov	r4, r0
 80a08b0:	460d      	mov	r5, r1
 80a08b2:	a109      	add	r1, pc, #36	; (adr r1, 80a08d8 <_ZN14PietteTech_DHT11getDewPointEv+0xb8>)
 80a08b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a08b8:	463b      	mov	r3, r7
 80a08ba:	f003 fc27 	bl	80a410c <__aeabi_dsub>
 80a08be:	4602      	mov	r2, r0
 80a08c0:	460b      	mov	r3, r1
 80a08c2:	4620      	mov	r0, r4
 80a08c4:	4629      	mov	r1, r5
 80a08c6:	f003 feff 	bl	80a46c8 <__aeabi_ddiv>
  return Td;
 80a08ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

// delta max = 0.6544 wrt dewPoint()
// 5x faster than dewPoint()
// reference: http://en.wikipedia.org/wiki/Dew_point
double PietteTech_DHT::getDewPoint() {
  DHT_CHECK_STATE;
 80a08ce:	2000      	movs	r0, #0
 80a08d0:	4906      	ldr	r1, [pc, #24]	; (80a08ec <_ZN14PietteTech_DHT11getDewPointEv+0xcc>)
  double a = 17.271;
  double b = 237.7;
  double temp_ = (a * (double)_temp) / (b + (double)_temp) + log((double)_hum / 100);
  double Td = (b * temp_) / (a - temp_);
  return Td;
}
 80a08d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a08d6:	bf00      	nop
 80a08d8:	4189374c 	.word	0x4189374c
 80a08dc:	40314560 	.word	0x40314560
 80a08e0:	66666666 	.word	0x66666666
 80a08e4:	406db666 	.word	0x406db666
 80a08e8:	40590000 	.word	0x40590000
 80a08ec:	c0140000 	.word	0xc0140000

080a08f0 <_ZN14PietteTech_DHT15getDewPointSlowEv>:

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
 80a08f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DHT_CHECK_STATE;
 80a08f4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
  return Td;
}

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
 80a08f8:	4682      	mov	sl, r0
  DHT_CHECK_STATE;
 80a08fa:	2b03      	cmp	r3, #3
 80a08fc:	d104      	bne.n	80a0908 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x18>
 80a08fe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0900:	f003 fd52 	bl	80a43a8 <__aeabi_i2d>
 80a0904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0908:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a090c:	2b02      	cmp	r3, #2
 80a090e:	f040 80ab 	bne.w	80a0a68 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x178>
 80a0912:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a0916:	b10b      	cbz	r3, 80a091c <_ZN14PietteTech_DHT15getDewPointSlowEv+0x2c>
 80a0918:	f7ff fea6 	bl	80a0668 <_ZN14PietteTech_DHT7convertEv>
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
 80a091c:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 80a0920:	f003 fd54 	bl	80a43cc <__aeabi_f2d>
 80a0924:	a352      	add	r3, pc, #328	; (adr r3, 80a0a70 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x180>)
 80a0926:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a092a:	f003 fbf1 	bl	80a4110 <__adddf3>
 80a092e:	4602      	mov	r2, r0
 80a0930:	460b      	mov	r3, r1
 80a0932:	a151      	add	r1, pc, #324	; (adr r1, 80a0a78 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x188>)
 80a0934:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0938:	f003 fec6 	bl	80a46c8 <__aeabi_ddiv>
  double SUM = (double)-7.90298 * (a0 - 1.0);
 80a093c:	2200      	movs	r2, #0
 80a093e:	4b64      	ldr	r3, [pc, #400]	; (80a0ad0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
  DHT_CHECK_STATE;
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
 80a0940:	4604      	mov	r4, r0
 80a0942:	460d      	mov	r5, r1
  double SUM = (double)-7.90298 * (a0 - 1.0);
 80a0944:	f003 fbe2 	bl	80a410c <__aeabi_dsub>
 80a0948:	a34d      	add	r3, pc, #308	; (adr r3, 80a0a80 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x190>)
 80a094a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a094e:	4606      	mov	r6, r0
 80a0950:	460f      	mov	r7, r1
 80a0952:	f003 fd8f 	bl	80a4474 <__aeabi_dmul>
 80a0956:	4680      	mov	r8, r0
 80a0958:	4689      	mov	r9, r1
  SUM += 5.02808 * log10(a0);
 80a095a:	4620      	mov	r0, r4
 80a095c:	4629      	mov	r1, r5
 80a095e:	f001 fff5 	bl	80a294c <log10>
 80a0962:	a349      	add	r3, pc, #292	; (adr r3, 80a0a88 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x198>)
 80a0964:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0968:	f003 fd84 	bl	80a4474 <__aeabi_dmul>
 80a096c:	4642      	mov	r2, r8
 80a096e:	464b      	mov	r3, r9
 80a0970:	f003 fbce 	bl	80a4110 <__adddf3>
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 80a0974:	4622      	mov	r2, r4
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
  DHT_CHECK_STATE;
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
  double SUM = (double)-7.90298 * (a0 - 1.0);
  SUM += 5.02808 * log10(a0);
 80a0976:	4680      	mov	r8, r0
 80a0978:	4689      	mov	r9, r1
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 80a097a:	462b      	mov	r3, r5
 80a097c:	2000      	movs	r0, #0
 80a097e:	4954      	ldr	r1, [pc, #336]	; (80a0ad0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80a0980:	f003 fea2 	bl	80a46c8 <__aeabi_ddiv>
 80a0984:	4602      	mov	r2, r0
 80a0986:	460b      	mov	r3, r1
 80a0988:	2000      	movs	r0, #0
 80a098a:	4951      	ldr	r1, [pc, #324]	; (80a0ad0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80a098c:	f003 fbbe 	bl	80a410c <__aeabi_dsub>
 80a0990:	a33f      	add	r3, pc, #252	; (adr r3, 80a0a90 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1a0>)
 80a0992:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0996:	f003 fd6d 	bl	80a4474 <__aeabi_dmul>
 80a099a:	4602      	mov	r2, r0
 80a099c:	460b      	mov	r3, r1
 80a099e:	2000      	movs	r0, #0
 80a09a0:	494c      	ldr	r1, [pc, #304]	; (80a0ad4 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 80a09a2:	f002 f855 	bl	80a2a50 <pow>
 80a09a6:	2200      	movs	r2, #0
 80a09a8:	4b49      	ldr	r3, [pc, #292]	; (80a0ad0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80a09aa:	f003 fbaf 	bl	80a410c <__aeabi_dsub>
 80a09ae:	a33a      	add	r3, pc, #232	; (adr r3, 80a0a98 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1a8>)
 80a09b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a09b4:	f003 fd5e 	bl	80a4474 <__aeabi_dmul>
 80a09b8:	4642      	mov	r2, r8
 80a09ba:	464b      	mov	r3, r9
 80a09bc:	f003 fba8 	bl	80a4110 <__adddf3>
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
 80a09c0:	a337      	add	r3, pc, #220	; (adr r3, 80a0aa0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1b0>)
 80a09c2:	e9d3 2300 	ldrd	r2, r3, [r3]
double PietteTech_DHT::getDewPointSlow() {
  DHT_CHECK_STATE;
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
  double SUM = (double)-7.90298 * (a0 - 1.0);
  SUM += 5.02808 * log10(a0);
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 80a09c6:	4604      	mov	r4, r0
 80a09c8:	460d      	mov	r5, r1
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
 80a09ca:	4630      	mov	r0, r6
 80a09cc:	4639      	mov	r1, r7
 80a09ce:	f003 fd51 	bl	80a4474 <__aeabi_dmul>
 80a09d2:	4602      	mov	r2, r0
 80a09d4:	460b      	mov	r3, r1
 80a09d6:	2000      	movs	r0, #0
 80a09d8:	493e      	ldr	r1, [pc, #248]	; (80a0ad4 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 80a09da:	f002 f839 	bl	80a2a50 <pow>
 80a09de:	2200      	movs	r2, #0
 80a09e0:	4b3b      	ldr	r3, [pc, #236]	; (80a0ad0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80a09e2:	f003 fb93 	bl	80a410c <__aeabi_dsub>
 80a09e6:	a330      	add	r3, pc, #192	; (adr r3, 80a0aa8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1b8>)
 80a09e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a09ec:	f003 fd42 	bl	80a4474 <__aeabi_dmul>
 80a09f0:	4622      	mov	r2, r4
 80a09f2:	462b      	mov	r3, r5
 80a09f4:	f003 fb8c 	bl	80a4110 <__adddf3>
  SUM += log10(1013.246);
  double VP = pow(10, SUM - 3) * (double)_hum;
 80a09f8:	a32d      	add	r3, pc, #180	; (adr r3, 80a0ab0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1c0>)
 80a09fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a09fe:	f003 fb87 	bl	80a4110 <__adddf3>
 80a0a02:	2200      	movs	r2, #0
 80a0a04:	4b34      	ldr	r3, [pc, #208]	; (80a0ad8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e8>)
 80a0a06:	f003 fb81 	bl	80a410c <__aeabi_dsub>
 80a0a0a:	4602      	mov	r2, r0
 80a0a0c:	460b      	mov	r3, r1
 80a0a0e:	2000      	movs	r0, #0
 80a0a10:	4930      	ldr	r1, [pc, #192]	; (80a0ad4 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 80a0a12:	f002 f81d 	bl	80a2a50 <pow>
 80a0a16:	4604      	mov	r4, r0
 80a0a18:	460d      	mov	r5, r1
  double T = log(VP / 0.61078); // temp var
 80a0a1a:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
 80a0a1e:	f003 fcd5 	bl	80a43cc <__aeabi_f2d>
 80a0a22:	4622      	mov	r2, r4
 80a0a24:	462b      	mov	r3, r5
 80a0a26:	f003 fd25 	bl	80a4474 <__aeabi_dmul>
 80a0a2a:	a323      	add	r3, pc, #140	; (adr r3, 80a0ab8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1c8>)
 80a0a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0a30:	f003 fe4a 	bl	80a46c8 <__aeabi_ddiv>
 80a0a34:	f001 ff0a 	bl	80a284c <log>
  return (241.88 * T) / (17.558 - T);
 80a0a38:	a321      	add	r3, pc, #132	; (adr r3, 80a0ac0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1d0>)
 80a0a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  SUM += 5.02808 * log10(a0);
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
  SUM += log10(1013.246);
  double VP = pow(10, SUM - 3) * (double)_hum;
  double T = log(VP / 0.61078); // temp var
 80a0a3e:	4606      	mov	r6, r0
 80a0a40:	460f      	mov	r7, r1
  return (241.88 * T) / (17.558 - T);
 80a0a42:	f003 fd17 	bl	80a4474 <__aeabi_dmul>
 80a0a46:	4632      	mov	r2, r6
 80a0a48:	4604      	mov	r4, r0
 80a0a4a:	460d      	mov	r5, r1
 80a0a4c:	a11e      	add	r1, pc, #120	; (adr r1, 80a0ac8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1d8>)
 80a0a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0a52:	463b      	mov	r3, r7
 80a0a54:	f003 fb5a 	bl	80a410c <__aeabi_dsub>
 80a0a58:	4602      	mov	r2, r0
 80a0a5a:	460b      	mov	r3, r1
 80a0a5c:	4620      	mov	r0, r4
 80a0a5e:	4629      	mov	r1, r5
 80a0a60:	f003 fe32 	bl	80a46c8 <__aeabi_ddiv>
 80a0a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
}

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
  DHT_CHECK_STATE;
 80a0a68:	2000      	movs	r0, #0
 80a0a6a:	491c      	ldr	r1, [pc, #112]	; (80a0adc <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1ec>)
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
  SUM += log10(1013.246);
  double VP = pow(10, SUM - 3) * (double)_hum;
  double T = log(VP / 0.61078); // temp var
  return (241.88 * T) / (17.558 - T);
}
 80a0a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0a70:	66666666 	.word	0x66666666
 80a0a74:	40711266 	.word	0x40711266
 80a0a78:	66666666 	.word	0x66666666
 80a0a7c:	40775266 	.word	0x40775266
 80a0a80:	ca03c4b1 	.word	0xca03c4b1
 80a0a84:	c01f9ca6 	.word	0xc01f9ca6
 80a0a88:	00e6afcd 	.word	0x00e6afcd
 80a0a8c:	40141cc1 	.word	0x40141cc1
 80a0a90:	c49ba5e3 	.word	0xc49ba5e3
 80a0a94:	4026b020 	.word	0x4026b020
 80a0a98:	36423db1 	.word	0x36423db1
 80a0a9c:	be828b24 	.word	0xbe828b24
 80a0aa0:	4f227d03 	.word	0x4f227d03
 80a0aa4:	c00bee92 	.word	0xc00bee92
 80a0aa8:	f0330363 	.word	0xf0330363
 80a0aac:	3f80a7ed 	.word	0x3f80a7ed
 80a0ab0:	409e541b 	.word	0x409e541b
 80a0ab4:	40080bb4 	.word	0x40080bb4
 80a0ab8:	7fa1a0cf 	.word	0x7fa1a0cf
 80a0abc:	3fe38b82 	.word	0x3fe38b82
 80a0ac0:	f5c28f5c 	.word	0xf5c28f5c
 80a0ac4:	406e3c28 	.word	0x406e3c28
 80a0ac8:	16872b02 	.word	0x16872b02
 80a0acc:	40318ed9 	.word	0x40318ed9
 80a0ad0:	3ff00000 	.word	0x3ff00000
 80a0ad4:	40240000 	.word	0x40240000
 80a0ad8:	40080000 	.word	0x40080000
 80a0adc:	c0140000 	.word	0xc0140000

080a0ae0 <_GLOBAL__sub_I__Z4wordhh>:
 80a0ae0:	f000 b8ec 	b.w	80a0cbc <HAL_Pin_Map>

080a0ae4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a0ae4:	b510      	push	{r4, lr}
 80a0ae6:	4604      	mov	r4, r0
 80a0ae8:	4b05      	ldr	r3, [pc, #20]	; (80a0b00 <_ZN3UDPD1Ev+0x1c>)
 80a0aea:	6003      	str	r3, [r0, #0]
 80a0aec:	3364      	adds	r3, #100	; 0x64
 80a0aee:	6103      	str	r3, [r0, #16]
 80a0af0:	f001 f900 	bl	80a1cf4 <_ZN3UDP4stopEv>
 80a0af4:	4620      	mov	r0, r4
 80a0af6:	f001 fa35 	bl	80a1f64 <_ZN3UDP13releaseBufferEv>
 80a0afa:	4620      	mov	r0, r4
 80a0afc:	bd10      	pop	{r4, pc}
 80a0afe:	bf00      	nop
 80a0b00:	080a5468 	.word	0x080a5468

080a0b04 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0b04:	b538      	push	{r3, r4, r5, lr}
 80a0b06:	4b0b      	ldr	r3, [pc, #44]	; (80a0b34 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0b08:	6984      	ldr	r4, [r0, #24]
 80a0b0a:	4605      	mov	r5, r0
 80a0b0c:	6003      	str	r3, [r0, #0]
 80a0b0e:	b17c      	cbz	r4, 80a0b30 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0b10:	6863      	ldr	r3, [r4, #4]
 80a0b12:	3b01      	subs	r3, #1
 80a0b14:	6063      	str	r3, [r4, #4]
 80a0b16:	b95b      	cbnz	r3, 80a0b30 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a0b18:	6823      	ldr	r3, [r4, #0]
 80a0b1a:	4620      	mov	r0, r4
 80a0b1c:	689b      	ldr	r3, [r3, #8]
 80a0b1e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0b20:	68a3      	ldr	r3, [r4, #8]
 80a0b22:	3b01      	subs	r3, #1
 80a0b24:	60a3      	str	r3, [r4, #8]
 80a0b26:	b91b      	cbnz	r3, 80a0b30 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a0b28:	6823      	ldr	r3, [r4, #0]
 80a0b2a:	4620      	mov	r0, r4
 80a0b2c:	68db      	ldr	r3, [r3, #12]
 80a0b2e:	4798      	blx	r3
 80a0b30:	4628      	mov	r0, r5
 80a0b32:	bd38      	pop	{r3, r4, r5, pc}
 80a0b34:	080a53d8 	.word	0x080a53d8

080a0b38 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0b38:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0b3a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0b3c:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0b3e:	b113      	cbz	r3, 80a0b46 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0b40:	2203      	movs	r2, #3
 80a0b42:	4601      	mov	r1, r0
 80a0b44:	4798      	blx	r3
    }
 80a0b46:	4620      	mov	r0, r4
 80a0b48:	bd10      	pop	{r4, pc}

080a0b4a <_ZN3UDPD0Ev>:
 80a0b4a:	b510      	push	{r4, lr}
 80a0b4c:	4604      	mov	r4, r0
 80a0b4e:	f7ff ffc9 	bl	80a0ae4 <_ZN3UDPD1Ev>
 80a0b52:	4620      	mov	r0, r4
 80a0b54:	f7ff faa5 	bl	80a00a2 <_ZdlPv>
 80a0b58:	4620      	mov	r0, r4
 80a0b5a:	bd10      	pop	{r4, pc}

080a0b5c <_ZN9TCPClientD0Ev>:
 80a0b5c:	b510      	push	{r4, lr}
 80a0b5e:	4604      	mov	r4, r0
 80a0b60:	f7ff ffd0 	bl	80a0b04 <_ZN9TCPClientD1Ev>
 80a0b64:	4620      	mov	r0, r4
 80a0b66:	f7ff fa9c 	bl	80a00a2 <_ZdlPv>
 80a0b6a:	4620      	mov	r0, r4
 80a0b6c:	bd10      	pop	{r4, pc}
	...

080a0b70 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}

UbiProtocol* builderParticle() {
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
  return particleInstance;
 80a0b70:	b570      	push	{r4, r5, r6, lr}
#ifndef _UbiHttp_H_
#define _UbiHttp_H_

#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
 80a0b72:	4d10      	ldr	r5, [pc, #64]	; (80a0bb4 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
 80a0b74:	f000 f8a2 	bl	80a0cbc <HAL_Pin_Map>
 80a0b78:	4c0f      	ldr	r4, [pc, #60]	; (80a0bb8 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
 80a0b7a:	4e10      	ldr	r6, [pc, #64]	; (80a0bbc <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
 80a0b7c:	4628      	mov	r0, r5
 80a0b7e:	f000 ffed 	bl	80a1b5c <_ZN9TCPClientC1Ev>
 80a0b82:	4628      	mov	r0, r5
#ifndef _UbiTcp_H_
#define _UbiTcp_H_

#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
 80a0b84:	4d0e      	ldr	r5, [pc, #56]	; (80a0bc0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
 80a0b86:	4622      	mov	r2, r4
 80a0b88:	4631      	mov	r1, r6
 80a0b8a:	f001 fd0f 	bl	80a25ac <__aeabi_atexit>
 80a0b8e:	4628      	mov	r0, r5
 80a0b90:	f000 ffe4 	bl	80a1b5c <_ZN9TCPClientC1Ev>
 80a0b94:	4628      	mov	r0, r5
#define _UbiUdp_H_

#include "Particle.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
 80a0b96:	4d0b      	ldr	r5, [pc, #44]	; (80a0bc4 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x54>)
 80a0b98:	4622      	mov	r2, r4
 80a0b9a:	4631      	mov	r1, r6
 80a0b9c:	f001 fd06 	bl	80a25ac <__aeabi_atexit>
 80a0ba0:	4628      	mov	r0, r5
 80a0ba2:	f001 f9c1 	bl	80a1f28 <_ZN3UDPC1Ev>
 80a0ba6:	4622      	mov	r2, r4
 80a0ba8:	4628      	mov	r0, r5
 80a0baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0bae:	4906      	ldr	r1, [pc, #24]	; (80a0bc8 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x58>)
 80a0bb0:	f001 bcfc 	b.w	80a25ac <__aeabi_atexit>
 80a0bb4:	200003f4 	.word	0x200003f4
 80a0bb8:	2000036c 	.word	0x2000036c
 80a0bbc:	080a0b05 	.word	0x080a0b05
 80a0bc0:	200003d8 	.word	0x200003d8
 80a0bc4:	20000410 	.word	0x20000410
 80a0bc8:	080a0ae5 	.word	0x080a0ae5

080a0bcc <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

 80a0bcc:	b510      	push	{r4, lr}
 80a0bce:	4c06      	ldr	r4, [pc, #24]	; (80a0be8 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
 80a0bd0:	f000 f874 	bl	80a0cbc <HAL_Pin_Map>
 80a0bd4:	4620      	mov	r0, r4
 80a0bd6:	f000 ffc1 	bl	80a1b5c <_ZN9TCPClientC1Ev>
 80a0bda:	4620      	mov	r0, r4
 80a0bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0be0:	4a02      	ldr	r2, [pc, #8]	; (80a0bec <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
 80a0be2:	4903      	ldr	r1, [pc, #12]	; (80a0bf0 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x24>)
 80a0be4:	f001 bce2 	b.w	80a25ac <__aeabi_atexit>
 80a0be8:	2000045c 	.word	0x2000045c
 80a0bec:	2000036c 	.word	0x2000036c
 80a0bf0:	080a0b05 	.word	0x080a0b05

080a0bf4 <_GLOBAL__sub_I__ZN7UbiMeshC2EPc>:

  if (meshMap.find(6) != meshMap.end()) {
    strcmp(meshMap[6], " ") != 0 ? dots->dotTimestampMillis = atoll(meshMap[6])
                                 : dots->dotTimestampMillis = NULL;
  }
 80a0bf4:	b508      	push	{r3, lr}
 80a0bf6:	f000 f861 	bl	80a0cbc <HAL_Pin_Map>
 80a0bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0bfe:	f000 b855 	b.w	80a0cac <HAL_Timer_Get_Milli_Seconds>

080a0c02 <_GLOBAL__sub_I__ZN11UbiParticleC2EPKciS1_S1_>:
 80a0c02:	f000 b85b 	b.w	80a0cbc <HAL_Pin_Map>
	...

080a0c08 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0c08:	4b02      	ldr	r3, [pc, #8]	; (80a0c14 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0xc>)
 80a0c0a:	2200      	movs	r2, #0
 80a0c0c:	701a      	strb	r2, [r3, #0]
 80a0c0e:	f000 b855 	b.w	80a0cbc <HAL_Pin_Map>
 80a0c12:	bf00      	nop
 80a0c14:	20000478 	.word	0x20000478

080a0c18 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
 80a0c18:	b510      	push	{r4, lr}
 80a0c1a:	4c06      	ldr	r4, [pc, #24]	; (80a0c34 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
 80a0c1c:	f000 f84e 	bl	80a0cbc <HAL_Pin_Map>
 80a0c20:	4620      	mov	r0, r4
 80a0c22:	f000 ff9b 	bl	80a1b5c <_ZN9TCPClientC1Ev>
 80a0c26:	4620      	mov	r0, r4
 80a0c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0c2c:	4a02      	ldr	r2, [pc, #8]	; (80a0c38 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
 80a0c2e:	4903      	ldr	r1, [pc, #12]	; (80a0c3c <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x24>)
 80a0c30:	f001 bcbc 	b.w	80a25ac <__aeabi_atexit>
 80a0c34:	2000047c 	.word	0x2000047c
 80a0c38:	2000036c 	.word	0x2000036c
 80a0c3c:	080a0b05 	.word	0x080a0b05

080a0c40 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
 80a0c40:	b510      	push	{r4, lr}
 80a0c42:	4c06      	ldr	r4, [pc, #24]	; (80a0c5c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
 80a0c44:	f000 f83a 	bl	80a0cbc <HAL_Pin_Map>
 80a0c48:	4620      	mov	r0, r4
 80a0c4a:	f001 f96d 	bl	80a1f28 <_ZN3UDPC1Ev>
 80a0c4e:	4620      	mov	r0, r4
 80a0c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0c54:	4a02      	ldr	r2, [pc, #8]	; (80a0c60 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
 80a0c56:	4903      	ldr	r1, [pc, #12]	; (80a0c64 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x24>)
 80a0c58:	f001 bca8 	b.w	80a25ac <__aeabi_atexit>
 80a0c5c:	20000498 	.word	0x20000498
 80a0c60:	2000036c 	.word	0x2000036c
 80a0c64:	080a0ae5 	.word	0x080a0ae5

080a0c68 <_GLOBAL__sub_I__ZN7UbidotsC2EPc11IotProtocol>:
 80a0c68:	f000 b828 	b.w	80a0cbc <HAL_Pin_Map>

080a0c6c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0c6c:	b508      	push	{r3, lr}
 80a0c6e:	4b02      	ldr	r3, [pc, #8]	; (80a0c78 <os_mutex_create+0xc>)
 80a0c70:	681b      	ldr	r3, [r3, #0]
 80a0c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c74:	9301      	str	r3, [sp, #4]
 80a0c76:	bd08      	pop	{r3, pc}
 80a0c78:	080601d0 	.word	0x080601d0

080a0c7c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0c7c:	b508      	push	{r3, lr}
 80a0c7e:	4b02      	ldr	r3, [pc, #8]	; (80a0c88 <HAL_RNG_GetRandomNumber+0xc>)
 80a0c80:	681b      	ldr	r3, [r3, #0]
 80a0c82:	685b      	ldr	r3, [r3, #4]
 80a0c84:	9301      	str	r3, [sp, #4]
 80a0c86:	bd08      	pop	{r3, pc}
 80a0c88:	0806019c 	.word	0x0806019c

080a0c8c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0c8c:	b508      	push	{r3, lr}
 80a0c8e:	4b02      	ldr	r3, [pc, #8]	; (80a0c98 <HAL_Delay_Microseconds+0xc>)
 80a0c90:	681b      	ldr	r3, [r3, #0]
 80a0c92:	68db      	ldr	r3, [r3, #12]
 80a0c94:	9301      	str	r3, [sp, #4]
 80a0c96:	bd08      	pop	{r3, pc}
 80a0c98:	0806019c 	.word	0x0806019c

080a0c9c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a0c9c:	b508      	push	{r3, lr}
 80a0c9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ca8 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a0ca0:	681b      	ldr	r3, [r3, #0]
 80a0ca2:	691b      	ldr	r3, [r3, #16]
 80a0ca4:	9301      	str	r3, [sp, #4]
 80a0ca6:	bd08      	pop	{r3, pc}
 80a0ca8:	0806019c 	.word	0x0806019c

080a0cac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0cac:	b508      	push	{r3, lr}
 80a0cae:	4b02      	ldr	r3, [pc, #8]	; (80a0cb8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0cb0:	681b      	ldr	r3, [r3, #0]
 80a0cb2:	695b      	ldr	r3, [r3, #20]
 80a0cb4:	9301      	str	r3, [sp, #4]
 80a0cb6:	bd08      	pop	{r3, pc}
 80a0cb8:	0806019c 	.word	0x0806019c

080a0cbc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a0cbc:	b508      	push	{r3, lr}
 80a0cbe:	4b02      	ldr	r3, [pc, #8]	; (80a0cc8 <HAL_Pin_Map+0xc>)
 80a0cc0:	681b      	ldr	r3, [r3, #0]
 80a0cc2:	681b      	ldr	r3, [r3, #0]
 80a0cc4:	9301      	str	r3, [sp, #4]
 80a0cc6:	bd08      	pop	{r3, pc}
 80a0cc8:	080601b0 	.word	0x080601b0

080a0ccc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0ccc:	b508      	push	{r3, lr}
 80a0cce:	4b02      	ldr	r3, [pc, #8]	; (80a0cd8 <HAL_Pin_Mode+0xc>)
 80a0cd0:	681b      	ldr	r3, [r3, #0]
 80a0cd2:	689b      	ldr	r3, [r3, #8]
 80a0cd4:	9301      	str	r3, [sp, #4]
 80a0cd6:	bd08      	pop	{r3, pc}
 80a0cd8:	080601b0 	.word	0x080601b0

080a0cdc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0cdc:	b508      	push	{r3, lr}
 80a0cde:	4b02      	ldr	r3, [pc, #8]	; (80a0ce8 <HAL_Get_Pin_Mode+0xc>)
 80a0ce0:	681b      	ldr	r3, [r3, #0]
 80a0ce2:	68db      	ldr	r3, [r3, #12]
 80a0ce4:	9301      	str	r3, [sp, #4]
 80a0ce6:	bd08      	pop	{r3, pc}
 80a0ce8:	080601b0 	.word	0x080601b0

080a0cec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0cec:	b508      	push	{r3, lr}
 80a0cee:	4b02      	ldr	r3, [pc, #8]	; (80a0cf8 <HAL_GPIO_Write+0xc>)
 80a0cf0:	681b      	ldr	r3, [r3, #0]
 80a0cf2:	691b      	ldr	r3, [r3, #16]
 80a0cf4:	9301      	str	r3, [sp, #4]
 80a0cf6:	bd08      	pop	{r3, pc}
 80a0cf8:	080601b0 	.word	0x080601b0

080a0cfc <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a0cfc:	b508      	push	{r3, lr}
 80a0cfe:	4b02      	ldr	r3, [pc, #8]	; (80a0d08 <HAL_Interrupts_Attach+0xc>)
 80a0d00:	681b      	ldr	r3, [r3, #0]
 80a0d02:	699b      	ldr	r3, [r3, #24]
 80a0d04:	9301      	str	r3, [sp, #4]
 80a0d06:	bd08      	pop	{r3, pc}
 80a0d08:	080601b0 	.word	0x080601b0

080a0d0c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a0d0c:	b508      	push	{r3, lr}
 80a0d0e:	4b02      	ldr	r3, [pc, #8]	; (80a0d18 <HAL_Interrupts_Detach+0xc>)
 80a0d10:	681b      	ldr	r3, [r3, #0]
 80a0d12:	69db      	ldr	r3, [r3, #28]
 80a0d14:	9301      	str	r3, [sp, #4]
 80a0d16:	bd08      	pop	{r3, pc}
 80a0d18:	080601b0 	.word	0x080601b0

080a0d1c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0d1c:	b508      	push	{r3, lr}
 80a0d1e:	4b02      	ldr	r3, [pc, #8]	; (80a0d28 <HAL_I2C_Write_Data+0xc>)
 80a0d20:	681b      	ldr	r3, [r3, #0]
 80a0d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0d24:	9301      	str	r3, [sp, #4]
 80a0d26:	bd08      	pop	{r3, pc}
 80a0d28:	080601ac 	.word	0x080601ac

080a0d2c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0d2c:	b508      	push	{r3, lr}
 80a0d2e:	4b02      	ldr	r3, [pc, #8]	; (80a0d38 <HAL_I2C_Available_Data+0xc>)
 80a0d30:	681b      	ldr	r3, [r3, #0]
 80a0d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0d34:	9301      	str	r3, [sp, #4]
 80a0d36:	bd08      	pop	{r3, pc}
 80a0d38:	080601ac 	.word	0x080601ac

080a0d3c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0d3c:	b508      	push	{r3, lr}
 80a0d3e:	4b02      	ldr	r3, [pc, #8]	; (80a0d48 <HAL_I2C_Read_Data+0xc>)
 80a0d40:	681b      	ldr	r3, [r3, #0]
 80a0d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0d44:	9301      	str	r3, [sp, #4]
 80a0d46:	bd08      	pop	{r3, pc}
 80a0d48:	080601ac 	.word	0x080601ac

080a0d4c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0d4c:	b508      	push	{r3, lr}
 80a0d4e:	4b02      	ldr	r3, [pc, #8]	; (80a0d58 <HAL_I2C_Peek_Data+0xc>)
 80a0d50:	681b      	ldr	r3, [r3, #0]
 80a0d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0d54:	9301      	str	r3, [sp, #4]
 80a0d56:	bd08      	pop	{r3, pc}
 80a0d58:	080601ac 	.word	0x080601ac

080a0d5c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0d5c:	b508      	push	{r3, lr}
 80a0d5e:	4b02      	ldr	r3, [pc, #8]	; (80a0d68 <HAL_I2C_Flush_Data+0xc>)
 80a0d60:	681b      	ldr	r3, [r3, #0]
 80a0d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0d64:	9301      	str	r3, [sp, #4]
 80a0d66:	bd08      	pop	{r3, pc}
 80a0d68:	080601ac 	.word	0x080601ac

080a0d6c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0d6c:	b508      	push	{r3, lr}
 80a0d6e:	4b02      	ldr	r3, [pc, #8]	; (80a0d78 <HAL_I2C_Is_Enabled+0xc>)
 80a0d70:	681b      	ldr	r3, [r3, #0]
 80a0d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0d74:	9301      	str	r3, [sp, #4]
 80a0d76:	bd08      	pop	{r3, pc}
 80a0d78:	080601ac 	.word	0x080601ac

080a0d7c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0d7c:	b508      	push	{r3, lr}
 80a0d7e:	4b03      	ldr	r3, [pc, #12]	; (80a0d8c <HAL_I2C_Init+0x10>)
 80a0d80:	681b      	ldr	r3, [r3, #0]
 80a0d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0d86:	9301      	str	r3, [sp, #4]
 80a0d88:	bd08      	pop	{r3, pc}
 80a0d8a:	0000      	.short	0x0000
 80a0d8c:	080601ac 	.word	0x080601ac

080a0d90 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a0d90:	b508      	push	{r3, lr}
 80a0d92:	4b02      	ldr	r3, [pc, #8]	; (80a0d9c <socket_active_status+0xc>)
 80a0d94:	681b      	ldr	r3, [r3, #0]
 80a0d96:	681b      	ldr	r3, [r3, #0]
 80a0d98:	9301      	str	r3, [sp, #4]
 80a0d9a:	bd08      	pop	{r3, pc}
 80a0d9c:	080601bc 	.word	0x080601bc

080a0da0 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0da0:	b508      	push	{r3, lr}
 80a0da2:	4b02      	ldr	r3, [pc, #8]	; (80a0dac <socket_handle_valid+0xc>)
 80a0da4:	681b      	ldr	r3, [r3, #0]
 80a0da6:	685b      	ldr	r3, [r3, #4]
 80a0da8:	9301      	str	r3, [sp, #4]
 80a0daa:	bd08      	pop	{r3, pc}
 80a0dac:	080601bc 	.word	0x080601bc

080a0db0 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0db0:	b508      	push	{r3, lr}
 80a0db2:	4b02      	ldr	r3, [pc, #8]	; (80a0dbc <socket_create+0xc>)
 80a0db4:	681b      	ldr	r3, [r3, #0]
 80a0db6:	689b      	ldr	r3, [r3, #8]
 80a0db8:	9301      	str	r3, [sp, #4]
 80a0dba:	bd08      	pop	{r3, pc}
 80a0dbc:	080601bc 	.word	0x080601bc

080a0dc0 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a0dc0:	b508      	push	{r3, lr}
 80a0dc2:	4b02      	ldr	r3, [pc, #8]	; (80a0dcc <socket_connect+0xc>)
 80a0dc4:	681b      	ldr	r3, [r3, #0]
 80a0dc6:	68db      	ldr	r3, [r3, #12]
 80a0dc8:	9301      	str	r3, [sp, #4]
 80a0dca:	bd08      	pop	{r3, pc}
 80a0dcc:	080601bc 	.word	0x080601bc

080a0dd0 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a0dd0:	b508      	push	{r3, lr}
 80a0dd2:	4b02      	ldr	r3, [pc, #8]	; (80a0ddc <socket_receive+0xc>)
 80a0dd4:	681b      	ldr	r3, [r3, #0]
 80a0dd6:	691b      	ldr	r3, [r3, #16]
 80a0dd8:	9301      	str	r3, [sp, #4]
 80a0dda:	bd08      	pop	{r3, pc}
 80a0ddc:	080601bc 	.word	0x080601bc

080a0de0 <socket_receivefrom>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a0de0:	b508      	push	{r3, lr}
 80a0de2:	4b02      	ldr	r3, [pc, #8]	; (80a0dec <socket_receivefrom+0xc>)
 80a0de4:	681b      	ldr	r3, [r3, #0]
 80a0de6:	695b      	ldr	r3, [r3, #20]
 80a0de8:	9301      	str	r3, [sp, #4]
 80a0dea:	bd08      	pop	{r3, pc}
 80a0dec:	080601bc 	.word	0x080601bc

080a0df0 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a0df0:	b508      	push	{r3, lr}
 80a0df2:	4b02      	ldr	r3, [pc, #8]	; (80a0dfc <socket_sendto+0xc>)
 80a0df4:	681b      	ldr	r3, [r3, #0]
 80a0df6:	69db      	ldr	r3, [r3, #28]
 80a0df8:	9301      	str	r3, [sp, #4]
 80a0dfa:	bd08      	pop	{r3, pc}
 80a0dfc:	080601bc 	.word	0x080601bc

080a0e00 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0e00:	b508      	push	{r3, lr}
 80a0e02:	4b02      	ldr	r3, [pc, #8]	; (80a0e0c <socket_close+0xc>)
 80a0e04:	681b      	ldr	r3, [r3, #0]
 80a0e06:	6a1b      	ldr	r3, [r3, #32]
 80a0e08:	9301      	str	r3, [sp, #4]
 80a0e0a:	bd08      	pop	{r3, pc}
 80a0e0c:	080601bc 	.word	0x080601bc

080a0e10 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0e10:	b508      	push	{r3, lr}
 80a0e12:	4b02      	ldr	r3, [pc, #8]	; (80a0e1c <socket_handle_invalid+0xc>)
 80a0e14:	681b      	ldr	r3, [r3, #0]
 80a0e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e18:	9301      	str	r3, [sp, #4]
 80a0e1a:	bd08      	pop	{r3, pc}
 80a0e1c:	080601bc 	.word	0x080601bc

080a0e20 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a0e20:	b508      	push	{r3, lr}
 80a0e22:	4b02      	ldr	r3, [pc, #8]	; (80a0e2c <socket_send_ex+0xc>)
 80a0e24:	681b      	ldr	r3, [r3, #0]
 80a0e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0e28:	9301      	str	r3, [sp, #4]
 80a0e2a:	bd08      	pop	{r3, pc}
 80a0e2c:	080601bc 	.word	0x080601bc

080a0e30 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0e30:	b508      	push	{r3, lr}
 80a0e32:	4b02      	ldr	r3, [pc, #8]	; (80a0e3c <HAL_SPI_Init+0xc>)
 80a0e34:	681b      	ldr	r3, [r3, #0]
 80a0e36:	69db      	ldr	r3, [r3, #28]
 80a0e38:	9301      	str	r3, [sp, #4]
 80a0e3a:	bd08      	pop	{r3, pc}
 80a0e3c:	080601b4 	.word	0x080601b4

080a0e40 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0e40:	b508      	push	{r3, lr}
 80a0e42:	4b02      	ldr	r3, [pc, #8]	; (80a0e4c <HAL_SPI_Is_Enabled+0xc>)
 80a0e44:	681b      	ldr	r3, [r3, #0]
 80a0e46:	6a1b      	ldr	r3, [r3, #32]
 80a0e48:	9301      	str	r3, [sp, #4]
 80a0e4a:	bd08      	pop	{r3, pc}
 80a0e4c:	080601b4 	.word	0x080601b4

080a0e50 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0e50:	b508      	push	{r3, lr}
 80a0e52:	4b02      	ldr	r3, [pc, #8]	; (80a0e5c <HAL_USART_Init+0xc>)
 80a0e54:	681b      	ldr	r3, [r3, #0]
 80a0e56:	699b      	ldr	r3, [r3, #24]
 80a0e58:	9301      	str	r3, [sp, #4]
 80a0e5a:	bd08      	pop	{r3, pc}
 80a0e5c:	080601c4 	.word	0x080601c4

080a0e60 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0e60:	b508      	push	{r3, lr}
 80a0e62:	4b02      	ldr	r3, [pc, #8]	; (80a0e6c <HAL_USART_Write_Data+0xc>)
 80a0e64:	681b      	ldr	r3, [r3, #0]
 80a0e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0e68:	9301      	str	r3, [sp, #4]
 80a0e6a:	bd08      	pop	{r3, pc}
 80a0e6c:	080601c4 	.word	0x080601c4

080a0e70 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0e70:	b508      	push	{r3, lr}
 80a0e72:	4b02      	ldr	r3, [pc, #8]	; (80a0e7c <HAL_USART_Available_Data+0xc>)
 80a0e74:	681b      	ldr	r3, [r3, #0]
 80a0e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0e78:	9301      	str	r3, [sp, #4]
 80a0e7a:	bd08      	pop	{r3, pc}
 80a0e7c:	080601c4 	.word	0x080601c4

080a0e80 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0e80:	b508      	push	{r3, lr}
 80a0e82:	4b02      	ldr	r3, [pc, #8]	; (80a0e8c <HAL_USART_Read_Data+0xc>)
 80a0e84:	681b      	ldr	r3, [r3, #0]
 80a0e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0e88:	9301      	str	r3, [sp, #4]
 80a0e8a:	bd08      	pop	{r3, pc}
 80a0e8c:	080601c4 	.word	0x080601c4

080a0e90 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0e90:	b508      	push	{r3, lr}
 80a0e92:	4b02      	ldr	r3, [pc, #8]	; (80a0e9c <HAL_USART_Peek_Data+0xc>)
 80a0e94:	681b      	ldr	r3, [r3, #0]
 80a0e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e98:	9301      	str	r3, [sp, #4]
 80a0e9a:	bd08      	pop	{r3, pc}
 80a0e9c:	080601c4 	.word	0x080601c4

080a0ea0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0ea0:	b508      	push	{r3, lr}
 80a0ea2:	4b02      	ldr	r3, [pc, #8]	; (80a0eac <HAL_USART_Flush_Data+0xc>)
 80a0ea4:	681b      	ldr	r3, [r3, #0]
 80a0ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0ea8:	9301      	str	r3, [sp, #4]
 80a0eaa:	bd08      	pop	{r3, pc}
 80a0eac:	080601c4 	.word	0x080601c4

080a0eb0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0eb0:	b508      	push	{r3, lr}
 80a0eb2:	4b02      	ldr	r3, [pc, #8]	; (80a0ebc <HAL_USART_Is_Enabled+0xc>)
 80a0eb4:	681b      	ldr	r3, [r3, #0]
 80a0eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0eb8:	9301      	str	r3, [sp, #4]
 80a0eba:	bd08      	pop	{r3, pc}
 80a0ebc:	080601c4 	.word	0x080601c4

080a0ec0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0ec0:	b508      	push	{r3, lr}
 80a0ec2:	4b02      	ldr	r3, [pc, #8]	; (80a0ecc <HAL_USART_Available_Data_For_Write+0xc>)
 80a0ec4:	681b      	ldr	r3, [r3, #0]
 80a0ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0ec8:	9301      	str	r3, [sp, #4]
 80a0eca:	bd08      	pop	{r3, pc}
 80a0ecc:	080601c4 	.word	0x080601c4

080a0ed0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0ed0:	b508      	push	{r3, lr}
 80a0ed2:	4b02      	ldr	r3, [pc, #8]	; (80a0edc <HAL_USB_USART_Init+0xc>)
 80a0ed4:	681b      	ldr	r3, [r3, #0]
 80a0ed6:	681b      	ldr	r3, [r3, #0]
 80a0ed8:	9301      	str	r3, [sp, #4]
 80a0eda:	bd08      	pop	{r3, pc}
 80a0edc:	080601d8 	.word	0x080601d8

080a0ee0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0ee0:	b508      	push	{r3, lr}
 80a0ee2:	4b02      	ldr	r3, [pc, #8]	; (80a0eec <HAL_USB_USART_Begin+0xc>)
 80a0ee4:	681b      	ldr	r3, [r3, #0]
 80a0ee6:	685b      	ldr	r3, [r3, #4]
 80a0ee8:	9301      	str	r3, [sp, #4]
 80a0eea:	bd08      	pop	{r3, pc}
 80a0eec:	080601d8 	.word	0x080601d8

080a0ef0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0ef0:	b508      	push	{r3, lr}
 80a0ef2:	4b02      	ldr	r3, [pc, #8]	; (80a0efc <HAL_USB_USART_Available_Data+0xc>)
 80a0ef4:	681b      	ldr	r3, [r3, #0]
 80a0ef6:	691b      	ldr	r3, [r3, #16]
 80a0ef8:	9301      	str	r3, [sp, #4]
 80a0efa:	bd08      	pop	{r3, pc}
 80a0efc:	080601d8 	.word	0x080601d8

080a0f00 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0f00:	b508      	push	{r3, lr}
 80a0f02:	4b02      	ldr	r3, [pc, #8]	; (80a0f0c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0f04:	681b      	ldr	r3, [r3, #0]
 80a0f06:	695b      	ldr	r3, [r3, #20]
 80a0f08:	9301      	str	r3, [sp, #4]
 80a0f0a:	bd08      	pop	{r3, pc}
 80a0f0c:	080601d8 	.word	0x080601d8

080a0f10 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0f10:	b508      	push	{r3, lr}
 80a0f12:	4b02      	ldr	r3, [pc, #8]	; (80a0f1c <HAL_USB_USART_Receive_Data+0xc>)
 80a0f14:	681b      	ldr	r3, [r3, #0]
 80a0f16:	699b      	ldr	r3, [r3, #24]
 80a0f18:	9301      	str	r3, [sp, #4]
 80a0f1a:	bd08      	pop	{r3, pc}
 80a0f1c:	080601d8 	.word	0x080601d8

080a0f20 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0f20:	b508      	push	{r3, lr}
 80a0f22:	4b02      	ldr	r3, [pc, #8]	; (80a0f2c <HAL_USB_USART_Send_Data+0xc>)
 80a0f24:	681b      	ldr	r3, [r3, #0]
 80a0f26:	69db      	ldr	r3, [r3, #28]
 80a0f28:	9301      	str	r3, [sp, #4]
 80a0f2a:	bd08      	pop	{r3, pc}
 80a0f2c:	080601d8 	.word	0x080601d8

080a0f30 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0f30:	b508      	push	{r3, lr}
 80a0f32:	4b02      	ldr	r3, [pc, #8]	; (80a0f3c <HAL_USB_USART_Flush_Data+0xc>)
 80a0f34:	681b      	ldr	r3, [r3, #0]
 80a0f36:	6a1b      	ldr	r3, [r3, #32]
 80a0f38:	9301      	str	r3, [sp, #4]
 80a0f3a:	bd08      	pop	{r3, pc}
 80a0f3c:	080601d8 	.word	0x080601d8

080a0f40 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a0f40:	b508      	push	{r3, lr}
 80a0f42:	4b02      	ldr	r3, [pc, #8]	; (80a0f4c <HAL_NET_SetNetWatchDog+0xc>)
 80a0f44:	681b      	ldr	r3, [r3, #0]
 80a0f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0f48:	9301      	str	r3, [sp, #4]
 80a0f4a:	bd08      	pop	{r3, pc}
 80a0f4c:	080601c0 	.word	0x080601c0

080a0f50 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0f50:	b508      	push	{r3, lr}
 80a0f52:	4b02      	ldr	r3, [pc, #8]	; (80a0f5c <inet_gethostbyname+0xc>)
 80a0f54:	681b      	ldr	r3, [r3, #0]
 80a0f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0f58:	9301      	str	r3, [sp, #4]
 80a0f5a:	bd08      	pop	{r3, pc}
 80a0f5c:	080601c0 	.word	0x080601c0

080a0f60 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a0f60:	b508      	push	{r3, lr}
 80a0f62:	4b02      	ldr	r3, [pc, #8]	; (80a0f6c <log_message+0xc>)
 80a0f64:	681b      	ldr	r3, [r3, #0]
 80a0f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a0f68:	9301      	str	r3, [sp, #4]
 80a0f6a:	bd08      	pop	{r3, pc}
 80a0f6c:	080201a8 	.word	0x080201a8

080a0f70 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0f70:	b508      	push	{r3, lr}
 80a0f72:	4b02      	ldr	r3, [pc, #8]	; (80a0f7c <set_system_mode+0xc>)
 80a0f74:	681b      	ldr	r3, [r3, #0]
 80a0f76:	685b      	ldr	r3, [r3, #4]
 80a0f78:	9301      	str	r3, [sp, #4]
 80a0f7a:	bd08      	pop	{r3, pc}
 80a0f7c:	080601a4 	.word	0x080601a4

080a0f80 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0f80:	b508      	push	{r3, lr}
 80a0f82:	4b02      	ldr	r3, [pc, #8]	; (80a0f8c <system_delay_ms+0xc>)
 80a0f84:	681b      	ldr	r3, [r3, #0]
 80a0f86:	695b      	ldr	r3, [r3, #20]
 80a0f88:	9301      	str	r3, [sp, #4]
 80a0f8a:	bd08      	pop	{r3, pc}
 80a0f8c:	080601a4 	.word	0x080601a4

080a0f90 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0f90:	b508      	push	{r3, lr}
 80a0f92:	4b03      	ldr	r3, [pc, #12]	; (80a0fa0 <system_ctrl_set_app_request_handler+0x10>)
 80a0f94:	681b      	ldr	r3, [r3, #0]
 80a0f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0f9a:	9301      	str	r3, [sp, #4]
 80a0f9c:	bd08      	pop	{r3, pc}
 80a0f9e:	0000      	.short	0x0000
 80a0fa0:	080601a4 	.word	0x080601a4

080a0fa4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0fa4:	b508      	push	{r3, lr}
 80a0fa6:	4b03      	ldr	r3, [pc, #12]	; (80a0fb4 <system_ctrl_set_result+0x10>)
 80a0fa8:	681b      	ldr	r3, [r3, #0]
 80a0faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0fae:	9301      	str	r3, [sp, #4]
 80a0fb0:	bd08      	pop	{r3, pc}
 80a0fb2:	0000      	.short	0x0000
 80a0fb4:	080601a4 	.word	0x080601a4

080a0fb8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0fb8:	b508      	push	{r3, lr}
 80a0fba:	4b02      	ldr	r3, [pc, #8]	; (80a0fc4 <spark_process+0xc>)
 80a0fbc:	681b      	ldr	r3, [r3, #0]
 80a0fbe:	689b      	ldr	r3, [r3, #8]
 80a0fc0:	9301      	str	r3, [sp, #4]
 80a0fc2:	bd08      	pop	{r3, pc}
 80a0fc4:	080601cc 	.word	0x080601cc

080a0fc8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0fc8:	b508      	push	{r3, lr}
 80a0fca:	4b02      	ldr	r3, [pc, #8]	; (80a0fd4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0fcc:	681b      	ldr	r3, [r3, #0]
 80a0fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0fd0:	9301      	str	r3, [sp, #4]
 80a0fd2:	bd08      	pop	{r3, pc}
 80a0fd4:	080601cc 	.word	0x080601cc

080a0fd8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0fd8:	b508      	push	{r3, lr}
 80a0fda:	4b02      	ldr	r3, [pc, #8]	; (80a0fe4 <network_connect+0xc>)
 80a0fdc:	681b      	ldr	r3, [r3, #0]
 80a0fde:	685b      	ldr	r3, [r3, #4]
 80a0fe0:	9301      	str	r3, [sp, #4]
 80a0fe2:	bd08      	pop	{r3, pc}
 80a0fe4:	080601c8 	.word	0x080601c8

080a0fe8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0fe8:	b508      	push	{r3, lr}
 80a0fea:	4b02      	ldr	r3, [pc, #8]	; (80a0ff4 <network_connecting+0xc>)
 80a0fec:	681b      	ldr	r3, [r3, #0]
 80a0fee:	689b      	ldr	r3, [r3, #8]
 80a0ff0:	9301      	str	r3, [sp, #4]
 80a0ff2:	bd08      	pop	{r3, pc}
 80a0ff4:	080601c8 	.word	0x080601c8

080a0ff8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0ff8:	b508      	push	{r3, lr}
 80a0ffa:	4b02      	ldr	r3, [pc, #8]	; (80a1004 <network_disconnect+0xc>)
 80a0ffc:	681b      	ldr	r3, [r3, #0]
 80a0ffe:	68db      	ldr	r3, [r3, #12]
 80a1000:	9301      	str	r3, [sp, #4]
 80a1002:	bd08      	pop	{r3, pc}
 80a1004:	080601c8 	.word	0x080601c8

080a1008 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1008:	b508      	push	{r3, lr}
 80a100a:	4b02      	ldr	r3, [pc, #8]	; (80a1014 <network_ready+0xc>)
 80a100c:	681b      	ldr	r3, [r3, #0]
 80a100e:	691b      	ldr	r3, [r3, #16]
 80a1010:	9301      	str	r3, [sp, #4]
 80a1012:	bd08      	pop	{r3, pc}
 80a1014:	080601c8 	.word	0x080601c8

080a1018 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1018:	b508      	push	{r3, lr}
 80a101a:	4b02      	ldr	r3, [pc, #8]	; (80a1024 <network_on+0xc>)
 80a101c:	681b      	ldr	r3, [r3, #0]
 80a101e:	695b      	ldr	r3, [r3, #20]
 80a1020:	9301      	str	r3, [sp, #4]
 80a1022:	bd08      	pop	{r3, pc}
 80a1024:	080601c8 	.word	0x080601c8

080a1028 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1028:	b508      	push	{r3, lr}
 80a102a:	4b02      	ldr	r3, [pc, #8]	; (80a1034 <network_off+0xc>)
 80a102c:	681b      	ldr	r3, [r3, #0]
 80a102e:	699b      	ldr	r3, [r3, #24]
 80a1030:	9301      	str	r3, [sp, #4]
 80a1032:	bd08      	pop	{r3, pc}
 80a1034:	080601c8 	.word	0x080601c8

080a1038 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1038:	b508      	push	{r3, lr}
 80a103a:	4b02      	ldr	r3, [pc, #8]	; (80a1044 <network_listen+0xc>)
 80a103c:	681b      	ldr	r3, [r3, #0]
 80a103e:	69db      	ldr	r3, [r3, #28]
 80a1040:	9301      	str	r3, [sp, #4]
 80a1042:	bd08      	pop	{r3, pc}
 80a1044:	080601c8 	.word	0x080601c8

080a1048 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1048:	b508      	push	{r3, lr}
 80a104a:	4b02      	ldr	r3, [pc, #8]	; (80a1054 <network_listening+0xc>)
 80a104c:	681b      	ldr	r3, [r3, #0]
 80a104e:	6a1b      	ldr	r3, [r3, #32]
 80a1050:	9301      	str	r3, [sp, #4]
 80a1052:	bd08      	pop	{r3, pc}
 80a1054:	080601c8 	.word	0x080601c8

080a1058 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1058:	b508      	push	{r3, lr}
 80a105a:	4b02      	ldr	r3, [pc, #8]	; (80a1064 <network_set_listen_timeout+0xc>)
 80a105c:	681b      	ldr	r3, [r3, #0]
 80a105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1060:	9301      	str	r3, [sp, #4]
 80a1062:	bd08      	pop	{r3, pc}
 80a1064:	080601c8 	.word	0x080601c8

080a1068 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1068:	b508      	push	{r3, lr}
 80a106a:	4b02      	ldr	r3, [pc, #8]	; (80a1074 <network_get_listen_timeout+0xc>)
 80a106c:	681b      	ldr	r3, [r3, #0]
 80a106e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1070:	9301      	str	r3, [sp, #4]
 80a1072:	bd08      	pop	{r3, pc}
 80a1074:	080601c8 	.word	0x080601c8

080a1078 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1078:	b508      	push	{r3, lr}
 80a107a:	4b02      	ldr	r3, [pc, #8]	; (80a1084 <malloc+0xc>)
 80a107c:	681b      	ldr	r3, [r3, #0]
 80a107e:	681b      	ldr	r3, [r3, #0]
 80a1080:	9301      	str	r3, [sp, #4]
 80a1082:	bd08      	pop	{r3, pc}
 80a1084:	080601a0 	.word	0x080601a0

080a1088 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1088:	b508      	push	{r3, lr}
 80a108a:	4b02      	ldr	r3, [pc, #8]	; (80a1094 <free+0xc>)
 80a108c:	681b      	ldr	r3, [r3, #0]
 80a108e:	685b      	ldr	r3, [r3, #4]
 80a1090:	9301      	str	r3, [sp, #4]
 80a1092:	bd08      	pop	{r3, pc}
 80a1094:	080601a0 	.word	0x080601a0

080a1098 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1098:	b508      	push	{r3, lr}
 80a109a:	4b02      	ldr	r3, [pc, #8]	; (80a10a4 <abort+0xc>)
 80a109c:	681b      	ldr	r3, [r3, #0]
 80a109e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a10a0:	9301      	str	r3, [sp, #4]
 80a10a2:	bd08      	pop	{r3, pc}
 80a10a4:	080601a0 	.word	0x080601a0

080a10a8 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a10a8:	b508      	push	{r3, lr}
 80a10aa:	4b02      	ldr	r3, [pc, #8]	; (80a10b4 <__errno+0xc>)
 80a10ac:	681b      	ldr	r3, [r3, #0]
 80a10ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a10b0:	9301      	str	r3, [sp, #4]
 80a10b2:	bd08      	pop	{r3, pc}
 80a10b4:	080601a0 	.word	0x080601a0

080a10b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a10b8:	2100      	movs	r1, #0
 80a10ba:	f7ff bf61 	b.w	80a0f80 <system_delay_ms>

080a10be <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a10be:	4770      	bx	lr

080a10c0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a10c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a10c2:	4606      	mov	r6, r0
 80a10c4:	4615      	mov	r5, r2
 80a10c6:	460c      	mov	r4, r1
 80a10c8:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a10ca:	42bc      	cmp	r4, r7
 80a10cc:	d006      	beq.n	80a10dc <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a10ce:	6833      	ldr	r3, [r6, #0]
 80a10d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a10d4:	689b      	ldr	r3, [r3, #8]
 80a10d6:	4630      	mov	r0, r6
 80a10d8:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a10da:	e7f6      	b.n	80a10ca <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a10dc:	4628      	mov	r0, r5
 80a10de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a10e0 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a10e0:	2200      	movs	r2, #0
 80a10e2:	7c00      	ldrb	r0, [r0, #16]
 80a10e4:	f7ff be1a 	b.w	80a0d1c <HAL_I2C_Write_Data>

080a10e8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a10e8:	2100      	movs	r1, #0
 80a10ea:	7c00      	ldrb	r0, [r0, #16]
 80a10ec:	f7ff be1e 	b.w	80a0d2c <HAL_I2C_Available_Data>

080a10f0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a10f0:	2100      	movs	r1, #0
 80a10f2:	7c00      	ldrb	r0, [r0, #16]
 80a10f4:	f7ff be22 	b.w	80a0d3c <HAL_I2C_Read_Data>

080a10f8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a10f8:	2100      	movs	r1, #0
 80a10fa:	7c00      	ldrb	r0, [r0, #16]
 80a10fc:	f7ff be26 	b.w	80a0d4c <HAL_I2C_Peek_Data>

080a1100 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1100:	2100      	movs	r1, #0
 80a1102:	7c00      	ldrb	r0, [r0, #16]
 80a1104:	f7ff be2a 	b.w	80a0d5c <HAL_I2C_Flush_Data>

080a1108 <_ZN7TwoWireD0Ev>:
 80a1108:	b510      	push	{r4, lr}
 80a110a:	4604      	mov	r4, r0
 80a110c:	f7fe ffc9 	bl	80a00a2 <_ZdlPv>
 80a1110:	4620      	mov	r0, r4
 80a1112:	bd10      	pop	{r4, pc}

080a1114 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1114:	b510      	push	{r4, lr}
 80a1116:	4604      	mov	r4, r0
 80a1118:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a111e:	60a3      	str	r3, [r4, #8]
 80a1120:	4b04      	ldr	r3, [pc, #16]	; (80a1134 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1122:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1124:	7420      	strb	r0, [r4, #16]
 80a1126:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1128:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a112a:	f7ff fe27 	bl	80a0d7c <HAL_I2C_Init>

}
 80a112e:	4620      	mov	r0, r4
 80a1130:	bd10      	pop	{r4, pc}
 80a1132:	bf00      	nop
 80a1134:	080a5258 	.word	0x080a5258

080a1138 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1138:	2100      	movs	r1, #0
 80a113a:	7c00      	ldrb	r0, [r0, #16]
 80a113c:	f7ff be16 	b.w	80a0d6c <HAL_I2C_Is_Enabled>

080a1140 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1140:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 80a1142:	b510      	push	{r4, lr}
 80a1144:	b90a      	cbnz	r2, 80a114a <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 80a1146:	f001 fa36 	bl	80a25b6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a114a:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 80a114c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1150:	4718      	bx	r3
	...

080a1154 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void detachInterrupt(uint16_t pin)
{
 80a1154:	b570      	push	{r4, r5, r6, lr}
 80a1156:	4606      	mov	r6, r0
#if Wiring_Cellular == 1
    /* safety check that prevents users from detaching an interrupt from
     * BATT_INT_PC13 for power management which is shared with D7 */
    if (pin == D7) return;
#endif
    HAL_Interrupts_Detach(pin);
 80a1158:	f7ff fdd8 	bl	80a0d0c <HAL_Interrupts_Detach>
    delete handlers[pin];
 80a115c:	4b07      	ldr	r3, [pc, #28]	; (80a117c <_Z15detachInterruptt+0x28>)
 80a115e:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 80a1162:	461c      	mov	r4, r3
 80a1164:	b12d      	cbz	r5, 80a1172 <_Z15detachInterruptt+0x1e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1166:	4628      	mov	r0, r5
 80a1168:	f7ff fce6 	bl	80a0b38 <_ZNSt14_Function_baseD1Ev>
 80a116c:	4628      	mov	r0, r5
 80a116e:	f7fe ff98 	bl	80a00a2 <_ZdlPv>
    handlers[pin] = NULL;
 80a1172:	2300      	movs	r3, #0
 80a1174:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
 80a1178:	bd70      	pop	{r4, r5, r6, pc}
 80a117a:	bf00      	nop
 80a117c:	200004e4 	.word	0x200004e4

080a1180 <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1180:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1182:	2300      	movs	r3, #0
 80a1184:	6083      	str	r3, [r0, #8]
 80a1186:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1188:	4604      	mov	r4, r0
 80a118a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a118c:	b12b      	cbz	r3, 80a119a <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a118e:	2202      	movs	r2, #2
 80a1190:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1192:	68eb      	ldr	r3, [r5, #12]
 80a1194:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1196:	68ab      	ldr	r3, [r5, #8]
 80a1198:	60a3      	str	r3, [r4, #8]
	}
    }
 80a119a:	4620      	mov	r0, r4
 80a119c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a11a0 <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a11a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
 80a11a2:	4b0c      	ldr	r3, [pc, #48]	; (80a11d4 <_Z16allocate_handlertRSt8functionIFvvEE+0x34>)
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a11a4:	4606      	mov	r6, r0
    delete handlers[pin];
 80a11a6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a11aa:	460f      	mov	r7, r1
 80a11ac:	461c      	mov	r4, r3
    delete handlers[pin];
 80a11ae:	b12d      	cbz	r5, 80a11bc <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a11b0:	4628      	mov	r0, r5
 80a11b2:	f7ff fcc1 	bl	80a0b38 <_ZNSt14_Function_baseD1Ev>
 80a11b6:	4628      	mov	r0, r5
 80a11b8:	f7fe ff73 	bl	80a00a2 <_ZdlPv>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 80a11bc:	2010      	movs	r0, #16
 80a11be:	f7fe ff6c 	bl	80a009a <_Znwj>
 80a11c2:	4605      	mov	r5, r0
 80a11c4:	b110      	cbz	r0, 80a11cc <_Z16allocate_handlertRSt8functionIFvvEE+0x2c>
 80a11c6:	4639      	mov	r1, r7
 80a11c8:	f7ff ffda 	bl	80a1180 <_ZNSt8functionIFvvEEC1ERKS1_>
 80a11cc:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
 80a11d0:	4628      	mov	r0, r5
 80a11d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a11d4:	200004e4 	.word	0x200004e4

080a11d8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a11d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a11da:	460c      	mov	r4, r1
 80a11dc:	4605      	mov	r5, r0
 80a11de:	b085      	sub	sp, #20
 80a11e0:	4617      	mov	r7, r2
 80a11e2:	461e      	mov	r6, r3
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a11e4:	f7ff fd92 	bl	80a0d0c <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
 80a11e8:	4621      	mov	r1, r4
 80a11ea:	4628      	mov	r0, r5
 80a11ec:	f7ff ffd8 	bl	80a11a0 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
 80a11f0:	4604      	mov	r4, r0
 80a11f2:	b1b8      	cbz	r0, 80a1224 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x4c>
        HAL_InterruptExtraConfiguration extra = {0};
 80a11f4:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a11f6:	2304      	movs	r3, #4
  if (priority >= 0) {
 80a11f8:	428e      	cmp	r6, r1
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
 80a11fa:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a11fc:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a1200:	bfb4      	ite	lt
 80a1202:	460b      	movlt	r3, r1
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1204:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1208:	4602      	mov	r2, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a120a:	bfa4      	itt	ge
 80a120c:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a1210:	ab03      	addge	r3, sp, #12
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1212:	9300      	str	r3, [sp, #0]
 80a1214:	4906      	ldr	r1, [pc, #24]	; (80a1230 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>)
 80a1216:	463b      	mov	r3, r7
 80a1218:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a121a:	bfa8      	it	ge
 80a121c:	f88d 600d 	strbge.w	r6, [sp, #13]
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1220:	f7ff fd6c 	bl	80a0cfc <HAL_Interrupts_Attach>
    }
    return handler!=NULL;
}
 80a1224:	1c20      	adds	r0, r4, #0
 80a1226:	bf18      	it	ne
 80a1228:	2001      	movne	r0, #1
 80a122a:	b005      	add	sp, #20
 80a122c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a122e:	bf00      	nop
 80a1230:	080a1141 	.word	0x080a1141

080a1234 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1234:	4770      	bx	lr

080a1236 <_ZN9IPAddressD0Ev>:
 80a1236:	b510      	push	{r4, lr}
 80a1238:	4604      	mov	r4, r0
 80a123a:	f7fe ff32 	bl	80a00a2 <_ZdlPv>
 80a123e:	4620      	mov	r0, r4
 80a1240:	bd10      	pop	{r4, pc}

080a1242 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1244:	460f      	mov	r7, r1
 80a1246:	f100 0608 	add.w	r6, r0, #8
 80a124a:	1d05      	adds	r5, r0, #4
 80a124c:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a124e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1252:	220a      	movs	r2, #10
 80a1254:	4638      	mov	r0, r7
 80a1256:	f000 f942 	bl	80a14de <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a125a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a125c:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a125e:	d007      	beq.n	80a1270 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1260:	2c00      	cmp	r4, #0
 80a1262:	d0f4      	beq.n	80a124e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1264:	212e      	movs	r1, #46	; 0x2e
 80a1266:	4638      	mov	r0, r7
 80a1268:	f000 f8f6 	bl	80a1458 <_ZN5Print5printEc>
 80a126c:	4404      	add	r4, r0
 80a126e:	e7ee      	b.n	80a124e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1270:	4620      	mov	r0, r4
 80a1272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1274 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1274:	b510      	push	{r4, lr}
 80a1276:	4604      	mov	r4, r0
 80a1278:	4b04      	ldr	r3, [pc, #16]	; (80a128c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a127a:	2211      	movs	r2, #17
 80a127c:	f840 3b04 	str.w	r3, [r0], #4
 80a1280:	2100      	movs	r1, #0
 80a1282:	f003 feb6 	bl	80a4ff2 <memset>
{
    clear();
}
 80a1286:	4620      	mov	r0, r4
 80a1288:	bd10      	pop	{r4, pc}
 80a128a:	bf00      	nop
 80a128c:	080a5280 	.word	0x080a5280

080a1290 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1290:	4603      	mov	r3, r0
 80a1292:	4a07      	ldr	r2, [pc, #28]	; (80a12b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1294:	b510      	push	{r4, lr}
 80a1296:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a129a:	f101 0210 	add.w	r2, r1, #16
 80a129e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a12a2:	4291      	cmp	r1, r2
 80a12a4:	f843 4b04 	str.w	r4, [r3], #4
 80a12a8:	d1f9      	bne.n	80a129e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a12aa:	780a      	ldrb	r2, [r1, #0]
 80a12ac:	701a      	strb	r2, [r3, #0]
}
 80a12ae:	bd10      	pop	{r4, pc}
 80a12b0:	080a5280 	.word	0x080a5280

080a12b4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a12b4:	4a02      	ldr	r2, [pc, #8]	; (80a12c0 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a12b6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a12b8:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a12ba:	2204      	movs	r2, #4
 80a12bc:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a12be:	4770      	bx	lr
 80a12c0:	080a5280 	.word	0x080a5280

080a12c4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a12c4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a12c6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a12ca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a12ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a12d2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a12d6:	2304      	movs	r3, #4
 80a12d8:	6041      	str	r1, [r0, #4]
 80a12da:	7503      	strb	r3, [r0, #20]
 80a12dc:	bd10      	pop	{r4, pc}
	...

080a12e0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a12e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a12e2:	4d04      	ldr	r5, [pc, #16]	; (80a12f4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a12e4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a12e6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a12ea:	9500      	str	r5, [sp, #0]
 80a12ec:	f7ff ffea 	bl	80a12c4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a12f0:	b003      	add	sp, #12
 80a12f2:	bd30      	pop	{r4, r5, pc}
 80a12f4:	080a5280 	.word	0x080a5280

080a12f8 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a12f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a12fa:	780d      	ldrb	r5, [r1, #0]
 80a12fc:	788b      	ldrb	r3, [r1, #2]
 80a12fe:	784a      	ldrb	r2, [r1, #1]
 80a1300:	78c9      	ldrb	r1, [r1, #3]
 80a1302:	9100      	str	r1, [sp, #0]
 80a1304:	4629      	mov	r1, r5
 80a1306:	f7ff ffdd 	bl	80a12c4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a130a:	b003      	add	sp, #12
 80a130c:	bd30      	pop	{r4, r5, pc}
	...

080a1310 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1310:	4a01      	ldr	r2, [pc, #4]	; (80a1318 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1312:	4b02      	ldr	r3, [pc, #8]	; (80a131c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1314:	601a      	str	r2, [r3, #0]
 80a1316:	4770      	bx	lr
 80a1318:	080a5345 	.word	0x080a5345
 80a131c:	20000544 	.word	0x20000544

080a1320 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1320:	2300      	movs	r3, #0
 80a1322:	461a      	mov	r2, r3
 80a1324:	6840      	ldr	r0, [r0, #4]
 80a1326:	f7ff be57 	b.w	80a0fd8 <network_connect>

080a132a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a132a:	2200      	movs	r2, #0
 80a132c:	2102      	movs	r1, #2
 80a132e:	6840      	ldr	r0, [r0, #4]
 80a1330:	f7ff be62 	b.w	80a0ff8 <network_disconnect>

080a1334 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1334:	2200      	movs	r2, #0
 80a1336:	4611      	mov	r1, r2
 80a1338:	6840      	ldr	r0, [r0, #4]
 80a133a:	f7ff be55 	b.w	80a0fe8 <network_connecting>

080a133e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a133e:	2200      	movs	r2, #0
 80a1340:	4611      	mov	r1, r2
 80a1342:	6840      	ldr	r0, [r0, #4]
 80a1344:	f7ff be60 	b.w	80a1008 <network_ready>

080a1348 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1348:	2300      	movs	r3, #0
 80a134a:	461a      	mov	r2, r3
 80a134c:	4619      	mov	r1, r3
 80a134e:	6840      	ldr	r0, [r0, #4]
 80a1350:	f7ff be62 	b.w	80a1018 <network_on>

080a1354 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1354:	2300      	movs	r3, #0
 80a1356:	461a      	mov	r2, r3
 80a1358:	4619      	mov	r1, r3
 80a135a:	6840      	ldr	r0, [r0, #4]
 80a135c:	f7ff be64 	b.w	80a1028 <network_off>

080a1360 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1360:	2200      	movs	r2, #0
 80a1362:	f081 0101 	eor.w	r1, r1, #1
 80a1366:	6840      	ldr	r0, [r0, #4]
 80a1368:	f7ff be66 	b.w	80a1038 <network_listen>

080a136c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a136c:	2200      	movs	r2, #0
 80a136e:	6840      	ldr	r0, [r0, #4]
 80a1370:	f7ff be72 	b.w	80a1058 <network_set_listen_timeout>

080a1374 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1374:	2200      	movs	r2, #0
 80a1376:	4611      	mov	r1, r2
 80a1378:	6840      	ldr	r0, [r0, #4]
 80a137a:	f7ff be75 	b.w	80a1068 <network_get_listen_timeout>

080a137e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a137e:	2200      	movs	r2, #0
 80a1380:	4611      	mov	r1, r2
 80a1382:	6840      	ldr	r0, [r0, #4]
 80a1384:	f7ff be60 	b.w	80a1048 <network_listening>

080a1388 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1388:	b570      	push	{r4, r5, r6, lr}
 80a138a:	4616      	mov	r6, r2
 80a138c:	b08e      	sub	sp, #56	; 0x38
 80a138e:	4604      	mov	r4, r0
    IPAddress addr;
 80a1390:	a808      	add	r0, sp, #32
 80a1392:	f7ff ff6f 	bl	80a1274 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1396:	2211      	movs	r2, #17
 80a1398:	2100      	movs	r1, #0
 80a139a:	a803      	add	r0, sp, #12
 80a139c:	f003 fe29 	bl	80a4ff2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a13a0:	4630      	mov	r0, r6
 80a13a2:	f003 fe57 	bl	80a5054 <strlen>
 80a13a6:	2500      	movs	r5, #0
 80a13a8:	4b0a      	ldr	r3, [pc, #40]	; (80a13d4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a13aa:	9500      	str	r5, [sp, #0]
 80a13ac:	b281      	uxth	r1, r0
 80a13ae:	685b      	ldr	r3, [r3, #4]
 80a13b0:	aa03      	add	r2, sp, #12
 80a13b2:	4630      	mov	r0, r6
 80a13b4:	f7ff fdcc 	bl	80a0f50 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a13b8:	b120      	cbz	r0, 80a13c4 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a13ba:	4629      	mov	r1, r5
 80a13bc:	4620      	mov	r0, r4
 80a13be:	f7ff ff79 	bl	80a12b4 <_ZN9IPAddressC1Em>
 80a13c2:	e003      	b.n	80a13cc <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a13c4:	a903      	add	r1, sp, #12
 80a13c6:	4620      	mov	r0, r4
 80a13c8:	f7ff ff62 	bl	80a1290 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a13cc:	4620      	mov	r0, r4
 80a13ce:	b00e      	add	sp, #56	; 0x38
 80a13d0:	bd70      	pop	{r4, r5, r6, pc}
 80a13d2:	bf00      	nop
 80a13d4:	200005bc 	.word	0x200005bc

080a13d8 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a13d8:	4b03      	ldr	r3, [pc, #12]	; (80a13e8 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a13da:	4a04      	ldr	r2, [pc, #16]	; (80a13ec <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a13dc:	2804      	cmp	r0, #4
 80a13de:	bf0c      	ite	eq
 80a13e0:	4610      	moveq	r0, r2
 80a13e2:	4618      	movne	r0, r3
 80a13e4:	4770      	bx	lr
 80a13e6:	bf00      	nop
 80a13e8:	20000548 	.word	0x20000548
 80a13ec:	200005bc 	.word	0x200005bc

080a13f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a13f0:	4b02      	ldr	r3, [pc, #8]	; (80a13fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a13f2:	4a03      	ldr	r2, [pc, #12]	; (80a1400 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a13f4:	601a      	str	r2, [r3, #0]
 80a13f6:	2200      	movs	r2, #0
 80a13f8:	605a      	str	r2, [r3, #4]
 80a13fa:	4770      	bx	lr
 80a13fc:	20000548 	.word	0x20000548
 80a1400:	080a536c 	.word	0x080a536c

080a1404 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1406:	4606      	mov	r6, r0
 80a1408:	460d      	mov	r5, r1
 80a140a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a140c:	2400      	movs	r4, #0
  while (size--) {
 80a140e:	42bd      	cmp	r5, r7
 80a1410:	d00c      	beq.n	80a142c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1412:	6833      	ldr	r3, [r6, #0]
 80a1414:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1418:	689b      	ldr	r3, [r3, #8]
 80a141a:	4630      	mov	r0, r6
 80a141c:	4798      	blx	r3
     if (chunk>=0)
 80a141e:	2800      	cmp	r0, #0
 80a1420:	db01      	blt.n	80a1426 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1422:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1424:	e7f3      	b.n	80a140e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1426:	2c00      	cmp	r4, #0
 80a1428:	bf08      	it	eq
 80a142a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a142c:	4620      	mov	r0, r4
 80a142e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1430 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1430:	b570      	push	{r4, r5, r6, lr}
 80a1432:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1434:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1436:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1438:	b149      	cbz	r1, 80a144e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a143a:	f003 fe0b 	bl	80a5054 <strlen>
 80a143e:	682b      	ldr	r3, [r5, #0]
 80a1440:	4602      	mov	r2, r0
 80a1442:	4621      	mov	r1, r4
 80a1444:	4628      	mov	r0, r5
    }
 80a1446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a144a:	68db      	ldr	r3, [r3, #12]
 80a144c:	4718      	bx	r3
    }
 80a144e:	bd70      	pop	{r4, r5, r6, pc}

080a1450 <_ZN5Print5printEPKc>:
 80a1450:	b508      	push	{r3, lr}
 80a1452:	f7ff ffed 	bl	80a1430 <_ZN5Print5writeEPKc>
 80a1456:	bd08      	pop	{r3, pc}

080a1458 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1458:	6803      	ldr	r3, [r0, #0]
 80a145a:	689b      	ldr	r3, [r3, #8]
 80a145c:	4718      	bx	r3

080a145e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a145e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1460:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1462:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1464:	f7ff fff8 	bl	80a1458 <_ZN5Print5printEc>
  n += print('\n');
 80a1468:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a146a:	4604      	mov	r4, r0
  n += print('\n');
 80a146c:	4628      	mov	r0, r5
 80a146e:	f7ff fff3 	bl	80a1458 <_ZN5Print5printEc>
  return n;
}
 80a1472:	4420      	add	r0, r4
 80a1474:	bd38      	pop	{r3, r4, r5, pc}

080a1476 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1476:	b538      	push	{r3, r4, r5, lr}
 80a1478:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a147a:	f7ff ffd9 	bl	80a1430 <_ZN5Print5writeEPKc>
 80a147e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1480:	4628      	mov	r0, r5
 80a1482:	f7ff ffec 	bl	80a145e <_ZN5Print7printlnEv>
  return n;
}
 80a1486:	4420      	add	r0, r4
 80a1488:	bd38      	pop	{r3, r4, r5, pc}

080a148a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a148a:	2a01      	cmp	r2, #1
 80a148c:	bf98      	it	ls
 80a148e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1490:	b530      	push	{r4, r5, lr}
 80a1492:	460b      	mov	r3, r1
 80a1494:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1496:	2100      	movs	r1, #0
 80a1498:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a149c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a14a0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a14a4:	fb05 3312 	mls	r3, r5, r2, r3
 80a14a8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a14aa:	2b09      	cmp	r3, #9
 80a14ac:	bf94      	ite	ls
 80a14ae:	3330      	addls	r3, #48	; 0x30
 80a14b0:	3337      	addhi	r3, #55	; 0x37
 80a14b2:	b2db      	uxtb	r3, r3
 80a14b4:	4621      	mov	r1, r4
 80a14b6:	f804 3901 	strb.w	r3, [r4], #-1
 80a14ba:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a14bc:	2d00      	cmp	r5, #0
 80a14be:	d1ef      	bne.n	80a14a0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a14c0:	f7ff ffb6 	bl	80a1430 <_ZN5Print5writeEPKc>
}
 80a14c4:	b00b      	add	sp, #44	; 0x2c
 80a14c6:	bd30      	pop	{r4, r5, pc}

080a14c8 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a14c8:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a14ca:	b922      	cbnz	r2, 80a14d6 <_ZN5Print5printEmi+0xe>
 80a14cc:	6803      	ldr	r3, [r0, #0]
 80a14ce:	b2c9      	uxtb	r1, r1
 80a14d0:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a14d2:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a14d4:	4718      	bx	r3
  else return printNumber(n, base);
 80a14d6:	b2d2      	uxtb	r2, r2
}
 80a14d8:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a14da:	f7ff bfd6 	b.w	80a148a <_ZN5Print11printNumberEmh>

080a14de <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a14de:	f7ff bff3 	b.w	80a14c8 <_ZN5Print5printEmi>

080a14e2 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a14e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a14e6:	4607      	mov	r7, r0
 80a14e8:	460e      	mov	r6, r1
  if (base == 0) {
 80a14ea:	4615      	mov	r5, r2
 80a14ec:	b92a      	cbnz	r2, 80a14fa <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a14ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a14f2:	6803      	ldr	r3, [r0, #0]
 80a14f4:	b2c9      	uxtb	r1, r1
 80a14f6:	689b      	ldr	r3, [r3, #8]
 80a14f8:	4718      	bx	r3
  } else if (base == 10) {
 80a14fa:	2a0a      	cmp	r2, #10
 80a14fc:	d102      	bne.n	80a1504 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a14fe:	2900      	cmp	r1, #0
 80a1500:	da01      	bge.n	80a1506 <_ZN5Print5printEli+0x24>
 80a1502:	e004      	b.n	80a150e <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1504:	b2d2      	uxtb	r2, r2
  }
}
 80a1506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a150a:	f7ff bfbe 	b.w	80a148a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a150e:	212d      	movs	r1, #45	; 0x2d
 80a1510:	f7ff ffa2 	bl	80a1458 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a1514:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1516:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a1518:	4271      	negs	r1, r6
 80a151a:	4638      	mov	r0, r7
 80a151c:	f7ff ffb5 	bl	80a148a <_ZN5Print11printNumberEmh>
 80a1520:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1526 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1526:	f7ff bfdc 	b.w	80a14e2 <_ZN5Print5printEli>
	...

080a152c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a152c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1530:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1532:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1534:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1536:	4617      	mov	r7, r2
 80a1538:	461e      	mov	r6, r3
 80a153a:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a153e:	f003 fa33 	bl	80a49a8 <__aeabi_dcmpun>
 80a1542:	b108      	cbz	r0, 80a1548 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1544:	4947      	ldr	r1, [pc, #284]	; (80a1664 <_ZN5Print10printFloatEdh+0x138>)
 80a1546:	e012      	b.n	80a156e <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1548:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a154c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a1550:	4b45      	ldr	r3, [pc, #276]	; (80a1668 <_ZN5Print10printFloatEdh+0x13c>)
 80a1552:	4638      	mov	r0, r7
 80a1554:	4621      	mov	r1, r4
 80a1556:	f003 fa27 	bl	80a49a8 <__aeabi_dcmpun>
 80a155a:	b968      	cbnz	r0, 80a1578 <_ZN5Print10printFloatEdh+0x4c>
 80a155c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a1560:	4b41      	ldr	r3, [pc, #260]	; (80a1668 <_ZN5Print10printFloatEdh+0x13c>)
 80a1562:	4638      	mov	r0, r7
 80a1564:	4621      	mov	r1, r4
 80a1566:	f003 fa01 	bl	80a496c <__aeabi_dcmple>
 80a156a:	b928      	cbnz	r0, 80a1578 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a156c:	493f      	ldr	r1, [pc, #252]	; (80a166c <_ZN5Print10printFloatEdh+0x140>)
 80a156e:	4640      	mov	r0, r8
 80a1570:	f7ff ff5e 	bl	80a1430 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a1578:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a157c:	4b3c      	ldr	r3, [pc, #240]	; (80a1670 <_ZN5Print10printFloatEdh+0x144>)
 80a157e:	4638      	mov	r0, r7
 80a1580:	4631      	mov	r1, r6
 80a1582:	f003 fa07 	bl	80a4994 <__aeabi_dcmpgt>
 80a1586:	b108      	cbz	r0, 80a158c <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1588:	493a      	ldr	r1, [pc, #232]	; (80a1674 <_ZN5Print10printFloatEdh+0x148>)
 80a158a:	e7f0      	b.n	80a156e <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a158c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1590:	4b39      	ldr	r3, [pc, #228]	; (80a1678 <_ZN5Print10printFloatEdh+0x14c>)
 80a1592:	4638      	mov	r0, r7
 80a1594:	4631      	mov	r1, r6
 80a1596:	f003 f9df 	bl	80a4958 <__aeabi_dcmplt>
 80a159a:	2800      	cmp	r0, #0
 80a159c:	d1f4      	bne.n	80a1588 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a159e:	2200      	movs	r2, #0
 80a15a0:	2300      	movs	r3, #0
 80a15a2:	4638      	mov	r0, r7
 80a15a4:	4631      	mov	r1, r6
 80a15a6:	f003 f9d7 	bl	80a4958 <__aeabi_dcmplt>
 80a15aa:	b138      	cbz	r0, 80a15bc <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a15ac:	212d      	movs	r1, #45	; 0x2d
 80a15ae:	4640      	mov	r0, r8
 80a15b0:	f7ff ff52 	bl	80a1458 <_ZN5Print5printEc>
     number = -number;
 80a15b4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a15b8:	4604      	mov	r4, r0
 80a15ba:	e000      	b.n	80a15be <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a15bc:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a15be:	492f      	ldr	r1, [pc, #188]	; (80a167c <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a15c0:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a15c4:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a15c6:	fa5f f389 	uxtb.w	r3, r9
 80a15ca:	429d      	cmp	r5, r3
 80a15cc:	d906      	bls.n	80a15dc <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a15ce:	2200      	movs	r2, #0
 80a15d0:	4b2b      	ldr	r3, [pc, #172]	; (80a1680 <_ZN5Print10printFloatEdh+0x154>)
 80a15d2:	f003 f879 	bl	80a46c8 <__aeabi_ddiv>
 80a15d6:	f109 0901 	add.w	r9, r9, #1
 80a15da:	e7f4      	b.n	80a15c6 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a15dc:	463a      	mov	r2, r7
 80a15de:	4633      	mov	r3, r6
 80a15e0:	f002 fd96 	bl	80a4110 <__adddf3>
 80a15e4:	460f      	mov	r7, r1
 80a15e6:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a15e8:	f003 fa1c 	bl	80a4a24 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a15ec:	220a      	movs	r2, #10
 80a15ee:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a15f0:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a15f2:	4640      	mov	r0, r8
 80a15f4:	f7ff ff49 	bl	80a148a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a15f8:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a15fa:	b37d      	cbz	r5, 80a165c <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a15fc:	4648      	mov	r0, r9
 80a15fe:	f002 fec3 	bl	80a4388 <__aeabi_ui2d>
 80a1602:	4602      	mov	r2, r0
 80a1604:	460b      	mov	r3, r1
 80a1606:	4630      	mov	r0, r6
 80a1608:	4639      	mov	r1, r7
 80a160a:	f002 fd7f 	bl	80a410c <__aeabi_dsub>
 80a160e:	4606      	mov	r6, r0
 80a1610:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1612:	4640      	mov	r0, r8
 80a1614:	491b      	ldr	r1, [pc, #108]	; (80a1684 <_ZN5Print10printFloatEdh+0x158>)
 80a1616:	f7ff ff0b 	bl	80a1430 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a161a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a161c:	4b18      	ldr	r3, [pc, #96]	; (80a1680 <_ZN5Print10printFloatEdh+0x154>)
 80a161e:	2200      	movs	r2, #0
 80a1620:	4630      	mov	r0, r6
 80a1622:	4639      	mov	r1, r7
 80a1624:	f002 ff26 	bl	80a4474 <__aeabi_dmul>
 80a1628:	460f      	mov	r7, r1
 80a162a:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a162c:	f003 f9d2 	bl	80a49d4 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1630:	220a      	movs	r2, #10
 80a1632:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a1634:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1636:	4640      	mov	r0, r8
 80a1638:	f7ff ff53 	bl	80a14e2 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a163c:	4404      	add	r4, r0
    remainder -= toPrint;
 80a163e:	4648      	mov	r0, r9
 80a1640:	f002 feb2 	bl	80a43a8 <__aeabi_i2d>
 80a1644:	4602      	mov	r2, r0
 80a1646:	460b      	mov	r3, r1
 80a1648:	4630      	mov	r0, r6
 80a164a:	4639      	mov	r1, r7
 80a164c:	f002 fd5e 	bl	80a410c <__aeabi_dsub>
 80a1650:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1652:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a1656:	4606      	mov	r6, r0
 80a1658:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a165a:	d1df      	bne.n	80a161c <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a165c:	4620      	mov	r0, r4
 80a165e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1662:	bf00      	nop
 80a1664:	080a5398 	.word	0x080a5398
 80a1668:	7fefffff 	.word	0x7fefffff
 80a166c:	080a53a0 	.word	0x080a53a0
 80a1670:	41efffff 	.word	0x41efffff
 80a1674:	080a539c 	.word	0x080a539c
 80a1678:	c1efffff 	.word	0xc1efffff
 80a167c:	3fe00000 	.word	0x3fe00000
 80a1680:	40240000 	.word	0x40240000
 80a1684:	080a508e 	.word	0x080a508e

080a1688 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a1688:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a168a:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a168e:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a1690:	9100      	str	r1, [sp, #0]
 80a1692:	f7ff ff4b 	bl	80a152c <_ZN5Print10printFloatEdh>
 80a1696:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a1698:	4628      	mov	r0, r5
 80a169a:	f7ff fee0 	bl	80a145e <_ZN5Print7printlnEv>
  return n;
}
 80a169e:	4420      	add	r0, r4
 80a16a0:	b003      	add	sp, #12
 80a16a2:	bd30      	pop	{r4, r5, pc}

080a16a4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a16a4:	b510      	push	{r4, lr}
 80a16a6:	4604      	mov	r4, r0
 80a16a8:	f7ff fa46 	bl	80a0b38 <_ZNSt14_Function_baseD1Ev>
 80a16ac:	4620      	mov	r0, r4
 80a16ae:	bd10      	pop	{r4, pc}

080a16b0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a16b0:	4803      	ldr	r0, [pc, #12]	; (80a16c0 <_GLOBAL__sub_I_RGB+0x10>)
 80a16b2:	2300      	movs	r3, #0
 80a16b4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a16b6:	4a03      	ldr	r2, [pc, #12]	; (80a16c4 <_GLOBAL__sub_I_RGB+0x14>)
 80a16b8:	4903      	ldr	r1, [pc, #12]	; (80a16c8 <_GLOBAL__sub_I_RGB+0x18>)
 80a16ba:	f000 bf77 	b.w	80a25ac <__aeabi_atexit>
 80a16be:	bf00      	nop
 80a16c0:	20000550 	.word	0x20000550
 80a16c4:	2000036c 	.word	0x2000036c
 80a16c8:	080a16a5 	.word	0x080a16a5

080a16cc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a16cc:	4770      	bx	lr

080a16ce <_ZN8SPIClassD0Ev>:
 80a16ce:	b510      	push	{r4, lr}
 80a16d0:	4604      	mov	r4, r0
 80a16d2:	f7fe fce6 	bl	80a00a2 <_ZdlPv>
 80a16d6:	4620      	mov	r0, r4
 80a16d8:	bd10      	pop	{r4, pc}
	...

080a16dc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a16dc:	b570      	push	{r4, r5, r6, lr}
 80a16de:	4604      	mov	r4, r0
 80a16e0:	460e      	mov	r6, r1
 80a16e2:	4b07      	ldr	r3, [pc, #28]	; (80a1700 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a16e4:	2500      	movs	r5, #0
 80a16e6:	6003      	str	r3, [r0, #0]
 80a16e8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a16ec:	f7ff fabe 	bl	80a0c6c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a16f0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a16f2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a16f4:	f7ff fb9c 	bl	80a0e30 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a16f8:	60a5      	str	r5, [r4, #8]
}
 80a16fa:	4620      	mov	r0, r4
 80a16fc:	bd70      	pop	{r4, r5, r6, pc}
 80a16fe:	bf00      	nop
 80a1700:	080a53ac 	.word	0x080a53ac

080a1704 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1704:	7900      	ldrb	r0, [r0, #4]
 80a1706:	f7ff bb9b 	b.w	80a0e40 <HAL_SPI_Is_Enabled>
	...

080a170c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a170c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1710:	4b03      	ldr	r3, [pc, #12]	; (80a1720 <_GLOBAL__sub_I_System+0x14>)
 80a1712:	2000      	movs	r0, #0
 80a1714:	7018      	strb	r0, [r3, #0]
 80a1716:	8058      	strh	r0, [r3, #2]
 80a1718:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a171a:	f7ff bc29 	b.w	80a0f70 <set_system_mode>
 80a171e:	bf00      	nop
 80a1720:	20000560 	.word	0x20000560

080a1724 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1726:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1728:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a172a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a172e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a1730:	2201      	movs	r2, #1
 80a1732:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1736:	4621      	mov	r1, r4
 80a1738:	47a8      	blx	r5
}
 80a173a:	b003      	add	sp, #12
 80a173c:	bd30      	pop	{r4, r5, pc}

080a173e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a173e:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1740:	6803      	ldr	r3, [r0, #0]
 80a1742:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1744:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1748:	46a4      	mov	ip, r4
}
 80a174a:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a174c:	4760      	bx	ip

080a174e <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a174e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1750:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a1752:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a1754:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a1758:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a175a:	4621      	mov	r1, r4
 80a175c:	4613      	mov	r3, r2
 80a175e:	2201      	movs	r2, #1
 80a1760:	47a8      	blx	r5
}
 80a1762:	b003      	add	sp, #12
 80a1764:	bd30      	pop	{r4, r5, pc}

080a1766 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a1766:	4770      	bx	lr

080a1768 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a1768:	4770      	bx	lr

080a176a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a176a:	2000      	movs	r0, #0
 80a176c:	4770      	bx	lr

080a176e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a176e:	b510      	push	{r4, lr}
 80a1770:	4604      	mov	r4, r0
 80a1772:	f7fe fc96 	bl	80a00a2 <_ZdlPv>
 80a1776:	4620      	mov	r0, r4
 80a1778:	bd10      	pop	{r4, pc}

080a177a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a177a:	f7fe bc92 	b.w	80a00a2 <_ZdlPv>

080a177e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a177e:	b510      	push	{r4, lr}
 80a1780:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a1782:	6803      	ldr	r3, [r0, #0]
 80a1784:	689b      	ldr	r3, [r3, #8]
 80a1786:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1788:	68a3      	ldr	r3, [r4, #8]
 80a178a:	3b01      	subs	r3, #1
 80a178c:	60a3      	str	r3, [r4, #8]
 80a178e:	b92b      	cbnz	r3, 80a179c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29+0x1e>
            _M_destroy();
 80a1790:	6823      	ldr	r3, [r4, #0]
 80a1792:	4620      	mov	r0, r4
        }
    }
 80a1794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a1798:	68db      	ldr	r3, [r3, #12]
 80a179a:	4718      	bx	r3
 80a179c:	bd10      	pop	{r4, pc}
	...

080a17a0 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a17a0:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a17a2:	4604      	mov	r4, r0
 80a17a4:	4606      	mov	r6, r0
 80a17a6:	694d      	ldr	r5, [r1, #20]
 80a17a8:	4b04      	ldr	r3, [pc, #16]	; (80a17bc <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a17aa:	358c      	adds	r5, #140	; 0x8c
 80a17ac:	f844 3b04 	str.w	r3, [r4], #4
 80a17b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a17b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a17b4:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a17b6:	4630      	mov	r0, r6
 80a17b8:	7023      	strb	r3, [r4, #0]
 80a17ba:	bd70      	pop	{r4, r5, r6, pc}
 80a17bc:	080a5280 	.word	0x080a5280

080a17c0 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a17c0:	b510      	push	{r4, lr}
 80a17c2:	6943      	ldr	r3, [r0, #20]
 80a17c4:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a17c6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a17ca:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a17ce:	429a      	cmp	r2, r3
 80a17d0:	d005      	beq.n	80a17de <_ZN9TCPClient4peekEv+0x1e>
 80a17d2:	6962      	ldr	r2, [r4, #20]
 80a17d4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a17d8:	4413      	add	r3, r2
 80a17da:	7918      	ldrb	r0, [r3, #4]
 80a17dc:	bd10      	pop	{r4, pc}
 80a17de:	6803      	ldr	r3, [r0, #0]
 80a17e0:	691b      	ldr	r3, [r3, #16]
 80a17e2:	4798      	blx	r3
 80a17e4:	2800      	cmp	r0, #0
 80a17e6:	d1f4      	bne.n	80a17d2 <_ZN9TCPClient4peekEv+0x12>
 80a17e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a17ec:	bd10      	pop	{r4, pc}

080a17ee <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a17ee:	b510      	push	{r4, lr}
 80a17f0:	6943      	ldr	r3, [r0, #20]
 80a17f2:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a17f4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a17f8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a17fc:	429a      	cmp	r2, r3
 80a17fe:	d008      	beq.n	80a1812 <_ZN9TCPClient4readEv+0x24>
 80a1800:	6962      	ldr	r2, [r4, #20]
 80a1802:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1806:	1c59      	adds	r1, r3, #1
 80a1808:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a180c:	4413      	add	r3, r2
 80a180e:	7918      	ldrb	r0, [r3, #4]
 80a1810:	bd10      	pop	{r4, pc}
 80a1812:	6803      	ldr	r3, [r0, #0]
 80a1814:	691b      	ldr	r3, [r3, #16]
 80a1816:	4798      	blx	r3
 80a1818:	2800      	cmp	r0, #0
 80a181a:	d1f1      	bne.n	80a1800 <_ZN9TCPClient4readEv+0x12>
 80a181c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1820:	bd10      	pop	{r4, pc}

080a1822 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1824:	6943      	ldr	r3, [r0, #20]
 80a1826:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a1828:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a182c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1830:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a1832:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1834:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a1836:	d106      	bne.n	80a1846 <_ZN9TCPClient4readEPhj+0x24>
 80a1838:	6803      	ldr	r3, [r0, #0]
 80a183a:	691b      	ldr	r3, [r3, #16]
 80a183c:	4798      	blx	r3
 80a183e:	b910      	cbnz	r0, 80a1846 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a1840:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a1844:	e014      	b.n	80a1870 <_ZN9TCPClient4readEPhj+0x4e>
 80a1846:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1848:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a184a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a184e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1852:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1854:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a1856:	42bc      	cmp	r4, r7
 80a1858:	bf28      	it	cs
 80a185a:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a185c:	3104      	adds	r1, #4
 80a185e:	4622      	mov	r2, r4
 80a1860:	f003 fbbc 	bl	80a4fdc <memcpy>
 80a1864:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a1866:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a186a:	4423      	add	r3, r4
 80a186c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a1870:	4620      	mov	r0, r4
 80a1872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1874 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a1874:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a1876:	2300      	movs	r3, #0
 80a1878:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a187c:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a187e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a1882:	4770      	bx	lr

080a1884 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a1884:	b538      	push	{r3, r4, r5, lr}
 80a1886:	6942      	ldr	r2, [r0, #20]
 80a1888:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a188a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a188e:	b11b      	cbz	r3, 80a1898 <_ZN9TCPClient9availableEv+0x14>
 80a1890:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a1894:	429a      	cmp	r2, r3
 80a1896:	d00c      	beq.n	80a18b2 <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1898:	6920      	ldr	r0, [r4, #16]
 80a189a:	f7ff fd9d 	bl	80a13d8 <_ZN5spark12NetworkClass4fromEm>
 80a189e:	6803      	ldr	r3, [r0, #0]
 80a18a0:	68db      	ldr	r3, [r3, #12]
 80a18a2:	4798      	blx	r3
 80a18a4:	b318      	cbz	r0, 80a18ee <_ZN9TCPClient9availableEv+0x6a>
 80a18a6:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a18a8:	6818      	ldr	r0, [r3, #0]
 80a18aa:	f7ff fa79 	bl	80a0da0 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a18ae:	b918      	cbnz	r0, 80a18b8 <_ZN9TCPClient9availableEv+0x34>
 80a18b0:	e01d      	b.n	80a18ee <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a18b2:	f7ff ffdf 	bl	80a1874 <_ZN9TCPClient12flush_bufferEv>
 80a18b6:	e7ef      	b.n	80a1898 <_ZN9TCPClient9availableEv+0x14>
 80a18b8:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a18ba:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a18be:	297f      	cmp	r1, #127	; 0x7f
 80a18c0:	d815      	bhi.n	80a18ee <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a18c2:	1d05      	adds	r5, r0, #4
 80a18c4:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a18c8:	2300      	movs	r3, #0
 80a18ca:	4429      	add	r1, r5
 80a18cc:	6800      	ldr	r0, [r0, #0]
 80a18ce:	f7ff fa7f 	bl	80a0dd0 <socket_receive>
            if (ret > 0)
 80a18d2:	2800      	cmp	r0, #0
 80a18d4:	dd0b      	ble.n	80a18ee <_ZN9TCPClient9availableEv+0x6a>
 80a18d6:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a18d8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a18dc:	b90a      	cbnz	r2, 80a18e2 <_ZN9TCPClient9availableEv+0x5e>
 80a18de:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a18e2:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a18e4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a18e8:	4418      	add	r0, r3
 80a18ea:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a18ee:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a18f0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a18f4:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a18f8:	1a18      	subs	r0, r3, r0
}
 80a18fa:	bd38      	pop	{r3, r4, r5, pc}

080a18fc <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a18fc:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a18fe:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a1900:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1902:	6818      	ldr	r0, [r3, #0]
 80a1904:	f7ff fa4c 	bl	80a0da0 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a1908:	b118      	cbz	r0, 80a1912 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a190a:	6963      	ldr	r3, [r4, #20]
 80a190c:	6818      	ldr	r0, [r3, #0]
 80a190e:	f7ff fa77 	bl	80a0e00 <socket_close>
 80a1912:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a1914:	f7ff fa7c 	bl	80a0e10 <socket_handle_invalid>
 80a1918:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a191a:	6960      	ldr	r0, [r4, #20]
 80a191c:	2211      	movs	r2, #17
 80a191e:	2100      	movs	r1, #0
 80a1920:	308c      	adds	r0, #140	; 0x8c
 80a1922:	f003 fb66 	bl	80a4ff2 <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a1926:	4620      	mov	r0, r4
}
 80a1928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a192c:	f7ff bfa2 	b.w	80a1874 <_ZN9TCPClient12flush_bufferEv>

080a1930 <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1934:	461f      	mov	r7, r3
    stop();
 80a1936:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1938:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a193c:	4606      	mov	r6, r0
 80a193e:	460c      	mov	r4, r1
 80a1940:	4615      	mov	r5, r2
    stop();
 80a1942:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a1944:	4638      	mov	r0, r7
 80a1946:	f7ff fd47 	bl	80a13d8 <_ZN5spark12NetworkClass4fromEm>
 80a194a:	6803      	ldr	r3, [r0, #0]
 80a194c:	68db      	ldr	r3, [r3, #12]
 80a194e:	4798      	blx	r3
 80a1950:	2800      	cmp	r0, #0
 80a1952:	d056      	beq.n	80a1a02 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1954:	9700      	str	r7, [sp, #0]
 80a1956:	462b      	mov	r3, r5
 80a1958:	2206      	movs	r2, #6
 80a195a:	2101      	movs	r1, #1
 80a195c:	2002      	movs	r0, #2
 80a195e:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a1962:	f7ff fa25 	bl	80a0db0 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1966:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1968:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a196c:	2700      	movs	r7, #0
 80a196e:	9302      	str	r3, [sp, #8]
 80a1970:	6973      	ldr	r3, [r6, #20]
 80a1972:	9703      	str	r7, [sp, #12]
 80a1974:	681b      	ldr	r3, [r3, #0]
 80a1976:	2001      	movs	r0, #1
 80a1978:	9301      	str	r3, [sp, #4]
 80a197a:	4b23      	ldr	r3, [pc, #140]	; (80a1a08 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a197c:	aa02      	add	r2, sp, #8
 80a197e:	9300      	str	r3, [sp, #0]
 80a1980:	4922      	ldr	r1, [pc, #136]	; (80a1a0c <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a1982:	463b      	mov	r3, r7
 80a1984:	f7ff faec 	bl	80a0f60 <log_message>

          if (socket_handle_valid(d_->sock))
 80a1988:	6973      	ldr	r3, [r6, #20]
 80a198a:	6818      	ldr	r0, [r3, #0]
 80a198c:	f7ff fa08 	bl	80a0da0 <socket_handle_valid>
 80a1990:	2800      	cmp	r0, #0
 80a1992:	d036      	beq.n	80a1a02 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a1994:	4630      	mov	r0, r6
 80a1996:	f7ff ff6d 	bl	80a1874 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a199a:	2302      	movs	r3, #2
 80a199c:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a19a0:	0a2b      	lsrs	r3, r5, #8
 80a19a2:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a19a6:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a19a8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a19ac:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a19b0:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a19b2:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a19b6:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a19ba:	7963      	ldrb	r3, [r4, #5]
 80a19bc:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a19c0:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a19c4:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a19c8:	f7ff faba 	bl	80a0f40 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a19cc:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a19ce:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a19d0:	2210      	movs	r2, #16
 80a19d2:	a902      	add	r1, sp, #8
 80a19d4:	6818      	ldr	r0, [r3, #0]
 80a19d6:	f7ff f9f3 	bl	80a0dc0 <socket_connect>
 80a19da:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a19dc:	4628      	mov	r0, r5
 80a19de:	f7ff faaf 	bl	80a0f40 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a19e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a19e4:	6975      	ldr	r5, [r6, #20]
 80a19e6:	358c      	adds	r5, #140	; 0x8c
 80a19e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a19ea:	6823      	ldr	r3, [r4, #0]
 80a19ec:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a19ee:	f1b8 0f00 	cmp.w	r8, #0
 80a19f2:	d005      	beq.n	80a1a00 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a19f4:	6833      	ldr	r3, [r6, #0]
 80a19f6:	4630      	mov	r0, r6
 80a19f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a19fa:	4798      	blx	r3
 80a19fc:	4638      	mov	r0, r7
 80a19fe:	e000      	b.n	80a1a02 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a1a00:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a1a02:	b00a      	add	sp, #40	; 0x28
 80a1a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1a08:	080a5423 	.word	0x080a5423
 80a1a0c:	080a541c 	.word	0x080a541c

080a1a10 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1a10:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1a12:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1a14:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1a16:	6818      	ldr	r0, [r3, #0]
 80a1a18:	f7ff f9c2 	bl	80a0da0 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1a1c:	b908      	cbnz	r0, 80a1a22 <_ZN9TCPClient6statusEv+0x12>
 80a1a1e:	2000      	movs	r0, #0
 80a1a20:	bd10      	pop	{r4, pc}
 80a1a22:	6920      	ldr	r0, [r4, #16]
 80a1a24:	f7ff fcd8 	bl	80a13d8 <_ZN5spark12NetworkClass4fromEm>
 80a1a28:	6803      	ldr	r3, [r0, #0]
 80a1a2a:	68db      	ldr	r3, [r3, #12]
 80a1a2c:	4798      	blx	r3
 80a1a2e:	2800      	cmp	r0, #0
 80a1a30:	d0f5      	beq.n	80a1a1e <_ZN9TCPClient6statusEv+0xe>
 80a1a32:	6963      	ldr	r3, [r4, #20]
 80a1a34:	6818      	ldr	r0, [r3, #0]
 80a1a36:	f7ff f9ab 	bl	80a0d90 <socket_active_status>
 80a1a3a:	fab0 f080 	clz	r0, r0
 80a1a3e:	0940      	lsrs	r0, r0, #5
}
 80a1a40:	bd10      	pop	{r4, pc}

080a1a42 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a1a42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a1a46:	2500      	movs	r5, #0
 80a1a48:	6045      	str	r5, [r0, #4]
 80a1a4a:	4604      	mov	r4, r0
 80a1a4c:	460e      	mov	r6, r1
 80a1a4e:	4617      	mov	r7, r2
 80a1a50:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1a52:	f7ff ffdd 	bl	80a1a10 <_ZN9TCPClient6statusEv>
 80a1a56:	b160      	cbz	r0, 80a1a72 <_ZN9TCPClient5writeEPKhjm+0x30>
 80a1a58:	6960      	ldr	r0, [r4, #20]
 80a1a5a:	9501      	str	r5, [sp, #4]
 80a1a5c:	f8cd 8000 	str.w	r8, [sp]
 80a1a60:	462b      	mov	r3, r5
 80a1a62:	463a      	mov	r2, r7
 80a1a64:	4631      	mov	r1, r6
 80a1a66:	6800      	ldr	r0, [r0, #0]
 80a1a68:	f7ff f9da 	bl	80a0e20 <socket_send_ex>
    if (ret < 0) {
 80a1a6c:	2800      	cmp	r0, #0
 80a1a6e:	da03      	bge.n	80a1a78 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a1a70:	e001      	b.n	80a1a76 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1a76:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a1a78:	b002      	add	sp, #8
 80a1a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1a7e <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a1a7e:	b538      	push	{r3, r4, r5, lr}
 80a1a80:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1a82:	f7ff ffc5 	bl	80a1a10 <_ZN9TCPClient6statusEv>
 80a1a86:	bb00      	cbnz	r0, 80a1aca <_ZN9TCPClient9connectedEv+0x4c>
 80a1a88:	6963      	ldr	r3, [r4, #20]
 80a1a8a:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a1a8e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1a92:	4291      	cmp	r1, r2
 80a1a94:	d119      	bne.n	80a1aca <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1a96:	6818      	ldr	r0, [r3, #0]
 80a1a98:	f7ff f982 	bl	80a0da0 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a1a9c:	b128      	cbz	r0, 80a1aaa <_ZN9TCPClient9connectedEv+0x2c>
 80a1a9e:	6963      	ldr	r3, [r4, #20]
 80a1aa0:	6818      	ldr	r0, [r3, #0]
 80a1aa2:	f7ff f975 	bl	80a0d90 <socket_active_status>
 80a1aa6:	2801      	cmp	r0, #1
 80a1aa8:	d001      	beq.n	80a1aae <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1aaa:	2500      	movs	r5, #0
 80a1aac:	e00e      	b.n	80a1acc <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a1aae:	6823      	ldr	r3, [r4, #0]
 80a1ab0:	4620      	mov	r0, r4
 80a1ab2:	691b      	ldr	r3, [r3, #16]
 80a1ab4:	4798      	blx	r3
 80a1ab6:	2800      	cmp	r0, #0
 80a1ab8:	bf14      	ite	ne
 80a1aba:	2501      	movne	r5, #1
 80a1abc:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a1abe:	d105      	bne.n	80a1acc <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 80a1ac0:	6823      	ldr	r3, [r4, #0]
 80a1ac2:	4620      	mov	r0, r4
 80a1ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1ac6:	4798      	blx	r3
 80a1ac8:	e000      	b.n	80a1acc <_ZN9TCPClient9connectedEv+0x4e>
 80a1aca:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a1acc:	4628      	mov	r0, r5
 80a1ace:	bd38      	pop	{r3, r4, r5, pc}

080a1ad0 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a1ad0:	b508      	push	{r3, lr}
   return (status()!=0);
 80a1ad2:	f7ff ff9d 	bl	80a1a10 <_ZN9TCPClient6statusEv>
}
 80a1ad6:	3000      	adds	r0, #0
 80a1ad8:	bf18      	it	ne
 80a1ada:	2001      	movne	r0, #1
 80a1adc:	bd08      	pop	{r3, pc}

080a1ade <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a1ade:	b510      	push	{r4, lr}
 80a1ae0:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a1ae2:	2300      	movs	r3, #0
 80a1ae4:	6001      	str	r1, [r0, #0]
 80a1ae6:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a1aea:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a1aee:	3088      	adds	r0, #136	; 0x88
 80a1af0:	f7ff fbc0 	bl	80a1274 <_ZN9IPAddressC1Ev>
}
 80a1af4:	4620      	mov	r0, r4
 80a1af6:	bd10      	pop	{r4, pc}

080a1af8 <_ZN9TCPClientC1Em>:
 80a1af8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a1afc:	b570      	push	{r4, r5, r6, lr}
 80a1afe:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a1b00:	4a14      	ldr	r2, [pc, #80]	; (80a1b54 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1b02:	2300      	movs	r3, #0
 80a1b04:	6043      	str	r3, [r0, #4]
 80a1b06:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a1b08:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1b0a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a1b0c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1b0e:	20a0      	movs	r0, #160	; 0xa0
 80a1b10:	460e      	mov	r6, r1
 80a1b12:	f7fe fac2 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a1b16:	4605      	mov	r5, r0
 80a1b18:	b110      	cbz	r0, 80a1b20 <_ZN9TCPClientC1Em+0x28>
 80a1b1a:	4631      	mov	r1, r6
 80a1b1c:	f7ff ffdf 	bl	80a1ade <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1b20:	2014      	movs	r0, #20
 80a1b22:	f7fe faba 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a1b26:	4603      	mov	r3, r0
 80a1b28:	b128      	cbz	r0, 80a1b36 <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1b2a:	2201      	movs	r2, #1
 80a1b2c:	6042      	str	r2, [r0, #4]
 80a1b2e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a1b30:	4a09      	ldr	r2, [pc, #36]	; (80a1b58 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a1b32:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a1b34:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1b36:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a1b38:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1b3a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a1b3c:	b128      	cbz	r0, 80a1b4a <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1b3e:	6843      	ldr	r3, [r0, #4]
 80a1b40:	3b01      	subs	r3, #1
 80a1b42:	6043      	str	r3, [r0, #4]
 80a1b44:	b90b      	cbnz	r3, 80a1b4a <_ZN9TCPClientC1Em+0x52>
 80a1b46:	f7ff fe1a 	bl	80a177e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a1b4a:	4620      	mov	r0, r4
 80a1b4c:	f7ff fe92 	bl	80a1874 <_ZN9TCPClient12flush_bufferEv>
}
 80a1b50:	4620      	mov	r0, r4
 80a1b52:	bd70      	pop	{r4, r5, r6, pc}
 80a1b54:	080a53d8 	.word	0x080a53d8
 80a1b58:	080a53bc 	.word	0x080a53bc

080a1b5c <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a1b5c:	b510      	push	{r4, lr}
 80a1b5e:	4604      	mov	r4, r0
 80a1b60:	f7ff f956 	bl	80a0e10 <socket_handle_invalid>
 80a1b64:	4601      	mov	r1, r0
 80a1b66:	4620      	mov	r0, r4
 80a1b68:	f7ff ffc6 	bl	80a1af8 <_ZN9TCPClientC1Em>
{
}
 80a1b6c:	4620      	mov	r0, r4
 80a1b6e:	bd10      	pop	{r4, pc}

080a1b70 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a1b70:	b510      	push	{r4, lr}
 80a1b72:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a1b74:	6800      	ldr	r0, [r0, #0]
 80a1b76:	f7ff f913 	bl	80a0da0 <socket_handle_valid>
 80a1b7a:	b110      	cbz	r0, 80a1b82 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a1b7c:	6820      	ldr	r0, [r4, #0]
 80a1b7e:	f7ff f93f 	bl	80a0e00 <socket_close>
    }
}
 80a1b82:	4620      	mov	r0, r4
 80a1b84:	bd10      	pop	{r4, pc}

080a1b86 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a1b86:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a1b88:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a1b8a:	4620      	mov	r0, r4
 80a1b8c:	f7ff fff0 	bl	80a1b70 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a1b90:	b124      	cbz	r4, 80a1b9c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a1b92:	4620      	mov	r0, r4
 80a1b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1b98:	f7fe ba83 	b.w	80a00a2 <_ZdlPv>
 80a1b9c:	bd10      	pop	{r4, pc}
	...

080a1ba0 <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1ba4:	461f      	mov	r7, r3
    stop();
 80a1ba6:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1ba8:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a1baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1bac:	4606      	mov	r6, r0
 80a1bae:	460c      	mov	r4, r1
 80a1bb0:	4690      	mov	r8, r2
    stop();
 80a1bb2:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 80a1bb4:	4812      	ldr	r0, [pc, #72]	; (80a1c00 <_ZN9TCPClient7connectEPKctm+0x60>)
 80a1bb6:	f7ff fbc2 	bl	80a133e <_ZN5spark12NetworkClass5readyEv>
 80a1bba:	b1f0      	cbz	r0, 80a1bfa <_ZN9TCPClient7connectEPKctm+0x5a>
      {
        IPAddress ip_addr;
 80a1bbc:	a802      	add	r0, sp, #8
 80a1bbe:	f7ff fb59 	bl	80a1274 <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 80a1bc2:	4620      	mov	r0, r4
 80a1bc4:	f003 fa46 	bl	80a5054 <strlen>
 80a1bc8:	2300      	movs	r3, #0
 80a1bca:	9300      	str	r3, [sp, #0]
 80a1bcc:	b281      	uxth	r1, r0
 80a1bce:	463b      	mov	r3, r7
 80a1bd0:	aa03      	add	r2, sp, #12
 80a1bd2:	4620      	mov	r0, r4
 80a1bd4:	f7ff f9bc 	bl	80a0f50 <inet_gethostbyname>
 80a1bd8:	b978      	cbnz	r0, 80a1bfa <_ZN9TCPClient7connectEPKctm+0x5a>
        {
                return connect(ip_addr, port, nif);
 80a1bda:	6833      	ldr	r3, [r6, #0]
 80a1bdc:	ad09      	add	r5, sp, #36	; 0x24
 80a1bde:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a1be2:	4b08      	ldr	r3, [pc, #32]	; (80a1c04 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a1be4:	ac03      	add	r4, sp, #12
 80a1be6:	9308      	str	r3, [sp, #32]
 80a1be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1bec:	6823      	ldr	r3, [r4, #0]
 80a1bee:	4642      	mov	r2, r8
 80a1bf0:	702b      	strb	r3, [r5, #0]
 80a1bf2:	a908      	add	r1, sp, #32
 80a1bf4:	463b      	mov	r3, r7
 80a1bf6:	4630      	mov	r0, r6
 80a1bf8:	47c8      	blx	r9
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 80a1bfa:	b00f      	add	sp, #60	; 0x3c
 80a1bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1c00:	20000548 	.word	0x20000548
 80a1c04:	080a5280 	.word	0x080a5280

080a1c08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1c08:	4b02      	ldr	r3, [pc, #8]	; (80a1c14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1c0a:	681a      	ldr	r2, [r3, #0]
 80a1c0c:	4b02      	ldr	r3, [pc, #8]	; (80a1c18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1c0e:	601a      	str	r2, [r3, #0]
 80a1c10:	4770      	bx	lr
 80a1c12:	bf00      	nop
 80a1c14:	20000300 	.word	0x20000300
 80a1c18:	20000568 	.word	0x20000568

080a1c1c <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a1c1c:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a1c1e:	6804      	ldr	r4, [r0, #0]
 80a1c20:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a1c22:	46a4      	mov	ip, r4
    }
 80a1c24:	bc10      	pop	{r4}
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a1c26:	4760      	bx	ip

080a1c28 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a1c28:	6803      	ldr	r3, [r0, #0]
 80a1c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1c2c:	4718      	bx	r3

080a1c2e <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a1c2e:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a1c30:	4770      	bx	lr

080a1c32 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a1c32:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a1c34:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a1c36:	1a10      	subs	r0, r2, r0
 80a1c38:	4770      	bx	lr

080a1c3a <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1c3a:	b513      	push	{r0, r1, r4, lr}
 80a1c3c:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a1c3e:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1c40:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a1c44:	68d4      	ldr	r4, [r2, #12]
 80a1c46:	4619      	mov	r1, r3
 80a1c48:	2201      	movs	r2, #1
 80a1c4a:	47a0      	blx	r4
}
 80a1c4c:	b002      	add	sp, #8
 80a1c4e:	bd10      	pop	{r4, pc}

080a1c50 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a1c50:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a1c52:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a1c54:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a1c56:	691b      	ldr	r3, [r3, #16]
 80a1c58:	4798      	blx	r3
 80a1c5a:	b128      	cbz	r0, 80a1c68 <_ZN3UDP4readEv+0x18>
 80a1c5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1c5e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1c60:	1c59      	adds	r1, r3, #1
 80a1c62:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a1c64:	5cd0      	ldrb	r0, [r2, r3]
 80a1c66:	bd10      	pop	{r4, pc}
 80a1c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1c6c:	bd10      	pop	{r4, pc}

080a1c6e <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a1c6e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a1c70:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a1c72:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a1c74:	691b      	ldr	r3, [r3, #16]
 80a1c76:	4798      	blx	r3
 80a1c78:	b118      	cbz	r0, 80a1c82 <_ZN3UDP4peekEv+0x14>
 80a1c7a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1c7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1c7e:	5cd0      	ldrb	r0, [r2, r3]
 80a1c80:	bd10      	pop	{r4, pc}
 80a1c82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1c86:	bd10      	pop	{r4, pc}

080a1c88 <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a1c88:	4770      	bx	lr

080a1c8a <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a1c8a:	4603      	mov	r3, r0
 80a1c8c:	4608      	mov	r0, r1
 80a1c8e:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a1c90:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a1c92:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1c94:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a1c96:	6803      	ldr	r3, [r0, #0]
 80a1c98:	1a52      	subs	r2, r2, r1
 80a1c9a:	68db      	ldr	r3, [r3, #12]
 80a1c9c:	4421      	add	r1, r4
}
 80a1c9e:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a1ca0:	4718      	bx	r3

080a1ca2 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a1ca2:	f1a0 0010 	sub.w	r0, r0, #16
 80a1ca6:	f7ff bff0 	b.w	80a1c8a <_ZNK3UDP7printToER5Print>

080a1caa <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1caa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1cac:	4605      	mov	r5, r0
    bool bound = 0;
    if(Network.from(nif).ready())
 80a1cae:	4610      	mov	r0, r2
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1cb0:	460f      	mov	r7, r1
 80a1cb2:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a1cb4:	f7ff fb90 	bl	80a13d8 <_ZN5spark12NetworkClass4fromEm>
 80a1cb8:	6803      	ldr	r3, [r0, #0]
 80a1cba:	68db      	ldr	r3, [r3, #12]
 80a1cbc:	4798      	blx	r3
 80a1cbe:	b1b8      	cbz	r0, 80a1cf0 <_ZN3UDP5beginEtm+0x46>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a1cc0:	2102      	movs	r1, #2
 80a1cc2:	463b      	mov	r3, r7
 80a1cc4:	2211      	movs	r2, #17
 80a1cc6:	4608      	mov	r0, r1
 80a1cc8:	9600      	str	r6, [sp, #0]
 80a1cca:	f7ff f871 	bl	80a0db0 <socket_create>
 80a1cce:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a1cd0:	f7ff f866 	bl	80a0da0 <socket_handle_valid>
 80a1cd4:	4604      	mov	r4, r0
 80a1cd6:	b130      	cbz	r0, 80a1ce6 <_ZN3UDP5beginEtm+0x3c>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1cd8:	2300      	movs	r3, #0
 80a1cda:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a1cdc:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a1cde:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a1ce0:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a1ce2:	2001      	movs	r0, #1
 80a1ce4:	e004      	b.n	80a1cf0 <_ZN3UDP5beginEtm+0x46>
        }
        else {
            stop();
 80a1ce6:	682b      	ldr	r3, [r5, #0]
 80a1ce8:	4628      	mov	r0, r5
 80a1cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1cec:	4798      	blx	r3
            bound = false;
 80a1cee:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a1cf0:	b003      	add	sp, #12
 80a1cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1cf4 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a1cf4:	b538      	push	{r3, r4, r5, lr}
 80a1cf6:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a1cf8:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a1cfa:	f7ff f889 	bl	80a0e10 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a1cfe:	4285      	cmp	r5, r0
 80a1d00:	d002      	beq.n	80a1d08 <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a1d02:	6960      	ldr	r0, [r4, #20]
 80a1d04:	f7ff f87c 	bl	80a0e00 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a1d08:	f7ff f882 	bl	80a0e10 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1d0c:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a1d0e:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1d10:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1d12:	8723      	strh	r3, [r4, #56]	; 0x38
 80a1d14:	bd38      	pop	{r3, r4, r5, pc}

080a1d16 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a1d16:	b530      	push	{r4, r5, lr}
 80a1d18:	b087      	sub	sp, #28
 80a1d1a:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a1d1e:	2502      	movs	r5, #2
 80a1d20:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a1d24:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1d28:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1d2a:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1d2c:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1d30:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a1d34:	799c      	ldrb	r4, [r3, #6]
 80a1d36:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1d3a:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1d3c:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1d3e:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1d42:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a1d46:	2310      	movs	r3, #16
 80a1d48:	9301      	str	r3, [sp, #4]
 80a1d4a:	ab02      	add	r3, sp, #8
 80a1d4c:	9300      	str	r3, [sp, #0]
 80a1d4e:	6940      	ldr	r0, [r0, #20]
 80a1d50:	2300      	movs	r3, #0
 80a1d52:	f7ff f84d 	bl	80a0df0 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a1d56:	b007      	add	sp, #28
 80a1d58:	bd30      	pop	{r4, r5, pc}

080a1d5a <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a1d5a:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1d5c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a1d5e:	4605      	mov	r5, r0
 80a1d60:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1d62:	b113      	cbz	r3, 80a1d6a <_ZN3UDP5writeEPKhj+0x10>
 80a1d64:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a1d66:	1a24      	subs	r4, r4, r0
 80a1d68:	e000      	b.n	80a1d6c <_ZN3UDP5writeEPKhj+0x12>
 80a1d6a:	461c      	mov	r4, r3
 80a1d6c:	4294      	cmp	r4, r2
 80a1d6e:	bf28      	it	cs
 80a1d70:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a1d72:	4418      	add	r0, r3
 80a1d74:	4622      	mov	r2, r4
 80a1d76:	f003 f931 	bl	80a4fdc <memcpy>
    _offset += size;
 80a1d7a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a1d7c:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a1d7e:	4423      	add	r3, r4
 80a1d80:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a1d82:	bd38      	pop	{r3, r4, r5, pc}

080a1d84 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1d84:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a1d86:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1d88:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a1d8a:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a1d8c:	460e      	mov	r6, r1
 80a1d8e:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a1d90:	4798      	blx	r3
 80a1d92:	b188      	cbz	r0, 80a1db8 <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a1d94:	6823      	ldr	r3, [r4, #0]
 80a1d96:	4620      	mov	r0, r4
 80a1d98:	691b      	ldr	r3, [r3, #16]
 80a1d9a:	4798      	blx	r3
 80a1d9c:	4285      	cmp	r5, r0
 80a1d9e:	bfa8      	it	ge
 80a1da0:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a1da2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1da4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a1da6:	462a      	mov	r2, r5
 80a1da8:	4419      	add	r1, r3
 80a1daa:	4630      	mov	r0, r6
 80a1dac:	f003 f916 	bl	80a4fdc <memcpy>
      _offset += read;
 80a1db0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1db2:	442b      	add	r3, r5
 80a1db4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a1db6:	e001      	b.n	80a1dbc <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a1db8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a1dbc:	4628      	mov	r0, r5
 80a1dbe:	bd70      	pop	{r4, r5, r6, pc}

080a1dc0 <_ZN3UDP13receivePacketEPhjm>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a1dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1dc2:	4604      	mov	r4, r0
 80a1dc4:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a1dc6:	6c40      	ldr	r0, [r0, #68]	; 0x44
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
 80a1dc8:	460d      	mov	r5, r1
 80a1dca:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a1dcc:	f7ff fb04 	bl	80a13d8 <_ZN5spark12NetworkClass4fromEm>
 80a1dd0:	6803      	ldr	r3, [r0, #0]
 80a1dd2:	68db      	ldr	r3, [r3, #12]
 80a1dd4:	4798      	blx	r3
 80a1dd6:	b310      	cbz	r0, 80a1e1e <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a1dd8:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a1dda:	f7ff f819 	bl	80a0e10 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a1dde:	4287      	cmp	r7, r0
 80a1de0:	d01d      	beq.n	80a1e1e <_ZN3UDP13receivePacketEPhjm+0x5e>
 80a1de2:	b1e5      	cbz	r5, 80a1e1e <_ZN3UDP13receivePacketEPhjm+0x5e>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a1de4:	ab08      	add	r3, sp, #32
 80a1de6:	2210      	movs	r2, #16
 80a1de8:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a1dec:	9301      	str	r3, [sp, #4]
 80a1dee:	eb0d 0302 	add.w	r3, sp, r2
 80a1df2:	9300      	str	r3, [sp, #0]
 80a1df4:	4629      	mov	r1, r5
 80a1df6:	2300      	movs	r3, #0
 80a1df8:	4632      	mov	r2, r6
 80a1dfa:	6960      	ldr	r0, [r4, #20]
 80a1dfc:	f7fe fff0 	bl	80a0de0 <socket_receivefrom>
        if (ret >= 0)
 80a1e00:	1e05      	subs	r5, r0, #0
 80a1e02:	db0e      	blt.n	80a1e22 <_ZN3UDP13receivePacketEPhjm+0x62>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a1e04:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a1e08:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a1e0c:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a1e0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1e12:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a1e14:	f104 001c 	add.w	r0, r4, #28
 80a1e18:	f7ff fa6e 	bl	80a12f8 <_ZN9IPAddressaSEPKh>
 80a1e1c:	e001      	b.n	80a1e22 <_ZN3UDP13receivePacketEPhjm+0x62>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout)
{
    int ret = -1;
 80a1e1e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a1e22:	4628      	mov	r0, r5
 80a1e24:	b009      	add	sp, #36	; 0x24
 80a1e26:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1e28 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a1e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1e2c:	4606      	mov	r6, r0
 80a1e2e:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a1e30:	6c40      	ldr	r0, [r0, #68]	; 0x44

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a1e32:	460d      	mov	r5, r1
 80a1e34:	4690      	mov	r8, r2
    if(Network.from(_nif).ready())
 80a1e36:	f7ff facf 	bl	80a13d8 <_ZN5spark12NetworkClass4fromEm>
 80a1e3a:	6803      	ldr	r3, [r0, #0]
 80a1e3c:	68db      	ldr	r3, [r3, #12]
 80a1e3e:	4798      	blx	r3
 80a1e40:	b1f8      	cbz	r0, 80a1e82 <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a1e42:	4628      	mov	r0, r5
 80a1e44:	f003 f906 	bl	80a5054 <strlen>
 80a1e48:	2400      	movs	r4, #0
 80a1e4a:	b281      	uxth	r1, r0
 80a1e4c:	9400      	str	r4, [sp, #0]
 80a1e4e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a1e50:	aa03      	add	r2, sp, #12
 80a1e52:	4628      	mov	r0, r5
 80a1e54:	f7ff f87c 	bl	80a0f50 <inet_gethostbyname>
 80a1e58:	b990      	cbnz	r0, 80a1e80 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a1e5a:	a903      	add	r1, sp, #12
 80a1e5c:	a808      	add	r0, sp, #32
 80a1e5e:	f7ff fa17 	bl	80a1290 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a1e62:	6833      	ldr	r3, [r6, #0]
 80a1e64:	ac0f      	add	r4, sp, #60	; 0x3c
 80a1e66:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a1e68:	4b07      	ldr	r3, [pc, #28]	; (80a1e88 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a1e6a:	ad09      	add	r5, sp, #36	; 0x24
 80a1e6c:	930e      	str	r3, [sp, #56]	; 0x38
 80a1e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1e72:	682b      	ldr	r3, [r5, #0]
 80a1e74:	4642      	mov	r2, r8
 80a1e76:	7023      	strb	r3, [r4, #0]
 80a1e78:	a90e      	add	r1, sp, #56	; 0x38
 80a1e7a:	4630      	mov	r0, r6
 80a1e7c:	47b8      	blx	r7
 80a1e7e:	e000      	b.n	80a1e82 <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a1e80:	4620      	mov	r0, r4
}
 80a1e82:	b014      	add	sp, #80	; 0x50
 80a1e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1e88:	080a5280 	.word	0x080a5280

080a1e8c <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
 80a1e8c:	b570      	push	{r4, r5, r6, lr}
 80a1e8e:	4604      	mov	r4, r0
 80a1e90:	4606      	mov	r6, r0
 80a1e92:	4b05      	ldr	r3, [pc, #20]	; (80a1ea8 <_ZN3UDP8remoteIPEv+0x1c>)
 80a1e94:	f101 0520 	add.w	r5, r1, #32
 80a1e98:	f844 3b04 	str.w	r3, [r4], #4
 80a1e9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1ea0:	682b      	ldr	r3, [r5, #0]
 80a1ea2:	4630      	mov	r0, r6
 80a1ea4:	7023      	strb	r3, [r4, #0]
 80a1ea6:	bd70      	pop	{r4, r5, r6, pc}
 80a1ea8:	080a5280 	.word	0x080a5280

080a1eac <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a1eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1eae:	4694      	mov	ip, r2
 80a1eb0:	468e      	mov	lr, r1
 80a1eb2:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a1eb4:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a1eb6:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a1eb8:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a1eba:	4a09      	ldr	r2, [pc, #36]	; (80a1ee0 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a1ebc:	ac03      	add	r4, sp, #12
 80a1ebe:	1d1d      	adds	r5, r3, #4
 80a1ec0:	9202      	str	r2, [sp, #8]
 80a1ec2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1ec6:	682b      	ldr	r3, [r5, #0]
 80a1ec8:	4662      	mov	r2, ip
 80a1eca:	7023      	strb	r3, [r4, #0]
 80a1ecc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a1ed0:	4671      	mov	r1, lr
 80a1ed2:	9300      	str	r3, [sp, #0]
 80a1ed4:	4630      	mov	r0, r6
 80a1ed6:	ab02      	add	r3, sp, #8
 80a1ed8:	47b8      	blx	r7
    }
 80a1eda:	b009      	add	sp, #36	; 0x24
 80a1edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1ede:	bf00      	nop
 80a1ee0:	080a5280 	.word	0x080a5280

080a1ee4 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a1ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1ee6:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a1ee8:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a1eea:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a1eec:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a1eee:	4b0d      	ldr	r3, [pc, #52]	; (80a1f24 <_ZN3UDP9endPacketEv+0x40>)
 80a1ef0:	ad03      	add	r5, sp, #12
 80a1ef2:	f100 0620 	add.w	r6, r0, #32
 80a1ef6:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a1efa:	9302      	str	r3, [sp, #8]
 80a1efc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a1efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1f00:	6833      	ldr	r3, [r6, #0]
 80a1f02:	4672      	mov	r2, lr
 80a1f04:	702b      	strb	r3, [r5, #0]
 80a1f06:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a1f08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a1f0a:	9300      	str	r3, [sp, #0]
 80a1f0c:	4620      	mov	r0, r4
 80a1f0e:	ab02      	add	r3, sp, #8
 80a1f10:	47b8      	blx	r7
 80a1f12:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a1f14:	6823      	ldr	r3, [r4, #0]
 80a1f16:	4620      	mov	r0, r4
 80a1f18:	69db      	ldr	r3, [r3, #28]
 80a1f1a:	4798      	blx	r3
    return result;
}
 80a1f1c:	4628      	mov	r0, r5
 80a1f1e:	b009      	add	sp, #36	; 0x24
 80a1f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1f22:	bf00      	nop
 80a1f24:	080a5280 	.word	0x080a5280

080a1f28 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a1f28:	b538      	push	{r3, r4, r5, lr}
 80a1f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1f2e:	6083      	str	r3, [r0, #8]
 80a1f30:	4b0b      	ldr	r3, [pc, #44]	; (80a1f60 <_ZN3UDPC1Ev+0x38>)
 80a1f32:	2500      	movs	r5, #0
 80a1f34:	f103 0208 	add.w	r2, r3, #8
 80a1f38:	336c      	adds	r3, #108	; 0x6c
 80a1f3a:	6002      	str	r2, [r0, #0]
 80a1f3c:	6103      	str	r3, [r0, #16]
 80a1f3e:	6045      	str	r5, [r0, #4]
 80a1f40:	4604      	mov	r4, r0
 80a1f42:	f7fe ff65 	bl	80a0e10 <socket_handle_invalid>
 80a1f46:	6160      	str	r0, [r4, #20]
 80a1f48:	f104 001c 	add.w	r0, r4, #28
 80a1f4c:	f7ff f992 	bl	80a1274 <_ZN9IPAddressC1Ev>
 80a1f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a1f54:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a1f56:	8725      	strh	r5, [r4, #56]	; 0x38
 80a1f58:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a1f5a:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a1f5c:	4620      	mov	r0, r4
 80a1f5e:	bd38      	pop	{r3, r4, r5, pc}
 80a1f60:	080a5460 	.word	0x080a5460

080a1f64 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a1f64:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a1f66:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a1f6a:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a1f6c:	b11b      	cbz	r3, 80a1f76 <_ZN3UDP13releaseBufferEv+0x12>
 80a1f6e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a1f70:	b108      	cbz	r0, 80a1f76 <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
 80a1f72:	f7fe f896 	bl	80a00a2 <_ZdlPv>
    }
    _buffer = NULL;
 80a1f76:	2300      	movs	r3, #0
 80a1f78:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a1f7a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a1f7e:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1f80:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1f82:	8723      	strh	r3, [r4, #56]	; 0x38
 80a1f84:	bd10      	pop	{r4, pc}

080a1f86 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a1f86:	b570      	push	{r4, r5, r6, lr}
 80a1f88:	4604      	mov	r4, r0
 80a1f8a:	4616      	mov	r6, r2
 80a1f8c:	460d      	mov	r5, r1
    releaseBuffer();
 80a1f8e:	f7ff ffe9 	bl	80a1f64 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a1f92:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a1f94:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a1f96:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a1f98:	b93e      	cbnz	r6, 80a1faa <_ZN3UDP9setBufferEjPh+0x24>
 80a1f9a:	b135      	cbz	r5, 80a1faa <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a1f9c:	4628      	mov	r0, r5
 80a1f9e:	f7fe f87e 	bl	80a009e <_Znaj>
        _buffer_allocated = true;
 80a1fa2:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a1fa4:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a1fa6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a1faa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a1fac:	b103      	cbz	r3, 80a1fb0 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a1fae:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a1fb0:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a1fb2:	3000      	adds	r0, #0
 80a1fb4:	bf18      	it	ne
 80a1fb6:	2001      	movne	r0, #1
 80a1fb8:	bd70      	pop	{r4, r5, r6, pc}

080a1fba <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a1fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1fbc:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a1fbe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a1fc0:	4605      	mov	r5, r0
 80a1fc2:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a1fc4:	b91a      	cbnz	r2, 80a1fce <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a1fc6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a1fc8:	b109      	cbz	r1, 80a1fce <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a1fca:	f7ff ffdc 	bl	80a1f86 <_ZN3UDP9setBufferEjPh>
 80a1fce:	f105 0620 	add.w	r6, r5, #32
 80a1fd2:	3404      	adds	r4, #4
 80a1fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1fd6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a1fd8:	6823      	ldr	r3, [r4, #0]
 80a1fda:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1fdc:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a1fde:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1fe0:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a1fe2:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a1fe4:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a1fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1fe8 <_ZN3UDP11parsePacketEm>:
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a1fe8:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a1fea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout)
{
 80a1fec:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a1fee:	b91a      	cbnz	r2, 80a1ff8 <_ZN3UDP11parsePacketEm+0x10>
 80a1ff0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a1ff2:	b109      	cbz	r1, 80a1ff8 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
 80a1ff4:	f7ff ffc7 	bl	80a1f86 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a1ff8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1ffa:	2300      	movs	r3, #0
 80a1ffc:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1ffe:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a2000:	b141      	cbz	r1, 80a2014 <_ZN3UDP11parsePacketEm+0x2c>
 80a2002:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a2004:	b132      	cbz	r2, 80a2014 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a2006:	6820      	ldr	r0, [r4, #0]
 80a2008:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80a200a:	4620      	mov	r0, r4
 80a200c:	47a8      	blx	r5
        if (result>0) {
 80a200e:	2800      	cmp	r0, #0
            _total = result;
 80a2010:	bfc8      	it	gt
 80a2012:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a2014:	6823      	ldr	r3, [r4, #0]
 80a2016:	4620      	mov	r0, r4
}
 80a2018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a201c:	691b      	ldr	r3, [r3, #16]
 80a201e:	4718      	bx	r3

080a2020 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2020:	4770      	bx	lr

080a2022 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2022:	7441      	strb	r1, [r0, #17]
 80a2024:	4770      	bx	lr

080a2026 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a2026:	7c00      	ldrb	r0, [r0, #16]
 80a2028:	f7fe bf4a 	b.w	80a0ec0 <HAL_USART_Available_Data_For_Write>

080a202c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a202c:	7c00      	ldrb	r0, [r0, #16]
 80a202e:	f7fe bf1f 	b.w	80a0e70 <HAL_USART_Available_Data>

080a2032 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a2032:	7c00      	ldrb	r0, [r0, #16]
 80a2034:	f7fe bf2c 	b.w	80a0e90 <HAL_USART_Peek_Data>

080a2038 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a2038:	7c00      	ldrb	r0, [r0, #16]
 80a203a:	f7fe bf21 	b.w	80a0e80 <HAL_USART_Read_Data>

080a203e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a203e:	7c00      	ldrb	r0, [r0, #16]
 80a2040:	f7fe bf2e 	b.w	80a0ea0 <HAL_USART_Flush_Data>

080a2044 <_ZN11USARTSerialD0Ev>:
 80a2044:	b510      	push	{r4, lr}
 80a2046:	4604      	mov	r4, r0
 80a2048:	f7fe f82b 	bl	80a00a2 <_ZdlPv>
 80a204c:	4620      	mov	r0, r4
 80a204e:	bd10      	pop	{r4, pc}

080a2050 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2050:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2052:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2054:	4604      	mov	r4, r0
 80a2056:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2058:	b925      	cbnz	r5, 80a2064 <_ZN11USARTSerial5writeEh+0x14>
 80a205a:	7c00      	ldrb	r0, [r0, #16]
 80a205c:	f7fe ff30 	bl	80a0ec0 <HAL_USART_Available_Data_For_Write>
 80a2060:	2800      	cmp	r0, #0
 80a2062:	dd05      	ble.n	80a2070 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2064:	4631      	mov	r1, r6
 80a2066:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a206c:	f7fe bef8 	b.w	80a0e60 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2070:	4628      	mov	r0, r5
 80a2072:	bd70      	pop	{r4, r5, r6, pc}

080a2074 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2074:	b510      	push	{r4, lr}
 80a2076:	4604      	mov	r4, r0
 80a2078:	4608      	mov	r0, r1
 80a207a:	4611      	mov	r1, r2
 80a207c:	2200      	movs	r2, #0
 80a207e:	6062      	str	r2, [r4, #4]
 80a2080:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2084:	60a2      	str	r2, [r4, #8]
 80a2086:	4a05      	ldr	r2, [pc, #20]	; (80a209c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2088:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a208a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a208c:	2201      	movs	r2, #1
 80a208e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2090:	461a      	mov	r2, r3
 80a2092:	f7fe fedd 	bl	80a0e50 <HAL_USART_Init>
}
 80a2096:	4620      	mov	r0, r4
 80a2098:	bd10      	pop	{r4, pc}
 80a209a:	bf00      	nop
 80a209c:	080a54d8 	.word	0x080a54d8

080a20a0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a20a0:	7c00      	ldrb	r0, [r0, #16]
 80a20a2:	f7fe bf05 	b.w	80a0eb0 <HAL_USART_Is_Enabled>
	...

080a20a8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a20a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a20aa:	4c19      	ldr	r4, [pc, #100]	; (80a2110 <_Z22__fetch_global_Serial1v+0x68>)
 80a20ac:	6825      	ldr	r5, [r4, #0]
 80a20ae:	b94d      	cbnz	r5, 80a20c4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a20b0:	2084      	movs	r0, #132	; 0x84
 80a20b2:	f7fd fff2 	bl	80a009a <_Znwj>
 80a20b6:	4606      	mov	r6, r0
 80a20b8:	b118      	cbz	r0, 80a20c2 <_Z22__fetch_global_Serial1v+0x1a>
 80a20ba:	2284      	movs	r2, #132	; 0x84
 80a20bc:	4629      	mov	r1, r5
 80a20be:	f002 ff98 	bl	80a4ff2 <memset>
 80a20c2:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a20c4:	4d13      	ldr	r5, [pc, #76]	; (80a2114 <_Z22__fetch_global_Serial1v+0x6c>)
 80a20c6:	682e      	ldr	r6, [r5, #0]
 80a20c8:	b94e      	cbnz	r6, 80a20de <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a20ca:	2084      	movs	r0, #132	; 0x84
 80a20cc:	f7fd ffe5 	bl	80a009a <_Znwj>
 80a20d0:	4607      	mov	r7, r0
 80a20d2:	b118      	cbz	r0, 80a20dc <_Z22__fetch_global_Serial1v+0x34>
 80a20d4:	2284      	movs	r2, #132	; 0x84
 80a20d6:	4631      	mov	r1, r6
 80a20d8:	f002 ff8b 	bl	80a4ff2 <memset>
 80a20dc:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a20de:	4f0e      	ldr	r7, [pc, #56]	; (80a2118 <_Z22__fetch_global_Serial1v+0x70>)
 80a20e0:	6839      	ldr	r1, [r7, #0]
 80a20e2:	f011 0601 	ands.w	r6, r1, #1
 80a20e6:	d111      	bne.n	80a210c <_Z22__fetch_global_Serial1v+0x64>
 80a20e8:	4638      	mov	r0, r7
 80a20ea:	f7fd ffdc 	bl	80a00a6 <__cxa_guard_acquire>
 80a20ee:	b168      	cbz	r0, 80a210c <_Z22__fetch_global_Serial1v+0x64>
 80a20f0:	6822      	ldr	r2, [r4, #0]
 80a20f2:	4631      	mov	r1, r6
 80a20f4:	682b      	ldr	r3, [r5, #0]
 80a20f6:	4809      	ldr	r0, [pc, #36]	; (80a211c <_Z22__fetch_global_Serial1v+0x74>)
 80a20f8:	f7ff ffbc 	bl	80a2074 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a20fc:	4638      	mov	r0, r7
 80a20fe:	f7fd ffd7 	bl	80a00b0 <__cxa_guard_release>
 80a2102:	4a07      	ldr	r2, [pc, #28]	; (80a2120 <_Z22__fetch_global_Serial1v+0x78>)
 80a2104:	4907      	ldr	r1, [pc, #28]	; (80a2124 <_Z22__fetch_global_Serial1v+0x7c>)
 80a2106:	4805      	ldr	r0, [pc, #20]	; (80a211c <_Z22__fetch_global_Serial1v+0x74>)
 80a2108:	f000 fa50 	bl	80a25ac <__aeabi_atexit>
#endif
	return serial1;
}
 80a210c:	4803      	ldr	r0, [pc, #12]	; (80a211c <_Z22__fetch_global_Serial1v+0x74>)
 80a210e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2110:	20000588 	.word	0x20000588
 80a2114:	20000580 	.word	0x20000580
 80a2118:	20000584 	.word	0x20000584
 80a211c:	2000056c 	.word	0x2000056c
 80a2120:	2000036c 	.word	0x2000036c
 80a2124:	080a2021 	.word	0x080a2021

080a2128 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2128:	7441      	strb	r1, [r0, #17]
 80a212a:	4770      	bx	lr

080a212c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a212c:	4770      	bx	lr

080a212e <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a212e:	2100      	movs	r1, #0
 80a2130:	7c00      	ldrb	r0, [r0, #16]
 80a2132:	f7fe beed 	b.w	80a0f10 <HAL_USB_USART_Receive_Data>

080a2136 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a2136:	2101      	movs	r1, #1
 80a2138:	7c00      	ldrb	r0, [r0, #16]
 80a213a:	f7fe bee9 	b.w	80a0f10 <HAL_USB_USART_Receive_Data>

080a213e <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a213e:	7c00      	ldrb	r0, [r0, #16]
 80a2140:	f7fe bede 	b.w	80a0f00 <HAL_USB_USART_Available_Data_For_Write>

080a2144 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a2144:	7c00      	ldrb	r0, [r0, #16]
 80a2146:	f7fe bed3 	b.w	80a0ef0 <HAL_USB_USART_Available_Data>

080a214a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a214a:	b538      	push	{r3, r4, r5, lr}
 80a214c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a214e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a2150:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2152:	f7fe fed5 	bl	80a0f00 <HAL_USB_USART_Available_Data_For_Write>
 80a2156:	2800      	cmp	r0, #0
 80a2158:	dc01      	bgt.n	80a215e <_ZN9USBSerial5writeEh+0x14>
 80a215a:	7c60      	ldrb	r0, [r4, #17]
 80a215c:	b120      	cbz	r0, 80a2168 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a215e:	4629      	mov	r1, r5
 80a2160:	7c20      	ldrb	r0, [r4, #16]
 80a2162:	f7fe fedd 	bl	80a0f20 <HAL_USB_USART_Send_Data>
    return 1;
 80a2166:	2001      	movs	r0, #1
  }
  return 0;
}
 80a2168:	bd38      	pop	{r3, r4, r5, pc}

080a216a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a216a:	7c00      	ldrb	r0, [r0, #16]
 80a216c:	f7fe bee0 	b.w	80a0f30 <HAL_USB_USART_Flush_Data>

080a2170 <_ZN9USBSerialD0Ev>:
 80a2170:	b510      	push	{r4, lr}
 80a2172:	4604      	mov	r4, r0
 80a2174:	f7fd ff95 	bl	80a00a2 <_ZdlPv>
 80a2178:	4620      	mov	r0, r4
 80a217a:	bd10      	pop	{r4, pc}

080a217c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a217c:	b510      	push	{r4, lr}
 80a217e:	4604      	mov	r4, r0
 80a2180:	2300      	movs	r3, #0
 80a2182:	6063      	str	r3, [r4, #4]
 80a2184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2188:	60a3      	str	r3, [r4, #8]
 80a218a:	4b05      	ldr	r3, [pc, #20]	; (80a21a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a218c:	4608      	mov	r0, r1
 80a218e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2190:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2192:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2194:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2196:	4611      	mov	r1, r2
 80a2198:	f7fe fe9a 	bl	80a0ed0 <HAL_USB_USART_Init>
}
 80a219c:	4620      	mov	r0, r4
 80a219e:	bd10      	pop	{r4, pc}
 80a21a0:	080a5508 	.word	0x080a5508

080a21a4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a21a4:	2200      	movs	r2, #0
 80a21a6:	7c00      	ldrb	r0, [r0, #16]
 80a21a8:	f7fe be9a 	b.w	80a0ee0 <HAL_USB_USART_Begin>

080a21ac <_Z19acquireSerialBufferv>:
 80a21ac:	b510      	push	{r4, lr}
 80a21ae:	4604      	mov	r4, r0
 80a21b0:	2214      	movs	r2, #20
 80a21b2:	2100      	movs	r1, #0
 80a21b4:	f002 ff1d 	bl	80a4ff2 <memset>
 80a21b8:	4620      	mov	r0, r4
 80a21ba:	bd10      	pop	{r4, pc}

080a21bc <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a21bc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a21be:	4d0e      	ldr	r5, [pc, #56]	; (80a21f8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a21c0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a21c2:	a801      	add	r0, sp, #4
 80a21c4:	f7ff fff2 	bl	80a21ac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a21c8:	6829      	ldr	r1, [r5, #0]
 80a21ca:	f011 0401 	ands.w	r4, r1, #1
 80a21ce:	d110      	bne.n	80a21f2 <_Z16_fetch_usbserialv+0x36>
 80a21d0:	4628      	mov	r0, r5
 80a21d2:	f7fd ff68 	bl	80a00a6 <__cxa_guard_acquire>
 80a21d6:	b160      	cbz	r0, 80a21f2 <_Z16_fetch_usbserialv+0x36>
 80a21d8:	aa01      	add	r2, sp, #4
 80a21da:	4621      	mov	r1, r4
 80a21dc:	4807      	ldr	r0, [pc, #28]	; (80a21fc <_Z16_fetch_usbserialv+0x40>)
 80a21de:	f7ff ffcd 	bl	80a217c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a21e2:	4628      	mov	r0, r5
 80a21e4:	f7fd ff64 	bl	80a00b0 <__cxa_guard_release>
 80a21e8:	4a05      	ldr	r2, [pc, #20]	; (80a2200 <_Z16_fetch_usbserialv+0x44>)
 80a21ea:	4906      	ldr	r1, [pc, #24]	; (80a2204 <_Z16_fetch_usbserialv+0x48>)
 80a21ec:	4803      	ldr	r0, [pc, #12]	; (80a21fc <_Z16_fetch_usbserialv+0x40>)
 80a21ee:	f000 f9dd 	bl	80a25ac <__aeabi_atexit>
	return _usbserial;
}
 80a21f2:	4802      	ldr	r0, [pc, #8]	; (80a21fc <_Z16_fetch_usbserialv+0x40>)
 80a21f4:	b007      	add	sp, #28
 80a21f6:	bd30      	pop	{r4, r5, pc}
 80a21f8:	2000058c 	.word	0x2000058c
 80a21fc:	20000594 	.word	0x20000594
 80a2200:	2000036c 	.word	0x2000036c
 80a2204:	080a212d 	.word	0x080a212d

080a2208 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2208:	b510      	push	{r4, lr}
 80a220a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a220c:	2214      	movs	r2, #20
 80a220e:	2100      	movs	r1, #0
 80a2210:	f002 feef 	bl	80a4ff2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2214:	4620      	mov	r0, r4
 80a2216:	bd10      	pop	{r4, pc}

080a2218 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2218:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a221a:	4c0e      	ldr	r4, [pc, #56]	; (80a2254 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a221c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a221e:	a801      	add	r0, sp, #4
 80a2220:	f7ff fff2 	bl	80a2208 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2224:	6823      	ldr	r3, [r4, #0]
 80a2226:	07db      	lsls	r3, r3, #31
 80a2228:	d410      	bmi.n	80a224c <_Z17_fetch_usbserial1v+0x34>
 80a222a:	4620      	mov	r0, r4
 80a222c:	f7fd ff3b 	bl	80a00a6 <__cxa_guard_acquire>
 80a2230:	b160      	cbz	r0, 80a224c <_Z17_fetch_usbserial1v+0x34>
 80a2232:	aa01      	add	r2, sp, #4
 80a2234:	2101      	movs	r1, #1
 80a2236:	4808      	ldr	r0, [pc, #32]	; (80a2258 <_Z17_fetch_usbserial1v+0x40>)
 80a2238:	f7ff ffa0 	bl	80a217c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a223c:	4620      	mov	r0, r4
 80a223e:	f7fd ff37 	bl	80a00b0 <__cxa_guard_release>
 80a2242:	4a06      	ldr	r2, [pc, #24]	; (80a225c <_Z17_fetch_usbserial1v+0x44>)
 80a2244:	4906      	ldr	r1, [pc, #24]	; (80a2260 <_Z17_fetch_usbserial1v+0x48>)
 80a2246:	4804      	ldr	r0, [pc, #16]	; (80a2258 <_Z17_fetch_usbserial1v+0x40>)
 80a2248:	f000 f9b0 	bl	80a25ac <__aeabi_atexit>
  return _usbserial1;
}
 80a224c:	4802      	ldr	r0, [pc, #8]	; (80a2258 <_Z17_fetch_usbserial1v+0x40>)
 80a224e:	b006      	add	sp, #24
 80a2250:	bd10      	pop	{r4, pc}
 80a2252:	bf00      	nop
 80a2254:	20000590 	.word	0x20000590
 80a2258:	200005a8 	.word	0x200005a8
 80a225c:	2000036c 	.word	0x2000036c
 80a2260:	080a212d 	.word	0x080a212d

080a2264 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2264:	2200      	movs	r2, #0
 80a2266:	4611      	mov	r1, r2
 80a2268:	6840      	ldr	r0, [r0, #4]
 80a226a:	f7fe becd 	b.w	80a1008 <network_ready>

080a226e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a226e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2270:	4616      	mov	r6, r2
 80a2272:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2274:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2276:	460f      	mov	r7, r1
 80a2278:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a227a:	2100      	movs	r1, #0
 80a227c:	a803      	add	r0, sp, #12
 80a227e:	f002 feb8 	bl	80a4ff2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2282:	4630      	mov	r0, r6
 80a2284:	f002 fee6 	bl	80a5054 <strlen>
 80a2288:	2500      	movs	r5, #0
 80a228a:	9500      	str	r5, [sp, #0]
 80a228c:	b281      	uxth	r1, r0
 80a228e:	687b      	ldr	r3, [r7, #4]
 80a2290:	aa03      	add	r2, sp, #12
 80a2292:	4630      	mov	r0, r6
 80a2294:	f7fe fe5c 	bl	80a0f50 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2298:	b120      	cbz	r0, 80a22a4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a229a:	4629      	mov	r1, r5
 80a229c:	4620      	mov	r0, r4
 80a229e:	f7ff f809 	bl	80a12b4 <_ZN9IPAddressC1Em>
 80a22a2:	e003      	b.n	80a22ac <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a22a4:	a903      	add	r1, sp, #12
 80a22a6:	4620      	mov	r0, r4
 80a22a8:	f7fe fff2 	bl	80a1290 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a22ac:	4620      	mov	r0, r4
 80a22ae:	b009      	add	sp, #36	; 0x24
 80a22b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a22b2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a22b2:	2200      	movs	r2, #0
 80a22b4:	4611      	mov	r1, r2
 80a22b6:	6840      	ldr	r0, [r0, #4]
 80a22b8:	f7fe bec6 	b.w	80a1048 <network_listening>

080a22bc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a22bc:	2200      	movs	r2, #0
 80a22be:	4611      	mov	r1, r2
 80a22c0:	6840      	ldr	r0, [r0, #4]
 80a22c2:	f7fe bed1 	b.w	80a1068 <network_get_listen_timeout>

080a22c6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a22c6:	2200      	movs	r2, #0
 80a22c8:	6840      	ldr	r0, [r0, #4]
 80a22ca:	f7fe bec5 	b.w	80a1058 <network_set_listen_timeout>

080a22ce <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a22ce:	2200      	movs	r2, #0
 80a22d0:	f081 0101 	eor.w	r1, r1, #1
 80a22d4:	6840      	ldr	r0, [r0, #4]
 80a22d6:	f7fe beaf 	b.w	80a1038 <network_listen>

080a22da <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a22da:	2300      	movs	r3, #0
 80a22dc:	461a      	mov	r2, r3
 80a22de:	4619      	mov	r1, r3
 80a22e0:	6840      	ldr	r0, [r0, #4]
 80a22e2:	f7fe bea1 	b.w	80a1028 <network_off>

080a22e6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a22e6:	2300      	movs	r3, #0
 80a22e8:	461a      	mov	r2, r3
 80a22ea:	4619      	mov	r1, r3
 80a22ec:	6840      	ldr	r0, [r0, #4]
 80a22ee:	f7fe be93 	b.w	80a1018 <network_on>

080a22f2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a22f2:	2200      	movs	r2, #0
 80a22f4:	4611      	mov	r1, r2
 80a22f6:	6840      	ldr	r0, [r0, #4]
 80a22f8:	f7fe be76 	b.w	80a0fe8 <network_connecting>

080a22fc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a22fc:	2200      	movs	r2, #0
 80a22fe:	2102      	movs	r1, #2
 80a2300:	6840      	ldr	r0, [r0, #4]
 80a2302:	f7fe be79 	b.w	80a0ff8 <network_disconnect>

080a2306 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2306:	2300      	movs	r3, #0
 80a2308:	461a      	mov	r2, r3
 80a230a:	6840      	ldr	r0, [r0, #4]
 80a230c:	f7fe be64 	b.w	80a0fd8 <network_connect>

080a2310 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2310:	4b02      	ldr	r3, [pc, #8]	; (80a231c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2312:	2204      	movs	r2, #4
 80a2314:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2316:	4a02      	ldr	r2, [pc, #8]	; (80a2320 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2318:	601a      	str	r2, [r3, #0]
 80a231a:	4770      	bx	lr
 80a231c:	200005bc 	.word	0x200005bc
 80a2320:	080a5538 	.word	0x080a5538

080a2324 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2324:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2326:	4b14      	ldr	r3, [pc, #80]	; (80a2378 <serialEventRun+0x54>)
 80a2328:	b133      	cbz	r3, 80a2338 <serialEventRun+0x14>
 80a232a:	f7ff ff47 	bl	80a21bc <_Z16_fetch_usbserialv>
 80a232e:	6803      	ldr	r3, [r0, #0]
 80a2330:	691b      	ldr	r3, [r3, #16]
 80a2332:	4798      	blx	r3
 80a2334:	2800      	cmp	r0, #0
 80a2336:	dc16      	bgt.n	80a2366 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2338:	4b10      	ldr	r3, [pc, #64]	; (80a237c <serialEventRun+0x58>)
 80a233a:	b133      	cbz	r3, 80a234a <serialEventRun+0x26>
 80a233c:	f7ff feb4 	bl	80a20a8 <_Z22__fetch_global_Serial1v>
 80a2340:	6803      	ldr	r3, [r0, #0]
 80a2342:	691b      	ldr	r3, [r3, #16]
 80a2344:	4798      	blx	r3
 80a2346:	2800      	cmp	r0, #0
 80a2348:	dc10      	bgt.n	80a236c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a234a:	4b0d      	ldr	r3, [pc, #52]	; (80a2380 <serialEventRun+0x5c>)
 80a234c:	b10b      	cbz	r3, 80a2352 <serialEventRun+0x2e>
 80a234e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2352:	4b0c      	ldr	r3, [pc, #48]	; (80a2384 <serialEventRun+0x60>)
 80a2354:	b17b      	cbz	r3, 80a2376 <serialEventRun+0x52>
 80a2356:	f7ff ff5f 	bl	80a2218 <_Z17_fetch_usbserial1v>
 80a235a:	6803      	ldr	r3, [r0, #0]
 80a235c:	691b      	ldr	r3, [r3, #16]
 80a235e:	4798      	blx	r3
 80a2360:	2800      	cmp	r0, #0
 80a2362:	dc06      	bgt.n	80a2372 <serialEventRun+0x4e>
 80a2364:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2366:	f3af 8000 	nop.w
 80a236a:	e7e5      	b.n	80a2338 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a236c:	f3af 8000 	nop.w
 80a2370:	e7eb      	b.n	80a234a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2372:	f3af 8000 	nop.w
 80a2376:	bd08      	pop	{r3, pc}
	...

080a2388 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2388:	b508      	push	{r3, lr}
	serialEventRun();
 80a238a:	f7ff ffcb 	bl	80a2324 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a238e:	f7fe fc8d 	bl	80a0cac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2392:	4b01      	ldr	r3, [pc, #4]	; (80a2398 <_post_loop+0x10>)
 80a2394:	6018      	str	r0, [r3, #0]
 80a2396:	bd08      	pop	{r3, pc}
 80a2398:	200005cc 	.word	0x200005cc

080a239c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a239c:	4802      	ldr	r0, [pc, #8]	; (80a23a8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a239e:	4a03      	ldr	r2, [pc, #12]	; (80a23ac <_Z33system_initialize_user_backup_ramv+0x10>)
 80a23a0:	4903      	ldr	r1, [pc, #12]	; (80a23b0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a23a2:	1a12      	subs	r2, r2, r0
 80a23a4:	f002 be1a 	b.w	80a4fdc <memcpy>
 80a23a8:	40024000 	.word	0x40024000
 80a23ac:	40024004 	.word	0x40024004
 80a23b0:	080a5650 	.word	0x080a5650

080a23b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a23b4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a23b6:	2300      	movs	r3, #0
 80a23b8:	9300      	str	r3, [sp, #0]
 80a23ba:	461a      	mov	r2, r3
 80a23bc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a23c0:	f7fe fdf0 	bl	80a0fa4 <system_ctrl_set_result>
}
 80a23c4:	b003      	add	sp, #12
 80a23c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a23cc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a23cc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a23ce:	8843      	ldrh	r3, [r0, #2]
 80a23d0:	2b0a      	cmp	r3, #10
 80a23d2:	d008      	beq.n	80a23e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a23d4:	2b50      	cmp	r3, #80	; 0x50
 80a23d6:	d109      	bne.n	80a23ec <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a23d8:	4b09      	ldr	r3, [pc, #36]	; (80a2400 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a23da:	681b      	ldr	r3, [r3, #0]
 80a23dc:	b13b      	cbz	r3, 80a23ee <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a23de:	b003      	add	sp, #12
 80a23e0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a23e4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a23e6:	f7ff ffe5 	bl	80a23b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a23ea:	e006      	b.n	80a23fa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a23ec:	2300      	movs	r3, #0
 80a23ee:	9300      	str	r3, [sp, #0]
 80a23f0:	461a      	mov	r2, r3
 80a23f2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a23f6:	f7fe fdd5 	bl	80a0fa4 <system_ctrl_set_result>
        break;
    }
}
 80a23fa:	b003      	add	sp, #12
 80a23fc:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2400:	200005c4 	.word	0x200005c4

080a2404 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2404:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2406:	4c10      	ldr	r4, [pc, #64]	; (80a2448 <module_user_init_hook+0x44>)
 80a2408:	4d10      	ldr	r5, [pc, #64]	; (80a244c <module_user_init_hook+0x48>)
 80a240a:	6823      	ldr	r3, [r4, #0]
 80a240c:	42ab      	cmp	r3, r5
 80a240e:	4b10      	ldr	r3, [pc, #64]	; (80a2450 <module_user_init_hook+0x4c>)
 80a2410:	bf0c      	ite	eq
 80a2412:	2201      	moveq	r2, #1
 80a2414:	2200      	movne	r2, #0
 80a2416:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2418:	d002      	beq.n	80a2420 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a241a:	f7ff ffbf 	bl	80a239c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a241e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2420:	f7fe fc2c 	bl	80a0c7c <HAL_RNG_GetRandomNumber>
 80a2424:	4604      	mov	r4, r0
    srand(seed);
 80a2426:	f002 fded 	bl	80a5004 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a242a:	4b0a      	ldr	r3, [pc, #40]	; (80a2454 <module_user_init_hook+0x50>)
 80a242c:	b113      	cbz	r3, 80a2434 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a242e:	4620      	mov	r0, r4
 80a2430:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2434:	2100      	movs	r1, #0
 80a2436:	4807      	ldr	r0, [pc, #28]	; (80a2454 <module_user_init_hook+0x50>)
 80a2438:	f7fe fdc6 	bl	80a0fc8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a243c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2440:	2100      	movs	r1, #0
 80a2442:	4805      	ldr	r0, [pc, #20]	; (80a2458 <module_user_init_hook+0x54>)
 80a2444:	f7fe bda4 	b.w	80a0f90 <system_ctrl_set_app_request_handler>
 80a2448:	40024000 	.word	0x40024000
 80a244c:	9a271c1e 	.word	0x9a271c1e
 80a2450:	200005c8 	.word	0x200005c8
 80a2454:	00000000 	.word	0x00000000
 80a2458:	080a23cd 	.word	0x080a23cd

080a245c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a245c:	b510      	push	{r4, lr}
 80a245e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2460:	480f      	ldr	r0, [pc, #60]	; (80a24a0 <pinAvailable+0x44>)
 80a2462:	f7ff f94f 	bl	80a1704 <_ZN8SPIClass9isEnabledEv>
 80a2466:	b128      	cbz	r0, 80a2474 <pinAvailable+0x18>
 80a2468:	f1a4 030d 	sub.w	r3, r4, #13
 80a246c:	2b02      	cmp	r3, #2
 80a246e:	d801      	bhi.n	80a2474 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2470:	2000      	movs	r0, #0
 80a2472:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2474:	f000 f840 	bl	80a24f8 <_Z19__fetch_global_Wirev>
 80a2478:	f7fe fe5e 	bl	80a1138 <_ZN7TwoWire9isEnabledEv>
 80a247c:	b108      	cbz	r0, 80a2482 <pinAvailable+0x26>
 80a247e:	2c01      	cmp	r4, #1
 80a2480:	d9f6      	bls.n	80a2470 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2482:	f7ff fe11 	bl	80a20a8 <_Z22__fetch_global_Serial1v>
 80a2486:	f7ff fe0b 	bl	80a20a0 <_ZN11USARTSerial9isEnabledEv>
 80a248a:	b118      	cbz	r0, 80a2494 <pinAvailable+0x38>
 80a248c:	f1a4 0312 	sub.w	r3, r4, #18
 80a2490:	2b01      	cmp	r3, #1
 80a2492:	d9ed      	bls.n	80a2470 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2494:	2c17      	cmp	r4, #23
 80a2496:	bf8c      	ite	hi
 80a2498:	2000      	movhi	r0, #0
 80a249a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a249c:	bd10      	pop	{r4, pc}
 80a249e:	bf00      	nop
 80a24a0:	20000600 	.word	0x20000600

080a24a4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a24a4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a24a6:	b538      	push	{r3, r4, r5, lr}
 80a24a8:	4604      	mov	r4, r0
 80a24aa:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a24ac:	d80a      	bhi.n	80a24c4 <pinMode+0x20>
 80a24ae:	29ff      	cmp	r1, #255	; 0xff
 80a24b0:	d008      	beq.n	80a24c4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a24b2:	f7ff ffd3 	bl	80a245c <pinAvailable>
 80a24b6:	b128      	cbz	r0, 80a24c4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a24b8:	4629      	mov	r1, r5
 80a24ba:	4620      	mov	r0, r4
}
 80a24bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a24c0:	f7fe bc04 	b.w	80a0ccc <HAL_Pin_Mode>
 80a24c4:	bd38      	pop	{r3, r4, r5, pc}

080a24c6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a24c6:	b538      	push	{r3, r4, r5, lr}
 80a24c8:	4604      	mov	r4, r0
 80a24ca:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a24cc:	f7fe fc06 	bl	80a0cdc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a24d0:	28ff      	cmp	r0, #255	; 0xff
 80a24d2:	d010      	beq.n	80a24f6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a24d4:	2806      	cmp	r0, #6
 80a24d6:	d804      	bhi.n	80a24e2 <digitalWrite+0x1c>
 80a24d8:	234d      	movs	r3, #77	; 0x4d
 80a24da:	fa23 f000 	lsr.w	r0, r3, r0
 80a24de:	07c3      	lsls	r3, r0, #31
 80a24e0:	d409      	bmi.n	80a24f6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a24e2:	4620      	mov	r0, r4
 80a24e4:	f7ff ffba 	bl	80a245c <pinAvailable>
 80a24e8:	b128      	cbz	r0, 80a24f6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a24ea:	4629      	mov	r1, r5
 80a24ec:	4620      	mov	r0, r4
}
 80a24ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a24f2:	f7fe bbfb 	b.w	80a0cec <HAL_GPIO_Write>
 80a24f6:	bd38      	pop	{r3, r4, r5, pc}

080a24f8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a24f8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a24fa:	4d0b      	ldr	r5, [pc, #44]	; (80a2528 <_Z19__fetch_global_Wirev+0x30>)
 80a24fc:	6829      	ldr	r1, [r5, #0]
 80a24fe:	f011 0401 	ands.w	r4, r1, #1
 80a2502:	d10f      	bne.n	80a2524 <_Z19__fetch_global_Wirev+0x2c>
 80a2504:	4628      	mov	r0, r5
 80a2506:	f7fd fdce 	bl	80a00a6 <__cxa_guard_acquire>
 80a250a:	b158      	cbz	r0, 80a2524 <_Z19__fetch_global_Wirev+0x2c>
 80a250c:	4621      	mov	r1, r4
 80a250e:	4807      	ldr	r0, [pc, #28]	; (80a252c <_Z19__fetch_global_Wirev+0x34>)
 80a2510:	f7fe fe00 	bl	80a1114 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2514:	4628      	mov	r0, r5
 80a2516:	f7fd fdcb 	bl	80a00b0 <__cxa_guard_release>
 80a251a:	4a05      	ldr	r2, [pc, #20]	; (80a2530 <_Z19__fetch_global_Wirev+0x38>)
 80a251c:	4905      	ldr	r1, [pc, #20]	; (80a2534 <_Z19__fetch_global_Wirev+0x3c>)
 80a251e:	4803      	ldr	r0, [pc, #12]	; (80a252c <_Z19__fetch_global_Wirev+0x34>)
 80a2520:	f000 f844 	bl	80a25ac <__aeabi_atexit>
	return wire;
}
 80a2524:	4801      	ldr	r0, [pc, #4]	; (80a252c <_Z19__fetch_global_Wirev+0x34>)
 80a2526:	bd38      	pop	{r3, r4, r5, pc}
 80a2528:	200005d0 	.word	0x200005d0
 80a252c:	200005d4 	.word	0x200005d4
 80a2530:	2000036c 	.word	0x2000036c
 80a2534:	080a10bf 	.word	0x080a10bf

080a2538 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2538:	b513      	push	{r0, r1, r4, lr}
 80a253a:	4c08      	ldr	r4, [pc, #32]	; (80a255c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a253c:	2300      	movs	r3, #0
 80a253e:	461a      	mov	r2, r3
 80a2540:	4619      	mov	r1, r3
 80a2542:	9300      	str	r3, [sp, #0]
 80a2544:	4620      	mov	r0, r4
 80a2546:	f7fe fecb 	bl	80a12e0 <_ZN9IPAddressC1Ehhhh>
 80a254a:	4620      	mov	r0, r4
 80a254c:	4a04      	ldr	r2, [pc, #16]	; (80a2560 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a254e:	4905      	ldr	r1, [pc, #20]	; (80a2564 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2550:	b002      	add	sp, #8
 80a2552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2556:	f000 b829 	b.w	80a25ac <__aeabi_atexit>
 80a255a:	bf00      	nop
 80a255c:	200005e8 	.word	0x200005e8
 80a2560:	2000036c 	.word	0x2000036c
 80a2564:	080a1235 	.word	0x080a1235

080a2568 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2568:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a256a:	4c0c      	ldr	r4, [pc, #48]	; (80a259c <_GLOBAL__sub_I_SPI+0x34>)
 80a256c:	4e0c      	ldr	r6, [pc, #48]	; (80a25a0 <_GLOBAL__sub_I_SPI+0x38>)
 80a256e:	4d0d      	ldr	r5, [pc, #52]	; (80a25a4 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2570:	2100      	movs	r1, #0
 80a2572:	4620      	mov	r0, r4
 80a2574:	f7ff f8b2 	bl	80a16dc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2578:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a257a:	4c0b      	ldr	r4, [pc, #44]	; (80a25a8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a257c:	4632      	mov	r2, r6
 80a257e:	4629      	mov	r1, r5
 80a2580:	f000 f814 	bl	80a25ac <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2584:	2101      	movs	r1, #1
 80a2586:	4620      	mov	r0, r4
 80a2588:	f7ff f8a8 	bl	80a16dc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a258c:	4632      	mov	r2, r6
 80a258e:	4629      	mov	r1, r5
 80a2590:	4620      	mov	r0, r4
 80a2592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2596:	f000 b809 	b.w	80a25ac <__aeabi_atexit>
 80a259a:	bf00      	nop
 80a259c:	20000600 	.word	0x20000600
 80a25a0:	2000036c 	.word	0x2000036c
 80a25a4:	080a16cd 	.word	0x080a16cd
 80a25a8:	20000610 	.word	0x20000610

080a25ac <__aeabi_atexit>:
 80a25ac:	460b      	mov	r3, r1
 80a25ae:	4601      	mov	r1, r0
 80a25b0:	4618      	mov	r0, r3
 80a25b2:	f002 bd05 	b.w	80a4fc0 <__cxa_atexit>

080a25b6 <_ZSt25__throw_bad_function_callv>:
 80a25b6:	b508      	push	{r3, lr}
 80a25b8:	f7fe fd6e 	bl	80a1098 <abort>

080a25bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a25bc:	4b24      	ldr	r3, [pc, #144]	; (80a2650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a25be:	681a      	ldr	r2, [r3, #0]
 80a25c0:	07d0      	lsls	r0, r2, #31
 80a25c2:	bf5c      	itt	pl
 80a25c4:	2201      	movpl	r2, #1
 80a25c6:	601a      	strpl	r2, [r3, #0]
 80a25c8:	4b22      	ldr	r3, [pc, #136]	; (80a2654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a25ca:	681a      	ldr	r2, [r3, #0]
 80a25cc:	07d1      	lsls	r1, r2, #31
 80a25ce:	bf5c      	itt	pl
 80a25d0:	2201      	movpl	r2, #1
 80a25d2:	601a      	strpl	r2, [r3, #0]
 80a25d4:	4b20      	ldr	r3, [pc, #128]	; (80a2658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a25d6:	681a      	ldr	r2, [r3, #0]
 80a25d8:	07d2      	lsls	r2, r2, #31
 80a25da:	bf5c      	itt	pl
 80a25dc:	2201      	movpl	r2, #1
 80a25de:	601a      	strpl	r2, [r3, #0]
 80a25e0:	4b1e      	ldr	r3, [pc, #120]	; (80a265c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a25e2:	681a      	ldr	r2, [r3, #0]
 80a25e4:	07d0      	lsls	r0, r2, #31
 80a25e6:	bf5c      	itt	pl
 80a25e8:	2201      	movpl	r2, #1
 80a25ea:	601a      	strpl	r2, [r3, #0]
 80a25ec:	4b1c      	ldr	r3, [pc, #112]	; (80a2660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a25ee:	681a      	ldr	r2, [r3, #0]
 80a25f0:	07d1      	lsls	r1, r2, #31
 80a25f2:	bf5c      	itt	pl
 80a25f4:	2201      	movpl	r2, #1
 80a25f6:	601a      	strpl	r2, [r3, #0]
 80a25f8:	4b1a      	ldr	r3, [pc, #104]	; (80a2664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a25fa:	681a      	ldr	r2, [r3, #0]
 80a25fc:	07d2      	lsls	r2, r2, #31
 80a25fe:	bf5c      	itt	pl
 80a2600:	2201      	movpl	r2, #1
 80a2602:	601a      	strpl	r2, [r3, #0]
 80a2604:	4b18      	ldr	r3, [pc, #96]	; (80a2668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2606:	681a      	ldr	r2, [r3, #0]
 80a2608:	07d0      	lsls	r0, r2, #31
 80a260a:	bf5c      	itt	pl
 80a260c:	2201      	movpl	r2, #1
 80a260e:	601a      	strpl	r2, [r3, #0]
 80a2610:	4b16      	ldr	r3, [pc, #88]	; (80a266c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2612:	681a      	ldr	r2, [r3, #0]
 80a2614:	07d1      	lsls	r1, r2, #31
 80a2616:	bf5c      	itt	pl
 80a2618:	2201      	movpl	r2, #1
 80a261a:	601a      	strpl	r2, [r3, #0]
 80a261c:	4b14      	ldr	r3, [pc, #80]	; (80a2670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a261e:	681a      	ldr	r2, [r3, #0]
 80a2620:	07d2      	lsls	r2, r2, #31
 80a2622:	bf5c      	itt	pl
 80a2624:	2201      	movpl	r2, #1
 80a2626:	601a      	strpl	r2, [r3, #0]
 80a2628:	4b12      	ldr	r3, [pc, #72]	; (80a2674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a262a:	681a      	ldr	r2, [r3, #0]
 80a262c:	07d0      	lsls	r0, r2, #31
 80a262e:	bf5c      	itt	pl
 80a2630:	2201      	movpl	r2, #1
 80a2632:	601a      	strpl	r2, [r3, #0]
 80a2634:	4b10      	ldr	r3, [pc, #64]	; (80a2678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2636:	681a      	ldr	r2, [r3, #0]
 80a2638:	07d1      	lsls	r1, r2, #31
 80a263a:	bf5c      	itt	pl
 80a263c:	2201      	movpl	r2, #1
 80a263e:	601a      	strpl	r2, [r3, #0]
 80a2640:	4b0e      	ldr	r3, [pc, #56]	; (80a267c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2642:	681a      	ldr	r2, [r3, #0]
 80a2644:	07d2      	lsls	r2, r2, #31
 80a2646:	bf5c      	itt	pl
 80a2648:	2201      	movpl	r2, #1
 80a264a:	601a      	strpl	r2, [r3, #0]
 80a264c:	4770      	bx	lr
 80a264e:	bf00      	nop
 80a2650:	2000064c 	.word	0x2000064c
 80a2654:	20000648 	.word	0x20000648
 80a2658:	20000644 	.word	0x20000644
 80a265c:	20000640 	.word	0x20000640
 80a2660:	2000063c 	.word	0x2000063c
 80a2664:	20000638 	.word	0x20000638
 80a2668:	20000634 	.word	0x20000634
 80a266c:	20000630 	.word	0x20000630
 80a2670:	2000062c 	.word	0x2000062c
 80a2674:	20000628 	.word	0x20000628
 80a2678:	20000624 	.word	0x20000624
 80a267c:	20000620 	.word	0x20000620

080a2680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2680:	4b18      	ldr	r3, [pc, #96]	; (80a26e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2682:	681a      	ldr	r2, [r3, #0]
 80a2684:	07d1      	lsls	r1, r2, #31
 80a2686:	bf5c      	itt	pl
 80a2688:	2201      	movpl	r2, #1
 80a268a:	601a      	strpl	r2, [r3, #0]
 80a268c:	4b16      	ldr	r3, [pc, #88]	; (80a26e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a268e:	681a      	ldr	r2, [r3, #0]
 80a2690:	07d2      	lsls	r2, r2, #31
 80a2692:	bf5c      	itt	pl
 80a2694:	2201      	movpl	r2, #1
 80a2696:	601a      	strpl	r2, [r3, #0]
 80a2698:	4b14      	ldr	r3, [pc, #80]	; (80a26ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a269a:	681a      	ldr	r2, [r3, #0]
 80a269c:	07d0      	lsls	r0, r2, #31
 80a269e:	bf5c      	itt	pl
 80a26a0:	2201      	movpl	r2, #1
 80a26a2:	601a      	strpl	r2, [r3, #0]
 80a26a4:	4b12      	ldr	r3, [pc, #72]	; (80a26f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a26a6:	681a      	ldr	r2, [r3, #0]
 80a26a8:	07d1      	lsls	r1, r2, #31
 80a26aa:	bf5c      	itt	pl
 80a26ac:	2201      	movpl	r2, #1
 80a26ae:	601a      	strpl	r2, [r3, #0]
 80a26b0:	4b10      	ldr	r3, [pc, #64]	; (80a26f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a26b2:	681a      	ldr	r2, [r3, #0]
 80a26b4:	07d2      	lsls	r2, r2, #31
 80a26b6:	bf5c      	itt	pl
 80a26b8:	2201      	movpl	r2, #1
 80a26ba:	601a      	strpl	r2, [r3, #0]
 80a26bc:	4b0e      	ldr	r3, [pc, #56]	; (80a26f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a26be:	681a      	ldr	r2, [r3, #0]
 80a26c0:	07d0      	lsls	r0, r2, #31
 80a26c2:	bf5c      	itt	pl
 80a26c4:	2201      	movpl	r2, #1
 80a26c6:	601a      	strpl	r2, [r3, #0]
 80a26c8:	4b0c      	ldr	r3, [pc, #48]	; (80a26fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a26ca:	681a      	ldr	r2, [r3, #0]
 80a26cc:	07d1      	lsls	r1, r2, #31
 80a26ce:	bf5c      	itt	pl
 80a26d0:	2201      	movpl	r2, #1
 80a26d2:	601a      	strpl	r2, [r3, #0]
 80a26d4:	4b0a      	ldr	r3, [pc, #40]	; (80a2700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a26d6:	681a      	ldr	r2, [r3, #0]
 80a26d8:	07d2      	lsls	r2, r2, #31
 80a26da:	bf5c      	itt	pl
 80a26dc:	2201      	movpl	r2, #1
 80a26de:	601a      	strpl	r2, [r3, #0]
 80a26e0:	4770      	bx	lr
 80a26e2:	bf00      	nop
 80a26e4:	2000066c 	.word	0x2000066c
 80a26e8:	20000668 	.word	0x20000668
 80a26ec:	20000664 	.word	0x20000664
 80a26f0:	20000660 	.word	0x20000660
 80a26f4:	2000065c 	.word	0x2000065c
 80a26f8:	20000658 	.word	0x20000658
 80a26fc:	20000654 	.word	0x20000654
 80a2700:	20000650 	.word	0x20000650

080a2704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2704:	4b18      	ldr	r3, [pc, #96]	; (80a2768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2706:	681a      	ldr	r2, [r3, #0]
 80a2708:	07d1      	lsls	r1, r2, #31
 80a270a:	bf5c      	itt	pl
 80a270c:	2201      	movpl	r2, #1
 80a270e:	601a      	strpl	r2, [r3, #0]
 80a2710:	4b16      	ldr	r3, [pc, #88]	; (80a276c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2712:	681a      	ldr	r2, [r3, #0]
 80a2714:	07d2      	lsls	r2, r2, #31
 80a2716:	bf5c      	itt	pl
 80a2718:	2201      	movpl	r2, #1
 80a271a:	601a      	strpl	r2, [r3, #0]
 80a271c:	4b14      	ldr	r3, [pc, #80]	; (80a2770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a271e:	681a      	ldr	r2, [r3, #0]
 80a2720:	07d0      	lsls	r0, r2, #31
 80a2722:	bf5c      	itt	pl
 80a2724:	2201      	movpl	r2, #1
 80a2726:	601a      	strpl	r2, [r3, #0]
 80a2728:	4b12      	ldr	r3, [pc, #72]	; (80a2774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a272a:	681a      	ldr	r2, [r3, #0]
 80a272c:	07d1      	lsls	r1, r2, #31
 80a272e:	bf5c      	itt	pl
 80a2730:	2201      	movpl	r2, #1
 80a2732:	601a      	strpl	r2, [r3, #0]
 80a2734:	4b10      	ldr	r3, [pc, #64]	; (80a2778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2736:	681a      	ldr	r2, [r3, #0]
 80a2738:	07d2      	lsls	r2, r2, #31
 80a273a:	bf5c      	itt	pl
 80a273c:	2201      	movpl	r2, #1
 80a273e:	601a      	strpl	r2, [r3, #0]
 80a2740:	4b0e      	ldr	r3, [pc, #56]	; (80a277c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2742:	681a      	ldr	r2, [r3, #0]
 80a2744:	07d0      	lsls	r0, r2, #31
 80a2746:	bf5c      	itt	pl
 80a2748:	2201      	movpl	r2, #1
 80a274a:	601a      	strpl	r2, [r3, #0]
 80a274c:	4b0c      	ldr	r3, [pc, #48]	; (80a2780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a274e:	681a      	ldr	r2, [r3, #0]
 80a2750:	07d1      	lsls	r1, r2, #31
 80a2752:	bf5c      	itt	pl
 80a2754:	2201      	movpl	r2, #1
 80a2756:	601a      	strpl	r2, [r3, #0]
 80a2758:	4b0a      	ldr	r3, [pc, #40]	; (80a2784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a275a:	681a      	ldr	r2, [r3, #0]
 80a275c:	07d2      	lsls	r2, r2, #31
 80a275e:	bf5c      	itt	pl
 80a2760:	2201      	movpl	r2, #1
 80a2762:	601a      	strpl	r2, [r3, #0]
 80a2764:	4770      	bx	lr
 80a2766:	bf00      	nop
 80a2768:	2000068c 	.word	0x2000068c
 80a276c:	20000688 	.word	0x20000688
 80a2770:	20000684 	.word	0x20000684
 80a2774:	20000680 	.word	0x20000680
 80a2778:	2000067c 	.word	0x2000067c
 80a277c:	20000678 	.word	0x20000678
 80a2780:	20000674 	.word	0x20000674
 80a2784:	20000670 	.word	0x20000670

080a2788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2788:	4b24      	ldr	r3, [pc, #144]	; (80a281c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a278a:	681a      	ldr	r2, [r3, #0]
 80a278c:	07d0      	lsls	r0, r2, #31
 80a278e:	bf5c      	itt	pl
 80a2790:	2201      	movpl	r2, #1
 80a2792:	601a      	strpl	r2, [r3, #0]
 80a2794:	4b22      	ldr	r3, [pc, #136]	; (80a2820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2796:	681a      	ldr	r2, [r3, #0]
 80a2798:	07d1      	lsls	r1, r2, #31
 80a279a:	bf5c      	itt	pl
 80a279c:	2201      	movpl	r2, #1
 80a279e:	601a      	strpl	r2, [r3, #0]
 80a27a0:	4b20      	ldr	r3, [pc, #128]	; (80a2824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a27a2:	681a      	ldr	r2, [r3, #0]
 80a27a4:	07d2      	lsls	r2, r2, #31
 80a27a6:	bf5c      	itt	pl
 80a27a8:	2201      	movpl	r2, #1
 80a27aa:	601a      	strpl	r2, [r3, #0]
 80a27ac:	4b1e      	ldr	r3, [pc, #120]	; (80a2828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a27ae:	681a      	ldr	r2, [r3, #0]
 80a27b0:	07d0      	lsls	r0, r2, #31
 80a27b2:	bf5c      	itt	pl
 80a27b4:	2201      	movpl	r2, #1
 80a27b6:	601a      	strpl	r2, [r3, #0]
 80a27b8:	4b1c      	ldr	r3, [pc, #112]	; (80a282c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a27ba:	681a      	ldr	r2, [r3, #0]
 80a27bc:	07d1      	lsls	r1, r2, #31
 80a27be:	bf5c      	itt	pl
 80a27c0:	2201      	movpl	r2, #1
 80a27c2:	601a      	strpl	r2, [r3, #0]
 80a27c4:	4b1a      	ldr	r3, [pc, #104]	; (80a2830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a27c6:	681a      	ldr	r2, [r3, #0]
 80a27c8:	07d2      	lsls	r2, r2, #31
 80a27ca:	bf5c      	itt	pl
 80a27cc:	2201      	movpl	r2, #1
 80a27ce:	601a      	strpl	r2, [r3, #0]
 80a27d0:	4b18      	ldr	r3, [pc, #96]	; (80a2834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a27d2:	681a      	ldr	r2, [r3, #0]
 80a27d4:	07d0      	lsls	r0, r2, #31
 80a27d6:	bf5c      	itt	pl
 80a27d8:	2201      	movpl	r2, #1
 80a27da:	601a      	strpl	r2, [r3, #0]
 80a27dc:	4b16      	ldr	r3, [pc, #88]	; (80a2838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a27de:	681a      	ldr	r2, [r3, #0]
 80a27e0:	07d1      	lsls	r1, r2, #31
 80a27e2:	bf5c      	itt	pl
 80a27e4:	2201      	movpl	r2, #1
 80a27e6:	601a      	strpl	r2, [r3, #0]
 80a27e8:	4b14      	ldr	r3, [pc, #80]	; (80a283c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a27ea:	681a      	ldr	r2, [r3, #0]
 80a27ec:	07d2      	lsls	r2, r2, #31
 80a27ee:	bf5c      	itt	pl
 80a27f0:	2201      	movpl	r2, #1
 80a27f2:	601a      	strpl	r2, [r3, #0]
 80a27f4:	4b12      	ldr	r3, [pc, #72]	; (80a2840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a27f6:	681a      	ldr	r2, [r3, #0]
 80a27f8:	07d0      	lsls	r0, r2, #31
 80a27fa:	bf5c      	itt	pl
 80a27fc:	2201      	movpl	r2, #1
 80a27fe:	601a      	strpl	r2, [r3, #0]
 80a2800:	4b10      	ldr	r3, [pc, #64]	; (80a2844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2802:	681a      	ldr	r2, [r3, #0]
 80a2804:	07d1      	lsls	r1, r2, #31
 80a2806:	bf5c      	itt	pl
 80a2808:	2201      	movpl	r2, #1
 80a280a:	601a      	strpl	r2, [r3, #0]
 80a280c:	4b0e      	ldr	r3, [pc, #56]	; (80a2848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a280e:	681a      	ldr	r2, [r3, #0]
 80a2810:	07d2      	lsls	r2, r2, #31
 80a2812:	bf5c      	itt	pl
 80a2814:	2201      	movpl	r2, #1
 80a2816:	601a      	strpl	r2, [r3, #0]
 80a2818:	4770      	bx	lr
 80a281a:	bf00      	nop
 80a281c:	200006bc 	.word	0x200006bc
 80a2820:	200006b8 	.word	0x200006b8
 80a2824:	200006b4 	.word	0x200006b4
 80a2828:	200006b0 	.word	0x200006b0
 80a282c:	200006ac 	.word	0x200006ac
 80a2830:	200006a8 	.word	0x200006a8
 80a2834:	200006a4 	.word	0x200006a4
 80a2838:	200006a0 	.word	0x200006a0
 80a283c:	2000069c 	.word	0x2000069c
 80a2840:	20000698 	.word	0x20000698
 80a2844:	20000694 	.word	0x20000694
 80a2848:	20000690 	.word	0x20000690

080a284c <log>:
 80a284c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2850:	b08a      	sub	sp, #40	; 0x28
 80a2852:	4604      	mov	r4, r0
 80a2854:	460d      	mov	r5, r1
 80a2856:	f000 fa93 	bl	80a2d80 <__ieee754_log>
 80a285a:	4b37      	ldr	r3, [pc, #220]	; (80a2938 <log+0xec>)
 80a285c:	4606      	mov	r6, r0
 80a285e:	f993 8000 	ldrsb.w	r8, [r3]
 80a2862:	460f      	mov	r7, r1
 80a2864:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80a2868:	d00d      	beq.n	80a2886 <log+0x3a>
 80a286a:	4622      	mov	r2, r4
 80a286c:	462b      	mov	r3, r5
 80a286e:	4620      	mov	r0, r4
 80a2870:	4629      	mov	r1, r5
 80a2872:	f002 f899 	bl	80a49a8 <__aeabi_dcmpun>
 80a2876:	b930      	cbnz	r0, 80a2886 <log+0x3a>
 80a2878:	2200      	movs	r2, #0
 80a287a:	2300      	movs	r3, #0
 80a287c:	4620      	mov	r0, r4
 80a287e:	4629      	mov	r1, r5
 80a2880:	f002 f888 	bl	80a4994 <__aeabi_dcmpgt>
 80a2884:	b120      	cbz	r0, 80a2890 <log+0x44>
 80a2886:	4630      	mov	r0, r6
 80a2888:	4639      	mov	r1, r7
 80a288a:	b00a      	add	sp, #40	; 0x28
 80a288c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2890:	4b2a      	ldr	r3, [pc, #168]	; (80a293c <log+0xf0>)
 80a2892:	9008      	str	r0, [sp, #32]
 80a2894:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a2898:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a289c:	9301      	str	r3, [sp, #4]
 80a289e:	f1b8 0f00 	cmp.w	r8, #0
 80a28a2:	d119      	bne.n	80a28d8 <log+0x8c>
 80a28a4:	4f26      	ldr	r7, [pc, #152]	; (80a2940 <log+0xf4>)
 80a28a6:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 80a28aa:	4620      	mov	r0, r4
 80a28ac:	4629      	mov	r1, r5
 80a28ae:	2200      	movs	r2, #0
 80a28b0:	2300      	movs	r3, #0
 80a28b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a28b6:	f002 f845 	bl	80a4944 <__aeabi_dcmpeq>
 80a28ba:	2800      	cmp	r0, #0
 80a28bc:	d034      	beq.n	80a2928 <log+0xdc>
 80a28be:	2302      	movs	r3, #2
 80a28c0:	9300      	str	r3, [sp, #0]
 80a28c2:	4668      	mov	r0, sp
 80a28c4:	f001 fb0c 	bl	80a3ee0 <matherr>
 80a28c8:	b1a8      	cbz	r0, 80a28f6 <log+0xaa>
 80a28ca:	9b08      	ldr	r3, [sp, #32]
 80a28cc:	b9c3      	cbnz	r3, 80a2900 <log+0xb4>
 80a28ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a28d2:	b00a      	add	sp, #40	; 0x28
 80a28d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a28d8:	4f1a      	ldr	r7, [pc, #104]	; (80a2944 <log+0xf8>)
 80a28da:	2600      	movs	r6, #0
 80a28dc:	4620      	mov	r0, r4
 80a28de:	4629      	mov	r1, r5
 80a28e0:	2200      	movs	r2, #0
 80a28e2:	2300      	movs	r3, #0
 80a28e4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a28e8:	f002 f82c 	bl	80a4944 <__aeabi_dcmpeq>
 80a28ec:	b168      	cbz	r0, 80a290a <log+0xbe>
 80a28ee:	2302      	movs	r3, #2
 80a28f0:	4598      	cmp	r8, r3
 80a28f2:	9300      	str	r3, [sp, #0]
 80a28f4:	d1e5      	bne.n	80a28c2 <log+0x76>
 80a28f6:	f7fe fbd7 	bl	80a10a8 <__errno>
 80a28fa:	2322      	movs	r3, #34	; 0x22
 80a28fc:	6003      	str	r3, [r0, #0]
 80a28fe:	e7e4      	b.n	80a28ca <log+0x7e>
 80a2900:	f7fe fbd2 	bl	80a10a8 <__errno>
 80a2904:	9b08      	ldr	r3, [sp, #32]
 80a2906:	6003      	str	r3, [r0, #0]
 80a2908:	e7e1      	b.n	80a28ce <log+0x82>
 80a290a:	2301      	movs	r3, #1
 80a290c:	f1b8 0f02 	cmp.w	r8, #2
 80a2910:	9300      	str	r3, [sp, #0]
 80a2912:	d10b      	bne.n	80a292c <log+0xe0>
 80a2914:	f7fe fbc8 	bl	80a10a8 <__errno>
 80a2918:	2321      	movs	r3, #33	; 0x21
 80a291a:	6003      	str	r3, [r0, #0]
 80a291c:	480a      	ldr	r0, [pc, #40]	; (80a2948 <log+0xfc>)
 80a291e:	f001 fae1 	bl	80a3ee4 <nan>
 80a2922:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a2926:	e7d0      	b.n	80a28ca <log+0x7e>
 80a2928:	2301      	movs	r3, #1
 80a292a:	9300      	str	r3, [sp, #0]
 80a292c:	4668      	mov	r0, sp
 80a292e:	f001 fad7 	bl	80a3ee0 <matherr>
 80a2932:	2800      	cmp	r0, #0
 80a2934:	d1f2      	bne.n	80a291c <log+0xd0>
 80a2936:	e7ed      	b.n	80a2914 <log+0xc8>
 80a2938:	20000304 	.word	0x20000304
 80a293c:	080a5564 	.word	0x080a5564
 80a2940:	c7efffff 	.word	0xc7efffff
 80a2944:	fff00000 	.word	0xfff00000
 80a2948:	080a5568 	.word	0x080a5568

080a294c <log10>:
 80a294c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2950:	b08b      	sub	sp, #44	; 0x2c
 80a2952:	4604      	mov	r4, r0
 80a2954:	460d      	mov	r5, r1
 80a2956:	f000 fc07 	bl	80a3168 <__ieee754_log10>
 80a295a:	4b38      	ldr	r3, [pc, #224]	; (80a2a3c <log10+0xf0>)
 80a295c:	4606      	mov	r6, r0
 80a295e:	f993 8000 	ldrsb.w	r8, [r3]
 80a2962:	460f      	mov	r7, r1
 80a2964:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80a2968:	d00e      	beq.n	80a2988 <log10+0x3c>
 80a296a:	4622      	mov	r2, r4
 80a296c:	462b      	mov	r3, r5
 80a296e:	4620      	mov	r0, r4
 80a2970:	4629      	mov	r1, r5
 80a2972:	f002 f819 	bl	80a49a8 <__aeabi_dcmpun>
 80a2976:	4681      	mov	r9, r0
 80a2978:	b930      	cbnz	r0, 80a2988 <log10+0x3c>
 80a297a:	2200      	movs	r2, #0
 80a297c:	2300      	movs	r3, #0
 80a297e:	4620      	mov	r0, r4
 80a2980:	4629      	mov	r1, r5
 80a2982:	f001 fff3 	bl	80a496c <__aeabi_dcmple>
 80a2986:	b920      	cbnz	r0, 80a2992 <log10+0x46>
 80a2988:	4630      	mov	r0, r6
 80a298a:	4639      	mov	r1, r7
 80a298c:	b00b      	add	sp, #44	; 0x2c
 80a298e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2992:	4b2b      	ldr	r3, [pc, #172]	; (80a2a40 <log10+0xf4>)
 80a2994:	f8cd 9020 	str.w	r9, [sp, #32]
 80a2998:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a299c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a29a0:	9301      	str	r3, [sp, #4]
 80a29a2:	f1b8 0f00 	cmp.w	r8, #0
 80a29a6:	d119      	bne.n	80a29dc <log10+0x90>
 80a29a8:	4f26      	ldr	r7, [pc, #152]	; (80a2a44 <log10+0xf8>)
 80a29aa:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 80a29ae:	4620      	mov	r0, r4
 80a29b0:	4629      	mov	r1, r5
 80a29b2:	2200      	movs	r2, #0
 80a29b4:	2300      	movs	r3, #0
 80a29b6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a29ba:	f001 ffc3 	bl	80a4944 <__aeabi_dcmpeq>
 80a29be:	2800      	cmp	r0, #0
 80a29c0:	d034      	beq.n	80a2a2c <log10+0xe0>
 80a29c2:	2302      	movs	r3, #2
 80a29c4:	9300      	str	r3, [sp, #0]
 80a29c6:	4668      	mov	r0, sp
 80a29c8:	f001 fa8a 	bl	80a3ee0 <matherr>
 80a29cc:	b1a8      	cbz	r0, 80a29fa <log10+0xae>
 80a29ce:	9b08      	ldr	r3, [sp, #32]
 80a29d0:	b9c3      	cbnz	r3, 80a2a04 <log10+0xb8>
 80a29d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a29d6:	b00b      	add	sp, #44	; 0x2c
 80a29d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a29dc:	4f1a      	ldr	r7, [pc, #104]	; (80a2a48 <log10+0xfc>)
 80a29de:	2600      	movs	r6, #0
 80a29e0:	4620      	mov	r0, r4
 80a29e2:	4629      	mov	r1, r5
 80a29e4:	2200      	movs	r2, #0
 80a29e6:	2300      	movs	r3, #0
 80a29e8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a29ec:	f001 ffaa 	bl	80a4944 <__aeabi_dcmpeq>
 80a29f0:	b168      	cbz	r0, 80a2a0e <log10+0xc2>
 80a29f2:	2302      	movs	r3, #2
 80a29f4:	4598      	cmp	r8, r3
 80a29f6:	9300      	str	r3, [sp, #0]
 80a29f8:	d1e5      	bne.n	80a29c6 <log10+0x7a>
 80a29fa:	f7fe fb55 	bl	80a10a8 <__errno>
 80a29fe:	2322      	movs	r3, #34	; 0x22
 80a2a00:	6003      	str	r3, [r0, #0]
 80a2a02:	e7e4      	b.n	80a29ce <log10+0x82>
 80a2a04:	f7fe fb50 	bl	80a10a8 <__errno>
 80a2a08:	9b08      	ldr	r3, [sp, #32]
 80a2a0a:	6003      	str	r3, [r0, #0]
 80a2a0c:	e7e1      	b.n	80a29d2 <log10+0x86>
 80a2a0e:	2301      	movs	r3, #1
 80a2a10:	f1b8 0f02 	cmp.w	r8, #2
 80a2a14:	9300      	str	r3, [sp, #0]
 80a2a16:	d10b      	bne.n	80a2a30 <log10+0xe4>
 80a2a18:	f7fe fb46 	bl	80a10a8 <__errno>
 80a2a1c:	2321      	movs	r3, #33	; 0x21
 80a2a1e:	6003      	str	r3, [r0, #0]
 80a2a20:	480a      	ldr	r0, [pc, #40]	; (80a2a4c <log10+0x100>)
 80a2a22:	f001 fa5f 	bl	80a3ee4 <nan>
 80a2a26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a2a2a:	e7d0      	b.n	80a29ce <log10+0x82>
 80a2a2c:	2301      	movs	r3, #1
 80a2a2e:	9300      	str	r3, [sp, #0]
 80a2a30:	4668      	mov	r0, sp
 80a2a32:	f001 fa55 	bl	80a3ee0 <matherr>
 80a2a36:	2800      	cmp	r0, #0
 80a2a38:	d1f2      	bne.n	80a2a20 <log10+0xd4>
 80a2a3a:	e7ed      	b.n	80a2a18 <log10+0xcc>
 80a2a3c:	20000304 	.word	0x20000304
 80a2a40:	080a556c 	.word	0x080a556c
 80a2a44:	c7efffff 	.word	0xc7efffff
 80a2a48:	fff00000 	.word	0xfff00000
 80a2a4c:	080a5568 	.word	0x080a5568

080a2a50 <pow>:
 80a2a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2a54:	b08d      	sub	sp, #52	; 0x34
 80a2a56:	4606      	mov	r6, r0
 80a2a58:	460f      	mov	r7, r1
 80a2a5a:	4614      	mov	r4, r2
 80a2a5c:	461d      	mov	r5, r3
 80a2a5e:	f000 fc0f 	bl	80a3280 <__ieee754_pow>
 80a2a62:	f8df 9310 	ldr.w	r9, [pc, #784]	; 80a2d74 <pow+0x324>
 80a2a66:	e9cd 0100 	strd	r0, r1, [sp]
 80a2a6a:	f999 8000 	ldrsb.w	r8, [r9]
 80a2a6e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80a2a72:	d046      	beq.n	80a2b02 <pow+0xb2>
 80a2a74:	4622      	mov	r2, r4
 80a2a76:	462b      	mov	r3, r5
 80a2a78:	4620      	mov	r0, r4
 80a2a7a:	4629      	mov	r1, r5
 80a2a7c:	f001 ff94 	bl	80a49a8 <__aeabi_dcmpun>
 80a2a80:	4683      	mov	fp, r0
 80a2a82:	2800      	cmp	r0, #0
 80a2a84:	d13d      	bne.n	80a2b02 <pow+0xb2>
 80a2a86:	4632      	mov	r2, r6
 80a2a88:	463b      	mov	r3, r7
 80a2a8a:	4630      	mov	r0, r6
 80a2a8c:	4639      	mov	r1, r7
 80a2a8e:	f001 ff8b 	bl	80a49a8 <__aeabi_dcmpun>
 80a2a92:	4682      	mov	sl, r0
 80a2a94:	2800      	cmp	r0, #0
 80a2a96:	d174      	bne.n	80a2b82 <pow+0x132>
 80a2a98:	4630      	mov	r0, r6
 80a2a9a:	4639      	mov	r1, r7
 80a2a9c:	2200      	movs	r2, #0
 80a2a9e:	2300      	movs	r3, #0
 80a2aa0:	f001 ff50 	bl	80a4944 <__aeabi_dcmpeq>
 80a2aa4:	2800      	cmp	r0, #0
 80a2aa6:	d033      	beq.n	80a2b10 <pow+0xc0>
 80a2aa8:	2200      	movs	r2, #0
 80a2aaa:	2300      	movs	r3, #0
 80a2aac:	4620      	mov	r0, r4
 80a2aae:	4629      	mov	r1, r5
 80a2ab0:	f001 ff48 	bl	80a4944 <__aeabi_dcmpeq>
 80a2ab4:	4683      	mov	fp, r0
 80a2ab6:	b1b8      	cbz	r0, 80a2ae8 <pow+0x98>
 80a2ab8:	4aa9      	ldr	r2, [pc, #676]	; (80a2d60 <pow+0x310>)
 80a2aba:	2301      	movs	r3, #1
 80a2abc:	2000      	movs	r0, #0
 80a2abe:	2100      	movs	r1, #0
 80a2ac0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80a2ac4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a2ac8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a2acc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a2ad0:	9203      	str	r2, [sp, #12]
 80a2ad2:	9302      	str	r3, [sp, #8]
 80a2ad4:	f1b8 0f00 	cmp.w	r8, #0
 80a2ad8:	d06c      	beq.n	80a2bb4 <pow+0x164>
 80a2ada:	4ba2      	ldr	r3, [pc, #648]	; (80a2d64 <pow+0x314>)
 80a2adc:	2200      	movs	r2, #0
 80a2ade:	4610      	mov	r0, r2
 80a2ae0:	4619      	mov	r1, r3
 80a2ae2:	b00d      	add	sp, #52	; 0x34
 80a2ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2ae8:	4620      	mov	r0, r4
 80a2aea:	4629      	mov	r1, r5
 80a2aec:	f001 f9f2 	bl	80a3ed4 <finite>
 80a2af0:	b138      	cbz	r0, 80a2b02 <pow+0xb2>
 80a2af2:	2200      	movs	r2, #0
 80a2af4:	2300      	movs	r3, #0
 80a2af6:	4620      	mov	r0, r4
 80a2af8:	4629      	mov	r1, r5
 80a2afa:	f001 ff2d 	bl	80a4958 <__aeabi_dcmplt>
 80a2afe:	2800      	cmp	r0, #0
 80a2b00:	d16a      	bne.n	80a2bd8 <pow+0x188>
 80a2b02:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a2b06:	4610      	mov	r0, r2
 80a2b08:	4619      	mov	r1, r3
 80a2b0a:	b00d      	add	sp, #52	; 0x34
 80a2b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2b10:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a2b14:	f001 f9de 	bl	80a3ed4 <finite>
 80a2b18:	4680      	mov	r8, r0
 80a2b1a:	2800      	cmp	r0, #0
 80a2b1c:	d07d      	beq.n	80a2c1a <pow+0x1ca>
 80a2b1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a2b22:	f04f 0a00 	mov.w	sl, #0
 80a2b26:	f04f 0b00 	mov.w	fp, #0
 80a2b2a:	4652      	mov	r2, sl
 80a2b2c:	465b      	mov	r3, fp
 80a2b2e:	f001 ff09 	bl	80a4944 <__aeabi_dcmpeq>
 80a2b32:	2800      	cmp	r0, #0
 80a2b34:	d0e5      	beq.n	80a2b02 <pow+0xb2>
 80a2b36:	4630      	mov	r0, r6
 80a2b38:	4639      	mov	r1, r7
 80a2b3a:	f001 f9cb 	bl	80a3ed4 <finite>
 80a2b3e:	2800      	cmp	r0, #0
 80a2b40:	d0df      	beq.n	80a2b02 <pow+0xb2>
 80a2b42:	4620      	mov	r0, r4
 80a2b44:	4629      	mov	r1, r5
 80a2b46:	f001 f9c5 	bl	80a3ed4 <finite>
 80a2b4a:	2800      	cmp	r0, #0
 80a2b4c:	d0d9      	beq.n	80a2b02 <pow+0xb2>
 80a2b4e:	f999 3000 	ldrsb.w	r3, [r9]
 80a2b52:	4883      	ldr	r0, [pc, #524]	; (80a2d60 <pow+0x310>)
 80a2b54:	2104      	movs	r1, #4
 80a2b56:	2200      	movs	r2, #0
 80a2b58:	2b02      	cmp	r3, #2
 80a2b5a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a2b5e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a2b62:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a2b66:	9003      	str	r0, [sp, #12]
 80a2b68:	9102      	str	r1, [sp, #8]
 80a2b6a:	920a      	str	r2, [sp, #40]	; 0x28
 80a2b6c:	d004      	beq.n	80a2b78 <pow+0x128>
 80a2b6e:	a802      	add	r0, sp, #8
 80a2b70:	f001 f9b6 	bl	80a3ee0 <matherr>
 80a2b74:	2800      	cmp	r0, #0
 80a2b76:	d147      	bne.n	80a2c08 <pow+0x1b8>
 80a2b78:	f7fe fa96 	bl	80a10a8 <__errno>
 80a2b7c:	2322      	movs	r3, #34	; 0x22
 80a2b7e:	6003      	str	r3, [r0, #0]
 80a2b80:	e042      	b.n	80a2c08 <pow+0x1b8>
 80a2b82:	2200      	movs	r2, #0
 80a2b84:	2300      	movs	r3, #0
 80a2b86:	4620      	mov	r0, r4
 80a2b88:	4629      	mov	r1, r5
 80a2b8a:	f001 fedb 	bl	80a4944 <__aeabi_dcmpeq>
 80a2b8e:	2800      	cmp	r0, #0
 80a2b90:	d0b7      	beq.n	80a2b02 <pow+0xb2>
 80a2b92:	4b74      	ldr	r3, [pc, #464]	; (80a2d64 <pow+0x314>)
 80a2b94:	4872      	ldr	r0, [pc, #456]	; (80a2d60 <pow+0x310>)
 80a2b96:	2200      	movs	r2, #0
 80a2b98:	2101      	movs	r1, #1
 80a2b9a:	f1b8 0f02 	cmp.w	r8, #2
 80a2b9e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a2ba2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a2ba6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a2baa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a2bae:	9003      	str	r0, [sp, #12]
 80a2bb0:	9102      	str	r1, [sp, #8]
 80a2bb2:	d0a8      	beq.n	80a2b06 <pow+0xb6>
 80a2bb4:	a802      	add	r0, sp, #8
 80a2bb6:	f001 f993 	bl	80a3ee0 <matherr>
 80a2bba:	2800      	cmp	r0, #0
 80a2bbc:	d07e      	beq.n	80a2cbc <pow+0x26c>
 80a2bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a2bc0:	b343      	cbz	r3, 80a2c14 <pow+0x1c4>
 80a2bc2:	f7fe fa71 	bl	80a10a8 <__errno>
 80a2bc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a2bca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a2bcc:	6001      	str	r1, [r0, #0]
 80a2bce:	4610      	mov	r0, r2
 80a2bd0:	4619      	mov	r1, r3
 80a2bd2:	b00d      	add	sp, #52	; 0x34
 80a2bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2bd8:	4961      	ldr	r1, [pc, #388]	; (80a2d60 <pow+0x310>)
 80a2bda:	f999 3000 	ldrsb.w	r3, [r9]
 80a2bde:	2201      	movs	r2, #1
 80a2be0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a2be4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a2be8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a2bec:	9103      	str	r1, [sp, #12]
 80a2bee:	9202      	str	r2, [sp, #8]
 80a2bf0:	2b00      	cmp	r3, #0
 80a2bf2:	d068      	beq.n	80a2cc6 <pow+0x276>
 80a2bf4:	495c      	ldr	r1, [pc, #368]	; (80a2d68 <pow+0x318>)
 80a2bf6:	2000      	movs	r0, #0
 80a2bf8:	2b02      	cmp	r3, #2
 80a2bfa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a2bfe:	d166      	bne.n	80a2cce <pow+0x27e>
 80a2c00:	f7fe fa52 	bl	80a10a8 <__errno>
 80a2c04:	2321      	movs	r3, #33	; 0x21
 80a2c06:	6003      	str	r3, [r0, #0]
 80a2c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a2c0a:	b11b      	cbz	r3, 80a2c14 <pow+0x1c4>
 80a2c0c:	f7fe fa4c 	bl	80a10a8 <__errno>
 80a2c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a2c12:	6003      	str	r3, [r0, #0]
 80a2c14:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a2c18:	e775      	b.n	80a2b06 <pow+0xb6>
 80a2c1a:	4630      	mov	r0, r6
 80a2c1c:	4639      	mov	r1, r7
 80a2c1e:	f001 f959 	bl	80a3ed4 <finite>
 80a2c22:	2800      	cmp	r0, #0
 80a2c24:	f43f af7b 	beq.w	80a2b1e <pow+0xce>
 80a2c28:	4620      	mov	r0, r4
 80a2c2a:	4629      	mov	r1, r5
 80a2c2c:	f001 f952 	bl	80a3ed4 <finite>
 80a2c30:	2800      	cmp	r0, #0
 80a2c32:	f43f af74 	beq.w	80a2b1e <pow+0xce>
 80a2c36:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a2c3a:	4610      	mov	r0, r2
 80a2c3c:	4619      	mov	r1, r3
 80a2c3e:	f001 feb3 	bl	80a49a8 <__aeabi_dcmpun>
 80a2c42:	2800      	cmp	r0, #0
 80a2c44:	d16f      	bne.n	80a2d26 <pow+0x2d6>
 80a2c46:	4b46      	ldr	r3, [pc, #280]	; (80a2d60 <pow+0x310>)
 80a2c48:	f999 8000 	ldrsb.w	r8, [r9]
 80a2c4c:	9303      	str	r3, [sp, #12]
 80a2c4e:	2303      	movs	r3, #3
 80a2c50:	900a      	str	r0, [sp, #40]	; 0x28
 80a2c52:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a2c56:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a2c5a:	9302      	str	r3, [sp, #8]
 80a2c5c:	f1b8 0f00 	cmp.w	r8, #0
 80a2c60:	d13b      	bne.n	80a2cda <pow+0x28a>
 80a2c62:	f8df b114 	ldr.w	fp, [pc, #276]	; 80a2d78 <pow+0x328>
 80a2c66:	f04f 4a60 	mov.w	sl, #3758096384	; 0xe0000000
 80a2c6a:	2200      	movs	r2, #0
 80a2c6c:	2300      	movs	r3, #0
 80a2c6e:	4630      	mov	r0, r6
 80a2c70:	4639      	mov	r1, r7
 80a2c72:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a2c76:	f001 fe6f 	bl	80a4958 <__aeabi_dcmplt>
 80a2c7a:	2800      	cmp	r0, #0
 80a2c7c:	f43f af77 	beq.w	80a2b6e <pow+0x11e>
 80a2c80:	2200      	movs	r2, #0
 80a2c82:	4b3a      	ldr	r3, [pc, #232]	; (80a2d6c <pow+0x31c>)
 80a2c84:	4620      	mov	r0, r4
 80a2c86:	4629      	mov	r1, r5
 80a2c88:	f001 fbf4 	bl	80a4474 <__aeabi_dmul>
 80a2c8c:	4604      	mov	r4, r0
 80a2c8e:	460d      	mov	r5, r1
 80a2c90:	f001 f92e 	bl	80a3ef0 <rint>
 80a2c94:	4602      	mov	r2, r0
 80a2c96:	460b      	mov	r3, r1
 80a2c98:	4620      	mov	r0, r4
 80a2c9a:	4629      	mov	r1, r5
 80a2c9c:	f001 fe52 	bl	80a4944 <__aeabi_dcmpeq>
 80a2ca0:	2800      	cmp	r0, #0
 80a2ca2:	d13d      	bne.n	80a2d20 <pow+0x2d0>
 80a2ca4:	4b32      	ldr	r3, [pc, #200]	; (80a2d70 <pow+0x320>)
 80a2ca6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2caa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a2cae:	f999 8000 	ldrsb.w	r8, [r9]
 80a2cb2:	f1b8 0f02 	cmp.w	r8, #2
 80a2cb6:	f47f af5a 	bne.w	80a2b6e <pow+0x11e>
 80a2cba:	e75d      	b.n	80a2b78 <pow+0x128>
 80a2cbc:	f7fe f9f4 	bl	80a10a8 <__errno>
 80a2cc0:	2321      	movs	r3, #33	; 0x21
 80a2cc2:	6003      	str	r3, [r0, #0]
 80a2cc4:	e77b      	b.n	80a2bbe <pow+0x16e>
 80a2cc6:	2300      	movs	r3, #0
 80a2cc8:	2400      	movs	r4, #0
 80a2cca:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80a2cce:	a802      	add	r0, sp, #8
 80a2cd0:	f001 f906 	bl	80a3ee0 <matherr>
 80a2cd4:	2800      	cmp	r0, #0
 80a2cd6:	d197      	bne.n	80a2c08 <pow+0x1b8>
 80a2cd8:	e792      	b.n	80a2c00 <pow+0x1b0>
 80a2cda:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 80a2d7c <pow+0x32c>
 80a2cde:	f04f 0a00 	mov.w	sl, #0
 80a2ce2:	2200      	movs	r2, #0
 80a2ce4:	2300      	movs	r3, #0
 80a2ce6:	4630      	mov	r0, r6
 80a2ce8:	4639      	mov	r1, r7
 80a2cea:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a2cee:	f001 fe33 	bl	80a4958 <__aeabi_dcmplt>
 80a2cf2:	2800      	cmp	r0, #0
 80a2cf4:	d0dd      	beq.n	80a2cb2 <pow+0x262>
 80a2cf6:	2200      	movs	r2, #0
 80a2cf8:	4b1c      	ldr	r3, [pc, #112]	; (80a2d6c <pow+0x31c>)
 80a2cfa:	4620      	mov	r0, r4
 80a2cfc:	4629      	mov	r1, r5
 80a2cfe:	f001 fbb9 	bl	80a4474 <__aeabi_dmul>
 80a2d02:	4604      	mov	r4, r0
 80a2d04:	460d      	mov	r5, r1
 80a2d06:	f001 f8f3 	bl	80a3ef0 <rint>
 80a2d0a:	4602      	mov	r2, r0
 80a2d0c:	460b      	mov	r3, r1
 80a2d0e:	4620      	mov	r0, r4
 80a2d10:	4629      	mov	r1, r5
 80a2d12:	f001 fe17 	bl	80a4944 <__aeabi_dcmpeq>
 80a2d16:	b918      	cbnz	r0, 80a2d20 <pow+0x2d0>
 80a2d18:	4b13      	ldr	r3, [pc, #76]	; (80a2d68 <pow+0x318>)
 80a2d1a:	2200      	movs	r2, #0
 80a2d1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a2d20:	f999 8000 	ldrsb.w	r8, [r9]
 80a2d24:	e7c5      	b.n	80a2cb2 <pow+0x262>
 80a2d26:	4a0e      	ldr	r2, [pc, #56]	; (80a2d60 <pow+0x310>)
 80a2d28:	f999 9000 	ldrsb.w	r9, [r9]
 80a2d2c:	2301      	movs	r3, #1
 80a2d2e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80a2d32:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a2d36:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a2d3a:	9203      	str	r2, [sp, #12]
 80a2d3c:	9302      	str	r3, [sp, #8]
 80a2d3e:	f1b9 0f00 	cmp.w	r9, #0
 80a2d42:	d0c0      	beq.n	80a2cc6 <pow+0x276>
 80a2d44:	2200      	movs	r2, #0
 80a2d46:	2300      	movs	r3, #0
 80a2d48:	4610      	mov	r0, r2
 80a2d4a:	4619      	mov	r1, r3
 80a2d4c:	f001 fcbc 	bl	80a46c8 <__aeabi_ddiv>
 80a2d50:	f1b9 0f02 	cmp.w	r9, #2
 80a2d54:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a2d58:	f43f af52 	beq.w	80a2c00 <pow+0x1b0>
 80a2d5c:	e7b7      	b.n	80a2cce <pow+0x27e>
 80a2d5e:	bf00      	nop
 80a2d60:	080a5574 	.word	0x080a5574
 80a2d64:	3ff00000 	.word	0x3ff00000
 80a2d68:	fff00000 	.word	0xfff00000
 80a2d6c:	3fe00000 	.word	0x3fe00000
 80a2d70:	c7efffff 	.word	0xc7efffff
 80a2d74:	20000304 	.word	0x20000304
 80a2d78:	47efffff 	.word	0x47efffff
 80a2d7c:	7ff00000 	.word	0x7ff00000

080a2d80 <__ieee754_log>:
 80a2d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2d84:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2d88:	b085      	sub	sp, #20
 80a2d8a:	4606      	mov	r6, r0
 80a2d8c:	460f      	mov	r7, r1
 80a2d8e:	460b      	mov	r3, r1
 80a2d90:	da5a      	bge.n	80a2e48 <__ieee754_log+0xc8>
 80a2d92:	4602      	mov	r2, r0
 80a2d94:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80a2d98:	4322      	orrs	r2, r4
 80a2d9a:	f000 80f7 	beq.w	80a2f8c <__ieee754_log+0x20c>
 80a2d9e:	2900      	cmp	r1, #0
 80a2da0:	f2c0 8179 	blt.w	80a3096 <__ieee754_log+0x316>
 80a2da4:	2200      	movs	r2, #0
 80a2da6:	4bd6      	ldr	r3, [pc, #856]	; (80a3100 <__ieee754_log+0x380>)
 80a2da8:	f001 fb64 	bl	80a4474 <__aeabi_dmul>
 80a2dac:	460b      	mov	r3, r1
 80a2dae:	460f      	mov	r7, r1
 80a2db0:	49d4      	ldr	r1, [pc, #848]	; (80a3104 <__ieee754_log+0x384>)
 80a2db2:	4606      	mov	r6, r0
 80a2db4:	428b      	cmp	r3, r1
 80a2db6:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80a2dba:	dc49      	bgt.n	80a2e50 <__ieee754_log+0xd0>
 80a2dbc:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80a2dc0:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
 80a2dc4:	f604 7464 	addw	r4, r4, #3940	; 0xf64
 80a2dc8:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
 80a2dcc:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
 80a2dd0:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80a2dd4:	151b      	asrs	r3, r3, #20
 80a2dd6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a2dda:	ea41 0705 	orr.w	r7, r1, r5
 80a2dde:	189c      	adds	r4, r3, r2
 80a2de0:	4630      	mov	r0, r6
 80a2de2:	2200      	movs	r2, #0
 80a2de4:	4bc8      	ldr	r3, [pc, #800]	; (80a3108 <__ieee754_log+0x388>)
 80a2de6:	4639      	mov	r1, r7
 80a2de8:	eb04 541e 	add.w	r4, r4, lr, lsr #20
 80a2dec:	f001 f98e 	bl	80a410c <__aeabi_dsub>
 80a2df0:	1cab      	adds	r3, r5, #2
 80a2df2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a2df6:	2b02      	cmp	r3, #2
 80a2df8:	4682      	mov	sl, r0
 80a2dfa:	468b      	mov	fp, r1
 80a2dfc:	f04f 0200 	mov.w	r2, #0
 80a2e00:	dc2f      	bgt.n	80a2e62 <__ieee754_log+0xe2>
 80a2e02:	2300      	movs	r3, #0
 80a2e04:	f001 fd9e 	bl	80a4944 <__aeabi_dcmpeq>
 80a2e08:	2800      	cmp	r0, #0
 80a2e0a:	f000 80c8 	beq.w	80a2f9e <__ieee754_log+0x21e>
 80a2e0e:	2c00      	cmp	r4, #0
 80a2e10:	f000 814a 	beq.w	80a30a8 <__ieee754_log+0x328>
 80a2e14:	4620      	mov	r0, r4
 80a2e16:	f001 fac7 	bl	80a43a8 <__aeabi_i2d>
 80a2e1a:	a3a5      	add	r3, pc, #660	; (adr r3, 80a30b0 <__ieee754_log+0x330>)
 80a2e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2e20:	4606      	mov	r6, r0
 80a2e22:	460f      	mov	r7, r1
 80a2e24:	f001 fb26 	bl	80a4474 <__aeabi_dmul>
 80a2e28:	a3a3      	add	r3, pc, #652	; (adr r3, 80a30b8 <__ieee754_log+0x338>)
 80a2e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2e2e:	4604      	mov	r4, r0
 80a2e30:	460d      	mov	r5, r1
 80a2e32:	4630      	mov	r0, r6
 80a2e34:	4639      	mov	r1, r7
 80a2e36:	f001 fb1d 	bl	80a4474 <__aeabi_dmul>
 80a2e3a:	4602      	mov	r2, r0
 80a2e3c:	460b      	mov	r3, r1
 80a2e3e:	4620      	mov	r0, r4
 80a2e40:	4629      	mov	r1, r5
 80a2e42:	f001 f965 	bl	80a4110 <__adddf3>
 80a2e46:	e009      	b.n	80a2e5c <__ieee754_log+0xdc>
 80a2e48:	49ae      	ldr	r1, [pc, #696]	; (80a3104 <__ieee754_log+0x384>)
 80a2e4a:	2200      	movs	r2, #0
 80a2e4c:	428b      	cmp	r3, r1
 80a2e4e:	ddb5      	ble.n	80a2dbc <__ieee754_log+0x3c>
 80a2e50:	4632      	mov	r2, r6
 80a2e52:	463b      	mov	r3, r7
 80a2e54:	4630      	mov	r0, r6
 80a2e56:	4639      	mov	r1, r7
 80a2e58:	f001 f95a 	bl	80a4110 <__adddf3>
 80a2e5c:	b005      	add	sp, #20
 80a2e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2e62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a2e66:	f001 f953 	bl	80a4110 <__adddf3>
 80a2e6a:	4602      	mov	r2, r0
 80a2e6c:	460b      	mov	r3, r1
 80a2e6e:	4650      	mov	r0, sl
 80a2e70:	4659      	mov	r1, fp
 80a2e72:	f001 fc29 	bl	80a46c8 <__aeabi_ddiv>
 80a2e76:	4606      	mov	r6, r0
 80a2e78:	4620      	mov	r0, r4
 80a2e7a:	460f      	mov	r7, r1
 80a2e7c:	f001 fa94 	bl	80a43a8 <__aeabi_i2d>
 80a2e80:	4632      	mov	r2, r6
 80a2e82:	e9cd 0100 	strd	r0, r1, [sp]
 80a2e86:	463b      	mov	r3, r7
 80a2e88:	4630      	mov	r0, r6
 80a2e8a:	4639      	mov	r1, r7
 80a2e8c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80a2e90:	f001 faf0 	bl	80a4474 <__aeabi_dmul>
 80a2e94:	4602      	mov	r2, r0
 80a2e96:	460b      	mov	r3, r1
 80a2e98:	4680      	mov	r8, r0
 80a2e9a:	4689      	mov	r9, r1
 80a2e9c:	f001 faea 	bl	80a4474 <__aeabi_dmul>
 80a2ea0:	a387      	add	r3, pc, #540	; (adr r3, 80a30c0 <__ieee754_log+0x340>)
 80a2ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2ea6:	4606      	mov	r6, r0
 80a2ea8:	460f      	mov	r7, r1
 80a2eaa:	f001 fae3 	bl	80a4474 <__aeabi_dmul>
 80a2eae:	a386      	add	r3, pc, #536	; (adr r3, 80a30c8 <__ieee754_log+0x348>)
 80a2eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2eb4:	f001 f92c 	bl	80a4110 <__adddf3>
 80a2eb8:	4632      	mov	r2, r6
 80a2eba:	463b      	mov	r3, r7
 80a2ebc:	f001 fada 	bl	80a4474 <__aeabi_dmul>
 80a2ec0:	a383      	add	r3, pc, #524	; (adr r3, 80a30d0 <__ieee754_log+0x350>)
 80a2ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2ec6:	f001 f923 	bl	80a4110 <__adddf3>
 80a2eca:	4632      	mov	r2, r6
 80a2ecc:	463b      	mov	r3, r7
 80a2ece:	f001 fad1 	bl	80a4474 <__aeabi_dmul>
 80a2ed2:	a381      	add	r3, pc, #516	; (adr r3, 80a30d8 <__ieee754_log+0x358>)
 80a2ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2ed8:	f001 f91a 	bl	80a4110 <__adddf3>
 80a2edc:	4642      	mov	r2, r8
 80a2ede:	464b      	mov	r3, r9
 80a2ee0:	f001 fac8 	bl	80a4474 <__aeabi_dmul>
 80a2ee4:	a37e      	add	r3, pc, #504	; (adr r3, 80a30e0 <__ieee754_log+0x360>)
 80a2ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2eea:	4680      	mov	r8, r0
 80a2eec:	4689      	mov	r9, r1
 80a2eee:	4630      	mov	r0, r6
 80a2ef0:	4639      	mov	r1, r7
 80a2ef2:	f001 fabf 	bl	80a4474 <__aeabi_dmul>
 80a2ef6:	a37c      	add	r3, pc, #496	; (adr r3, 80a30e8 <__ieee754_log+0x368>)
 80a2ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2efc:	f001 f908 	bl	80a4110 <__adddf3>
 80a2f00:	4632      	mov	r2, r6
 80a2f02:	463b      	mov	r3, r7
 80a2f04:	f001 fab6 	bl	80a4474 <__aeabi_dmul>
 80a2f08:	a379      	add	r3, pc, #484	; (adr r3, 80a30f0 <__ieee754_log+0x370>)
 80a2f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2f0e:	f001 f8ff 	bl	80a4110 <__adddf3>
 80a2f12:	4632      	mov	r2, r6
 80a2f14:	463b      	mov	r3, r7
 80a2f16:	f001 faad 	bl	80a4474 <__aeabi_dmul>
 80a2f1a:	460b      	mov	r3, r1
 80a2f1c:	4602      	mov	r2, r0
 80a2f1e:	4649      	mov	r1, r9
 80a2f20:	4640      	mov	r0, r8
 80a2f22:	f001 f8f5 	bl	80a4110 <__adddf3>
 80a2f26:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80a2f2a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80a2f2e:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80a2f32:	3551      	adds	r5, #81	; 0x51
 80a2f34:	431d      	orrs	r5, r3
 80a2f36:	2d00      	cmp	r5, #0
 80a2f38:	4680      	mov	r8, r0
 80a2f3a:	4689      	mov	r9, r1
 80a2f3c:	dd56      	ble.n	80a2fec <__ieee754_log+0x26c>
 80a2f3e:	2200      	movs	r2, #0
 80a2f40:	4b72      	ldr	r3, [pc, #456]	; (80a310c <__ieee754_log+0x38c>)
 80a2f42:	4650      	mov	r0, sl
 80a2f44:	4659      	mov	r1, fp
 80a2f46:	f001 fa95 	bl	80a4474 <__aeabi_dmul>
 80a2f4a:	4652      	mov	r2, sl
 80a2f4c:	465b      	mov	r3, fp
 80a2f4e:	f001 fa91 	bl	80a4474 <__aeabi_dmul>
 80a2f52:	4606      	mov	r6, r0
 80a2f54:	460f      	mov	r7, r1
 80a2f56:	2c00      	cmp	r4, #0
 80a2f58:	d168      	bne.n	80a302c <__ieee754_log+0x2ac>
 80a2f5a:	4632      	mov	r2, r6
 80a2f5c:	463b      	mov	r3, r7
 80a2f5e:	4640      	mov	r0, r8
 80a2f60:	4649      	mov	r1, r9
 80a2f62:	f001 f8d5 	bl	80a4110 <__adddf3>
 80a2f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a2f6a:	f001 fa83 	bl	80a4474 <__aeabi_dmul>
 80a2f6e:	4602      	mov	r2, r0
 80a2f70:	460b      	mov	r3, r1
 80a2f72:	4630      	mov	r0, r6
 80a2f74:	4639      	mov	r1, r7
 80a2f76:	f001 f8c9 	bl	80a410c <__aeabi_dsub>
 80a2f7a:	4602      	mov	r2, r0
 80a2f7c:	460b      	mov	r3, r1
 80a2f7e:	4650      	mov	r0, sl
 80a2f80:	4659      	mov	r1, fp
 80a2f82:	f001 f8c3 	bl	80a410c <__aeabi_dsub>
 80a2f86:	b005      	add	sp, #20
 80a2f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2f8c:	2200      	movs	r2, #0
 80a2f8e:	2300      	movs	r3, #0
 80a2f90:	2000      	movs	r0, #0
 80a2f92:	495f      	ldr	r1, [pc, #380]	; (80a3110 <__ieee754_log+0x390>)
 80a2f94:	f001 fb98 	bl	80a46c8 <__aeabi_ddiv>
 80a2f98:	b005      	add	sp, #20
 80a2f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2f9e:	a356      	add	r3, pc, #344	; (adr r3, 80a30f8 <__ieee754_log+0x378>)
 80a2fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2fa4:	4650      	mov	r0, sl
 80a2fa6:	4659      	mov	r1, fp
 80a2fa8:	f001 fa64 	bl	80a4474 <__aeabi_dmul>
 80a2fac:	4602      	mov	r2, r0
 80a2fae:	460b      	mov	r3, r1
 80a2fb0:	2000      	movs	r0, #0
 80a2fb2:	4956      	ldr	r1, [pc, #344]	; (80a310c <__ieee754_log+0x38c>)
 80a2fb4:	f001 f8aa 	bl	80a410c <__aeabi_dsub>
 80a2fb8:	4652      	mov	r2, sl
 80a2fba:	4606      	mov	r6, r0
 80a2fbc:	460f      	mov	r7, r1
 80a2fbe:	465b      	mov	r3, fp
 80a2fc0:	4650      	mov	r0, sl
 80a2fc2:	4659      	mov	r1, fp
 80a2fc4:	f001 fa56 	bl	80a4474 <__aeabi_dmul>
 80a2fc8:	4602      	mov	r2, r0
 80a2fca:	460b      	mov	r3, r1
 80a2fcc:	4630      	mov	r0, r6
 80a2fce:	4639      	mov	r1, r7
 80a2fd0:	f001 fa50 	bl	80a4474 <__aeabi_dmul>
 80a2fd4:	4606      	mov	r6, r0
 80a2fd6:	460f      	mov	r7, r1
 80a2fd8:	2c00      	cmp	r4, #0
 80a2fda:	f040 809b 	bne.w	80a3114 <__ieee754_log+0x394>
 80a2fde:	4602      	mov	r2, r0
 80a2fe0:	460b      	mov	r3, r1
 80a2fe2:	4650      	mov	r0, sl
 80a2fe4:	4659      	mov	r1, fp
 80a2fe6:	f001 f891 	bl	80a410c <__aeabi_dsub>
 80a2fea:	e737      	b.n	80a2e5c <__ieee754_log+0xdc>
 80a2fec:	2c00      	cmp	r4, #0
 80a2fee:	f000 80a5 	beq.w	80a313c <__ieee754_log+0x3bc>
 80a2ff2:	a32f      	add	r3, pc, #188	; (adr r3, 80a30b0 <__ieee754_log+0x330>)
 80a2ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2ff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a2ffc:	f001 fa3a 	bl	80a4474 <__aeabi_dmul>
 80a3000:	4642      	mov	r2, r8
 80a3002:	464b      	mov	r3, r9
 80a3004:	4604      	mov	r4, r0
 80a3006:	460d      	mov	r5, r1
 80a3008:	4650      	mov	r0, sl
 80a300a:	4659      	mov	r1, fp
 80a300c:	f001 f87e 	bl	80a410c <__aeabi_dsub>
 80a3010:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3014:	f001 fa2e 	bl	80a4474 <__aeabi_dmul>
 80a3018:	a327      	add	r3, pc, #156	; (adr r3, 80a30b8 <__ieee754_log+0x338>)
 80a301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a301e:	4606      	mov	r6, r0
 80a3020:	460f      	mov	r7, r1
 80a3022:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3026:	f001 fa25 	bl	80a4474 <__aeabi_dmul>
 80a302a:	e021      	b.n	80a3070 <__ieee754_log+0x2f0>
 80a302c:	a320      	add	r3, pc, #128	; (adr r3, 80a30b0 <__ieee754_log+0x330>)
 80a302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3032:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3036:	f001 fa1d 	bl	80a4474 <__aeabi_dmul>
 80a303a:	4632      	mov	r2, r6
 80a303c:	463b      	mov	r3, r7
 80a303e:	4604      	mov	r4, r0
 80a3040:	460d      	mov	r5, r1
 80a3042:	4640      	mov	r0, r8
 80a3044:	4649      	mov	r1, r9
 80a3046:	f001 f863 	bl	80a4110 <__adddf3>
 80a304a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a304e:	f001 fa11 	bl	80a4474 <__aeabi_dmul>
 80a3052:	a319      	add	r3, pc, #100	; (adr r3, 80a30b8 <__ieee754_log+0x338>)
 80a3054:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3058:	4680      	mov	r8, r0
 80a305a:	4689      	mov	r9, r1
 80a305c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3060:	f001 fa08 	bl	80a4474 <__aeabi_dmul>
 80a3064:	4602      	mov	r2, r0
 80a3066:	460b      	mov	r3, r1
 80a3068:	4640      	mov	r0, r8
 80a306a:	4649      	mov	r1, r9
 80a306c:	f001 f850 	bl	80a4110 <__adddf3>
 80a3070:	4602      	mov	r2, r0
 80a3072:	460b      	mov	r3, r1
 80a3074:	4630      	mov	r0, r6
 80a3076:	4639      	mov	r1, r7
 80a3078:	f001 f848 	bl	80a410c <__aeabi_dsub>
 80a307c:	4652      	mov	r2, sl
 80a307e:	465b      	mov	r3, fp
 80a3080:	f001 f844 	bl	80a410c <__aeabi_dsub>
 80a3084:	4602      	mov	r2, r0
 80a3086:	460b      	mov	r3, r1
 80a3088:	4620      	mov	r0, r4
 80a308a:	4629      	mov	r1, r5
 80a308c:	f001 f83e 	bl	80a410c <__aeabi_dsub>
 80a3090:	b005      	add	sp, #20
 80a3092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3096:	4602      	mov	r2, r0
 80a3098:	460b      	mov	r3, r1
 80a309a:	f001 f837 	bl	80a410c <__aeabi_dsub>
 80a309e:	2200      	movs	r2, #0
 80a30a0:	2300      	movs	r3, #0
 80a30a2:	f001 fb11 	bl	80a46c8 <__aeabi_ddiv>
 80a30a6:	e6d9      	b.n	80a2e5c <__ieee754_log+0xdc>
 80a30a8:	2000      	movs	r0, #0
 80a30aa:	2100      	movs	r1, #0
 80a30ac:	e6d6      	b.n	80a2e5c <__ieee754_log+0xdc>
 80a30ae:	bf00      	nop
 80a30b0:	fee00000 	.word	0xfee00000
 80a30b4:	3fe62e42 	.word	0x3fe62e42
 80a30b8:	35793c76 	.word	0x35793c76
 80a30bc:	3dea39ef 	.word	0x3dea39ef
 80a30c0:	df3e5244 	.word	0xdf3e5244
 80a30c4:	3fc2f112 	.word	0x3fc2f112
 80a30c8:	96cb03de 	.word	0x96cb03de
 80a30cc:	3fc74664 	.word	0x3fc74664
 80a30d0:	94229359 	.word	0x94229359
 80a30d4:	3fd24924 	.word	0x3fd24924
 80a30d8:	55555593 	.word	0x55555593
 80a30dc:	3fe55555 	.word	0x3fe55555
 80a30e0:	d078c69f 	.word	0xd078c69f
 80a30e4:	3fc39a09 	.word	0x3fc39a09
 80a30e8:	1d8e78af 	.word	0x1d8e78af
 80a30ec:	3fcc71c5 	.word	0x3fcc71c5
 80a30f0:	9997fa04 	.word	0x9997fa04
 80a30f4:	3fd99999 	.word	0x3fd99999
 80a30f8:	55555555 	.word	0x55555555
 80a30fc:	3fd55555 	.word	0x3fd55555
 80a3100:	43500000 	.word	0x43500000
 80a3104:	7fefffff 	.word	0x7fefffff
 80a3108:	3ff00000 	.word	0x3ff00000
 80a310c:	3fe00000 	.word	0x3fe00000
 80a3110:	c3500000 	.word	0xc3500000
 80a3114:	4620      	mov	r0, r4
 80a3116:	f001 f947 	bl	80a43a8 <__aeabi_i2d>
 80a311a:	a30f      	add	r3, pc, #60	; (adr r3, 80a3158 <__ieee754_log+0x3d8>)
 80a311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3120:	4680      	mov	r8, r0
 80a3122:	4689      	mov	r9, r1
 80a3124:	f001 f9a6 	bl	80a4474 <__aeabi_dmul>
 80a3128:	a30d      	add	r3, pc, #52	; (adr r3, 80a3160 <__ieee754_log+0x3e0>)
 80a312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a312e:	4604      	mov	r4, r0
 80a3130:	460d      	mov	r5, r1
 80a3132:	4640      	mov	r0, r8
 80a3134:	4649      	mov	r1, r9
 80a3136:	f001 f99d 	bl	80a4474 <__aeabi_dmul>
 80a313a:	e799      	b.n	80a3070 <__ieee754_log+0x2f0>
 80a313c:	4602      	mov	r2, r0
 80a313e:	460b      	mov	r3, r1
 80a3140:	4650      	mov	r0, sl
 80a3142:	4659      	mov	r1, fp
 80a3144:	f000 ffe2 	bl	80a410c <__aeabi_dsub>
 80a3148:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a314c:	f001 f992 	bl	80a4474 <__aeabi_dmul>
 80a3150:	e713      	b.n	80a2f7a <__ieee754_log+0x1fa>
 80a3152:	bf00      	nop
 80a3154:	f3af 8000 	nop.w
 80a3158:	fee00000 	.word	0xfee00000
 80a315c:	3fe62e42 	.word	0x3fe62e42
 80a3160:	35793c76 	.word	0x35793c76
 80a3164:	3dea39ef 	.word	0x3dea39ef

080a3168 <__ieee754_log10>:
 80a3168:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a316c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3170:	4604      	mov	r4, r0
 80a3172:	460d      	mov	r5, r1
 80a3174:	460b      	mov	r3, r1
 80a3176:	da1a      	bge.n	80a31ae <__ieee754_log10+0x46>
 80a3178:	4602      	mov	r2, r0
 80a317a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a317e:	4332      	orrs	r2, r6
 80a3180:	d058      	beq.n	80a3234 <__ieee754_log10+0xcc>
 80a3182:	2900      	cmp	r1, #0
 80a3184:	db5e      	blt.n	80a3244 <__ieee754_log10+0xdc>
 80a3186:	2200      	movs	r2, #0
 80a3188:	4b39      	ldr	r3, [pc, #228]	; (80a3270 <__ieee754_log10+0x108>)
 80a318a:	f001 f973 	bl	80a4474 <__aeabi_dmul>
 80a318e:	460b      	mov	r3, r1
 80a3190:	460d      	mov	r5, r1
 80a3192:	4938      	ldr	r1, [pc, #224]	; (80a3274 <__ieee754_log10+0x10c>)
 80a3194:	4604      	mov	r4, r0
 80a3196:	428b      	cmp	r3, r1
 80a3198:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80a319c:	dd0b      	ble.n	80a31b6 <__ieee754_log10+0x4e>
 80a319e:	4622      	mov	r2, r4
 80a31a0:	462b      	mov	r3, r5
 80a31a2:	4620      	mov	r0, r4
 80a31a4:	4629      	mov	r1, r5
 80a31a6:	f000 ffb3 	bl	80a4110 <__adddf3>
 80a31aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a31ae:	4931      	ldr	r1, [pc, #196]	; (80a3274 <__ieee754_log10+0x10c>)
 80a31b0:	2200      	movs	r2, #0
 80a31b2:	428b      	cmp	r3, r1
 80a31b4:	dcf3      	bgt.n	80a319e <__ieee754_log10+0x36>
 80a31b6:	1518      	asrs	r0, r3, #20
 80a31b8:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80a31bc:	4410      	add	r0, r2
 80a31be:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80a31c2:	4448      	add	r0, r9
 80a31c4:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80a31c8:	f001 f8ee 	bl	80a43a8 <__aeabi_i2d>
 80a31cc:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80a31d0:	3303      	adds	r3, #3
 80a31d2:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80a31d6:	4606      	mov	r6, r0
 80a31d8:	460f      	mov	r7, r1
 80a31da:	4620      	mov	r0, r4
 80a31dc:	4629      	mov	r1, r5
 80a31de:	f7ff fdcf 	bl	80a2d80 <__ieee754_log>
 80a31e2:	a31d      	add	r3, pc, #116	; (adr r3, 80a3258 <__ieee754_log10+0xf0>)
 80a31e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a31e8:	4680      	mov	r8, r0
 80a31ea:	4689      	mov	r9, r1
 80a31ec:	4630      	mov	r0, r6
 80a31ee:	4639      	mov	r1, r7
 80a31f0:	f001 f940 	bl	80a4474 <__aeabi_dmul>
 80a31f4:	a31a      	add	r3, pc, #104	; (adr r3, 80a3260 <__ieee754_log10+0xf8>)
 80a31f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a31fa:	4604      	mov	r4, r0
 80a31fc:	460d      	mov	r5, r1
 80a31fe:	4640      	mov	r0, r8
 80a3200:	4649      	mov	r1, r9
 80a3202:	f001 f937 	bl	80a4474 <__aeabi_dmul>
 80a3206:	4602      	mov	r2, r0
 80a3208:	460b      	mov	r3, r1
 80a320a:	4620      	mov	r0, r4
 80a320c:	4629      	mov	r1, r5
 80a320e:	f000 ff7f 	bl	80a4110 <__adddf3>
 80a3212:	a315      	add	r3, pc, #84	; (adr r3, 80a3268 <__ieee754_log10+0x100>)
 80a3214:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3218:	4604      	mov	r4, r0
 80a321a:	460d      	mov	r5, r1
 80a321c:	4630      	mov	r0, r6
 80a321e:	4639      	mov	r1, r7
 80a3220:	f001 f928 	bl	80a4474 <__aeabi_dmul>
 80a3224:	4602      	mov	r2, r0
 80a3226:	460b      	mov	r3, r1
 80a3228:	4620      	mov	r0, r4
 80a322a:	4629      	mov	r1, r5
 80a322c:	f000 ff70 	bl	80a4110 <__adddf3>
 80a3230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3234:	2200      	movs	r2, #0
 80a3236:	2300      	movs	r3, #0
 80a3238:	2000      	movs	r0, #0
 80a323a:	490f      	ldr	r1, [pc, #60]	; (80a3278 <__ieee754_log10+0x110>)
 80a323c:	f001 fa44 	bl	80a46c8 <__aeabi_ddiv>
 80a3240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3244:	4602      	mov	r2, r0
 80a3246:	460b      	mov	r3, r1
 80a3248:	f000 ff60 	bl	80a410c <__aeabi_dsub>
 80a324c:	2200      	movs	r2, #0
 80a324e:	2300      	movs	r3, #0
 80a3250:	f001 fa3a 	bl	80a46c8 <__aeabi_ddiv>
 80a3254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3258:	11f12b36 	.word	0x11f12b36
 80a325c:	3d59fef3 	.word	0x3d59fef3
 80a3260:	1526e50e 	.word	0x1526e50e
 80a3264:	3fdbcb7b 	.word	0x3fdbcb7b
 80a3268:	509f6000 	.word	0x509f6000
 80a326c:	3fd34413 	.word	0x3fd34413
 80a3270:	43500000 	.word	0x43500000
 80a3274:	7fefffff 	.word	0x7fefffff
 80a3278:	c3500000 	.word	0xc3500000
 80a327c:	00000000 	.word	0x00000000

080a3280 <__ieee754_pow>:
 80a3280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3284:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 80a3288:	ea58 0902 	orrs.w	r9, r8, r2
 80a328c:	b093      	sub	sp, #76	; 0x4c
 80a328e:	d03c      	beq.n	80a330a <__ieee754_pow+0x8a>
 80a3290:	4c71      	ldr	r4, [pc, #452]	; (80a3458 <__ieee754_pow+0x1d8>)
 80a3292:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a3296:	42a6      	cmp	r6, r4
 80a3298:	4683      	mov	fp, r0
 80a329a:	460d      	mov	r5, r1
 80a329c:	dd0c      	ble.n	80a32b8 <__ieee754_pow+0x38>
 80a329e:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a32a2:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a32a6:	ea56 000b 	orrs.w	r0, r6, fp
 80a32aa:	d138      	bne.n	80a331e <__ieee754_pow+0x9e>
 80a32ac:	4683      	mov	fp, r0
 80a32ae:	496b      	ldr	r1, [pc, #428]	; (80a345c <__ieee754_pow+0x1dc>)
 80a32b0:	4658      	mov	r0, fp
 80a32b2:	b013      	add	sp, #76	; 0x4c
 80a32b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a32b8:	469a      	mov	sl, r3
 80a32ba:	4696      	mov	lr, r2
 80a32bc:	d02b      	beq.n	80a3316 <__ieee754_pow+0x96>
 80a32be:	45a0      	cmp	r8, r4
 80a32c0:	dced      	bgt.n	80a329e <__ieee754_pow+0x1e>
 80a32c2:	4c65      	ldr	r4, [pc, #404]	; (80a3458 <__ieee754_pow+0x1d8>)
 80a32c4:	45a0      	cmp	r8, r4
 80a32c6:	d078      	beq.n	80a33ba <__ieee754_pow+0x13a>
 80a32c8:	2d00      	cmp	r5, #0
 80a32ca:	460f      	mov	r7, r1
 80a32cc:	4681      	mov	r9, r0
 80a32ce:	e9cd 2300 	strd	r2, r3, [sp]
 80a32d2:	db76      	blt.n	80a33c2 <__ieee754_pow+0x142>
 80a32d4:	2400      	movs	r4, #0
 80a32d6:	f1be 0f00 	cmp.w	lr, #0
 80a32da:	d127      	bne.n	80a332c <__ieee754_pow+0xac>
 80a32dc:	4b5e      	ldr	r3, [pc, #376]	; (80a3458 <__ieee754_pow+0x1d8>)
 80a32de:	4598      	cmp	r8, r3
 80a32e0:	f000 808b 	beq.w	80a33fa <__ieee754_pow+0x17a>
 80a32e4:	4b5d      	ldr	r3, [pc, #372]	; (80a345c <__ieee754_pow+0x1dc>)
 80a32e6:	4598      	cmp	r8, r3
 80a32e8:	d052      	beq.n	80a3390 <__ieee754_pow+0x110>
 80a32ea:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 80a32ee:	f000 83c9 	beq.w	80a3a84 <__ieee754_pow+0x804>
 80a32f2:	4b5b      	ldr	r3, [pc, #364]	; (80a3460 <__ieee754_pow+0x1e0>)
 80a32f4:	459a      	cmp	sl, r3
 80a32f6:	d119      	bne.n	80a332c <__ieee754_pow+0xac>
 80a32f8:	2d00      	cmp	r5, #0
 80a32fa:	db17      	blt.n	80a332c <__ieee754_pow+0xac>
 80a32fc:	4648      	mov	r0, r9
 80a32fe:	4639      	mov	r1, r7
 80a3300:	b013      	add	sp, #76	; 0x4c
 80a3302:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3306:	f000 bd1d 	b.w	80a3d44 <__ieee754_sqrt>
 80a330a:	46cb      	mov	fp, r9
 80a330c:	4658      	mov	r0, fp
 80a330e:	4953      	ldr	r1, [pc, #332]	; (80a345c <__ieee754_pow+0x1dc>)
 80a3310:	b013      	add	sp, #76	; 0x4c
 80a3312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3316:	2800      	cmp	r0, #0
 80a3318:	d1c1      	bne.n	80a329e <__ieee754_pow+0x1e>
 80a331a:	45b0      	cmp	r8, r6
 80a331c:	ddd1      	ble.n	80a32c2 <__ieee754_pow+0x42>
 80a331e:	4851      	ldr	r0, [pc, #324]	; (80a3464 <__ieee754_pow+0x1e4>)
 80a3320:	b013      	add	sp, #76	; 0x4c
 80a3322:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3326:	f000 bddd 	b.w	80a3ee4 <nan>
 80a332a:	2400      	movs	r4, #0
 80a332c:	4648      	mov	r0, r9
 80a332e:	4639      	mov	r1, r7
 80a3330:	f000 fdcc 	bl	80a3ecc <fabs>
 80a3334:	f1bb 0f00 	cmp.w	fp, #0
 80a3338:	d01c      	beq.n	80a3374 <__ieee754_pow+0xf4>
 80a333a:	0fed      	lsrs	r5, r5, #31
 80a333c:	3d01      	subs	r5, #1
 80a333e:	ea54 0305 	orrs.w	r3, r4, r5
 80a3342:	d070      	beq.n	80a3426 <__ieee754_pow+0x1a6>
 80a3344:	4b48      	ldr	r3, [pc, #288]	; (80a3468 <__ieee754_pow+0x1e8>)
 80a3346:	4598      	cmp	r8, r3
 80a3348:	f340 8094 	ble.w	80a3474 <__ieee754_pow+0x1f4>
 80a334c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a3350:	4598      	cmp	r8, r3
 80a3352:	f340 840d 	ble.w	80a3b70 <__ieee754_pow+0x8f0>
 80a3356:	4b45      	ldr	r3, [pc, #276]	; (80a346c <__ieee754_pow+0x1ec>)
 80a3358:	429e      	cmp	r6, r3
 80a335a:	dd70      	ble.n	80a343e <__ieee754_pow+0x1be>
 80a335c:	f1ba 0f00 	cmp.w	sl, #0
 80a3360:	dd70      	ble.n	80a3444 <__ieee754_pow+0x1c4>
 80a3362:	a33b      	add	r3, pc, #236	; (adr r3, 80a3450 <__ieee754_pow+0x1d0>)
 80a3364:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3368:	4610      	mov	r0, r2
 80a336a:	4619      	mov	r1, r3
 80a336c:	f001 f882 	bl	80a4474 <__aeabi_dmul>
 80a3370:	4683      	mov	fp, r0
 80a3372:	e79d      	b.n	80a32b0 <__ieee754_pow+0x30>
 80a3374:	b126      	cbz	r6, 80a3380 <__ieee754_pow+0x100>
 80a3376:	4b39      	ldr	r3, [pc, #228]	; (80a345c <__ieee754_pow+0x1dc>)
 80a3378:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80a337c:	429a      	cmp	r2, r3
 80a337e:	d1dc      	bne.n	80a333a <__ieee754_pow+0xba>
 80a3380:	f1ba 0f00 	cmp.w	sl, #0
 80a3384:	f2c0 83b7 	blt.w	80a3af6 <__ieee754_pow+0x876>
 80a3388:	2d00      	cmp	r5, #0
 80a338a:	db08      	blt.n	80a339e <__ieee754_pow+0x11e>
 80a338c:	4683      	mov	fp, r0
 80a338e:	e78f      	b.n	80a32b0 <__ieee754_pow+0x30>
 80a3390:	f1ba 0f00 	cmp.w	sl, #0
 80a3394:	f2c0 845e 	blt.w	80a3c54 <__ieee754_pow+0x9d4>
 80a3398:	46cb      	mov	fp, r9
 80a339a:	4639      	mov	r1, r7
 80a339c:	e788      	b.n	80a32b0 <__ieee754_pow+0x30>
 80a339e:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a33a2:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a33a6:	ea56 0304 	orrs.w	r3, r6, r4
 80a33aa:	f000 8483 	beq.w	80a3cb4 <__ieee754_pow+0xa34>
 80a33ae:	2c01      	cmp	r4, #1
 80a33b0:	d1ec      	bne.n	80a338c <__ieee754_pow+0x10c>
 80a33b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a33b6:	4683      	mov	fp, r0
 80a33b8:	e77a      	b.n	80a32b0 <__ieee754_pow+0x30>
 80a33ba:	f1be 0f00 	cmp.w	lr, #0
 80a33be:	d083      	beq.n	80a32c8 <__ieee754_pow+0x48>
 80a33c0:	e76d      	b.n	80a329e <__ieee754_pow+0x1e>
 80a33c2:	4b2b      	ldr	r3, [pc, #172]	; (80a3470 <__ieee754_pow+0x1f0>)
 80a33c4:	4598      	cmp	r8, r3
 80a33c6:	dc2c      	bgt.n	80a3422 <__ieee754_pow+0x1a2>
 80a33c8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80a33cc:	4598      	cmp	r8, r3
 80a33ce:	dd81      	ble.n	80a32d4 <__ieee754_pow+0x54>
 80a33d0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80a33d4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a33d8:	2b14      	cmp	r3, #20
 80a33da:	f340 8453 	ble.w	80a3c84 <__ieee754_pow+0xa04>
 80a33de:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80a33e2:	fa2e f203 	lsr.w	r2, lr, r3
 80a33e6:	fa02 f303 	lsl.w	r3, r2, r3
 80a33ea:	459e      	cmp	lr, r3
 80a33ec:	f47f af72 	bne.w	80a32d4 <__ieee754_pow+0x54>
 80a33f0:	f002 0201 	and.w	r2, r2, #1
 80a33f4:	f1c2 0402 	rsb	r4, r2, #2
 80a33f8:	e76d      	b.n	80a32d6 <__ieee754_pow+0x56>
 80a33fa:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
 80a33fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80a3402:	ea53 030b 	orrs.w	r3, r3, fp
 80a3406:	f000 833a 	beq.w	80a3a7e <__ieee754_pow+0x7fe>
 80a340a:	4b18      	ldr	r3, [pc, #96]	; (80a346c <__ieee754_pow+0x1ec>)
 80a340c:	429e      	cmp	r6, r3
 80a340e:	f340 8367 	ble.w	80a3ae0 <__ieee754_pow+0x860>
 80a3412:	f1ba 0f00 	cmp.w	sl, #0
 80a3416:	db15      	blt.n	80a3444 <__ieee754_pow+0x1c4>
 80a3418:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a341c:	469b      	mov	fp, r3
 80a341e:	4621      	mov	r1, r4
 80a3420:	e746      	b.n	80a32b0 <__ieee754_pow+0x30>
 80a3422:	2402      	movs	r4, #2
 80a3424:	e757      	b.n	80a32d6 <__ieee754_pow+0x56>
 80a3426:	464a      	mov	r2, r9
 80a3428:	4648      	mov	r0, r9
 80a342a:	463b      	mov	r3, r7
 80a342c:	4639      	mov	r1, r7
 80a342e:	f000 fe6d 	bl	80a410c <__aeabi_dsub>
 80a3432:	4602      	mov	r2, r0
 80a3434:	460b      	mov	r3, r1
 80a3436:	f001 f947 	bl	80a46c8 <__aeabi_ddiv>
 80a343a:	4683      	mov	fp, r0
 80a343c:	e738      	b.n	80a32b0 <__ieee754_pow+0x30>
 80a343e:	f1ba 0f00 	cmp.w	sl, #0
 80a3442:	db8e      	blt.n	80a3362 <__ieee754_pow+0xe2>
 80a3444:	f04f 0b00 	mov.w	fp, #0
 80a3448:	4659      	mov	r1, fp
 80a344a:	e731      	b.n	80a32b0 <__ieee754_pow+0x30>
 80a344c:	f3af 8000 	nop.w
 80a3450:	8800759c 	.word	0x8800759c
 80a3454:	7e37e43c 	.word	0x7e37e43c
 80a3458:	7ff00000 	.word	0x7ff00000
 80a345c:	3ff00000 	.word	0x3ff00000
 80a3460:	3fe00000 	.word	0x3fe00000
 80a3464:	080a5568 	.word	0x080a5568
 80a3468:	41e00000 	.word	0x41e00000
 80a346c:	3fefffff 	.word	0x3fefffff
 80a3470:	433fffff 	.word	0x433fffff
 80a3474:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 80a3478:	f04f 0200 	mov.w	r2, #0
 80a347c:	da05      	bge.n	80a348a <__ieee754_pow+0x20a>
 80a347e:	4bd0      	ldr	r3, [pc, #832]	; (80a37c0 <__ieee754_pow+0x540>)
 80a3480:	f000 fff8 	bl	80a4474 <__aeabi_dmul>
 80a3484:	460e      	mov	r6, r1
 80a3486:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80a348a:	f8df e344 	ldr.w	lr, [pc, #836]	; 80a37d0 <__ieee754_pow+0x550>
 80a348e:	1533      	asrs	r3, r6, #20
 80a3490:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80a3494:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a3498:	f046 577f 	orr.w	r7, r6, #1069547520	; 0x3fc00000
 80a349c:	4576      	cmp	r6, lr
 80a349e:	eb03 0a02 	add.w	sl, r3, r2
 80a34a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80a34a6:	f340 83c9 	ble.w	80a3c3c <__ieee754_pow+0x9bc>
 80a34aa:	4bc6      	ldr	r3, [pc, #792]	; (80a37c4 <__ieee754_pow+0x544>)
 80a34ac:	2200      	movs	r2, #0
 80a34ae:	429e      	cmp	r6, r3
 80a34b0:	f340 8404 	ble.w	80a3cbc <__ieee754_pow+0xa3c>
 80a34b4:	2300      	movs	r3, #0
 80a34b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a34ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a34be:	4bc2      	ldr	r3, [pc, #776]	; (80a37c8 <__ieee754_pow+0x548>)
 80a34c0:	2200      	movs	r2, #0
 80a34c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a34c6:	f10a 0a01 	add.w	sl, sl, #1
 80a34ca:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80a34ce:	2600      	movs	r6, #0
 80a34d0:	4639      	mov	r1, r7
 80a34d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a34d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a34da:	f000 fe17 	bl	80a410c <__aeabi_dsub>
 80a34de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a34e2:	4680      	mov	r8, r0
 80a34e4:	4689      	mov	r9, r1
 80a34e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a34ea:	f000 fe11 	bl	80a4110 <__adddf3>
 80a34ee:	4602      	mov	r2, r0
 80a34f0:	460b      	mov	r3, r1
 80a34f2:	2000      	movs	r0, #0
 80a34f4:	49b4      	ldr	r1, [pc, #720]	; (80a37c8 <__ieee754_pow+0x548>)
 80a34f6:	f001 f8e7 	bl	80a46c8 <__aeabi_ddiv>
 80a34fa:	460a      	mov	r2, r1
 80a34fc:	4601      	mov	r1, r0
 80a34fe:	4613      	mov	r3, r2
 80a3500:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 80a3504:	4602      	mov	r2, r0
 80a3506:	4649      	mov	r1, r9
 80a3508:	4640      	mov	r0, r8
 80a350a:	f000 ffb3 	bl	80a4474 <__aeabi_dmul>
 80a350e:	468c      	mov	ip, r1
 80a3510:	4683      	mov	fp, r0
 80a3512:	107b      	asrs	r3, r7, #1
 80a3514:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a3518:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a351c:	1999      	adds	r1, r3, r6
 80a351e:	2000      	movs	r0, #0
 80a3520:	e9cd bc04 	strd	fp, ip, [sp, #16]
 80a3524:	4606      	mov	r6, r0
 80a3526:	460f      	mov	r7, r1
 80a3528:	f04f 0b00 	mov.w	fp, #0
 80a352c:	4661      	mov	r1, ip
 80a352e:	4658      	mov	r0, fp
 80a3530:	4632      	mov	r2, r6
 80a3532:	463b      	mov	r3, r7
 80a3534:	e9cd bc10 	strd	fp, ip, [sp, #64]	; 0x40
 80a3538:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a353c:	f000 ff9a 	bl	80a4474 <__aeabi_dmul>
 80a3540:	4602      	mov	r2, r0
 80a3542:	460b      	mov	r3, r1
 80a3544:	4640      	mov	r0, r8
 80a3546:	4649      	mov	r1, r9
 80a3548:	f000 fde0 	bl	80a410c <__aeabi_dsub>
 80a354c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a3550:	4680      	mov	r8, r0
 80a3552:	4689      	mov	r9, r1
 80a3554:	4630      	mov	r0, r6
 80a3556:	4639      	mov	r1, r7
 80a3558:	f000 fdd8 	bl	80a410c <__aeabi_dsub>
 80a355c:	4602      	mov	r2, r0
 80a355e:	460b      	mov	r3, r1
 80a3560:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a3564:	f000 fdd2 	bl	80a410c <__aeabi_dsub>
 80a3568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a356c:	f000 ff82 	bl	80a4474 <__aeabi_dmul>
 80a3570:	4602      	mov	r2, r0
 80a3572:	460b      	mov	r3, r1
 80a3574:	4640      	mov	r0, r8
 80a3576:	4649      	mov	r1, r9
 80a3578:	f000 fdc8 	bl	80a410c <__aeabi_dsub>
 80a357c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a3580:	f000 ff78 	bl	80a4474 <__aeabi_dmul>
 80a3584:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
 80a3588:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a358c:	463a      	mov	r2, r7
 80a358e:	4643      	mov	r3, r8
 80a3590:	4638      	mov	r0, r7
 80a3592:	4641      	mov	r1, r8
 80a3594:	f000 ff6e 	bl	80a4474 <__aeabi_dmul>
 80a3598:	a377      	add	r3, pc, #476	; (adr r3, 80a3778 <__ieee754_pow+0x4f8>)
 80a359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a359e:	4606      	mov	r6, r0
 80a35a0:	460f      	mov	r7, r1
 80a35a2:	f000 ff67 	bl	80a4474 <__aeabi_dmul>
 80a35a6:	a376      	add	r3, pc, #472	; (adr r3, 80a3780 <__ieee754_pow+0x500>)
 80a35a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a35ac:	f000 fdb0 	bl	80a4110 <__adddf3>
 80a35b0:	4632      	mov	r2, r6
 80a35b2:	463b      	mov	r3, r7
 80a35b4:	f000 ff5e 	bl	80a4474 <__aeabi_dmul>
 80a35b8:	a373      	add	r3, pc, #460	; (adr r3, 80a3788 <__ieee754_pow+0x508>)
 80a35ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a35be:	f000 fda7 	bl	80a4110 <__adddf3>
 80a35c2:	4632      	mov	r2, r6
 80a35c4:	463b      	mov	r3, r7
 80a35c6:	f000 ff55 	bl	80a4474 <__aeabi_dmul>
 80a35ca:	a371      	add	r3, pc, #452	; (adr r3, 80a3790 <__ieee754_pow+0x510>)
 80a35cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a35d0:	f000 fd9e 	bl	80a4110 <__adddf3>
 80a35d4:	4632      	mov	r2, r6
 80a35d6:	463b      	mov	r3, r7
 80a35d8:	f000 ff4c 	bl	80a4474 <__aeabi_dmul>
 80a35dc:	a36e      	add	r3, pc, #440	; (adr r3, 80a3798 <__ieee754_pow+0x518>)
 80a35de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a35e2:	f000 fd95 	bl	80a4110 <__adddf3>
 80a35e6:	4632      	mov	r2, r6
 80a35e8:	463b      	mov	r3, r7
 80a35ea:	f000 ff43 	bl	80a4474 <__aeabi_dmul>
 80a35ee:	a36c      	add	r3, pc, #432	; (adr r3, 80a37a0 <__ieee754_pow+0x520>)
 80a35f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a35f4:	f000 fd8c 	bl	80a4110 <__adddf3>
 80a35f8:	4632      	mov	r2, r6
 80a35fa:	4680      	mov	r8, r0
 80a35fc:	4689      	mov	r9, r1
 80a35fe:	463b      	mov	r3, r7
 80a3600:	4630      	mov	r0, r6
 80a3602:	4639      	mov	r1, r7
 80a3604:	f000 ff36 	bl	80a4474 <__aeabi_dmul>
 80a3608:	4602      	mov	r2, r0
 80a360a:	460b      	mov	r3, r1
 80a360c:	4640      	mov	r0, r8
 80a360e:	4649      	mov	r1, r9
 80a3610:	f000 ff30 	bl	80a4474 <__aeabi_dmul>
 80a3614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3618:	4606      	mov	r6, r0
 80a361a:	460f      	mov	r7, r1
 80a361c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3620:	f000 fd76 	bl	80a4110 <__adddf3>
 80a3624:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a3628:	f000 ff24 	bl	80a4474 <__aeabi_dmul>
 80a362c:	4632      	mov	r2, r6
 80a362e:	463b      	mov	r3, r7
 80a3630:	f000 fd6e 	bl	80a4110 <__adddf3>
 80a3634:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80a3638:	4680      	mov	r8, r0
 80a363a:	4689      	mov	r9, r1
 80a363c:	4632      	mov	r2, r6
 80a363e:	463b      	mov	r3, r7
 80a3640:	4630      	mov	r0, r6
 80a3642:	4639      	mov	r1, r7
 80a3644:	f000 ff16 	bl	80a4474 <__aeabi_dmul>
 80a3648:	2200      	movs	r2, #0
 80a364a:	4b60      	ldr	r3, [pc, #384]	; (80a37cc <__ieee754_pow+0x54c>)
 80a364c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a3650:	f000 fd5e 	bl	80a4110 <__adddf3>
 80a3654:	4642      	mov	r2, r8
 80a3656:	464b      	mov	r3, r9
 80a3658:	f000 fd5a 	bl	80a4110 <__adddf3>
 80a365c:	e9dd bc10 	ldrd	fp, ip, [sp, #64]	; 0x40
 80a3660:	460f      	mov	r7, r1
 80a3662:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3666:	465a      	mov	r2, fp
 80a3668:	463b      	mov	r3, r7
 80a366a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 80a366e:	465e      	mov	r6, fp
 80a3670:	f000 ff00 	bl	80a4474 <__aeabi_dmul>
 80a3674:	2200      	movs	r2, #0
 80a3676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a367a:	4b54      	ldr	r3, [pc, #336]	; (80a37cc <__ieee754_pow+0x54c>)
 80a367c:	4630      	mov	r0, r6
 80a367e:	4639      	mov	r1, r7
 80a3680:	f000 fd44 	bl	80a410c <__aeabi_dsub>
 80a3684:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a3688:	f000 fd40 	bl	80a410c <__aeabi_dsub>
 80a368c:	4602      	mov	r2, r0
 80a368e:	460b      	mov	r3, r1
 80a3690:	4640      	mov	r0, r8
 80a3692:	4649      	mov	r1, r9
 80a3694:	f000 fd3a 	bl	80a410c <__aeabi_dsub>
 80a3698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a369c:	f000 feea 	bl	80a4474 <__aeabi_dmul>
 80a36a0:	4632      	mov	r2, r6
 80a36a2:	4680      	mov	r8, r0
 80a36a4:	4689      	mov	r9, r1
 80a36a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a36aa:	463b      	mov	r3, r7
 80a36ac:	f000 fee2 	bl	80a4474 <__aeabi_dmul>
 80a36b0:	4602      	mov	r2, r0
 80a36b2:	460b      	mov	r3, r1
 80a36b4:	4640      	mov	r0, r8
 80a36b6:	4649      	mov	r1, r9
 80a36b8:	f000 fd2a 	bl	80a4110 <__adddf3>
 80a36bc:	4680      	mov	r8, r0
 80a36be:	4689      	mov	r9, r1
 80a36c0:	4602      	mov	r2, r0
 80a36c2:	460b      	mov	r3, r1
 80a36c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a36c8:	f000 fd22 	bl	80a4110 <__adddf3>
 80a36cc:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	; 0x38
 80a36d0:	a335      	add	r3, pc, #212	; (adr r3, 80a37a8 <__ieee754_pow+0x528>)
 80a36d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a36d6:	4658      	mov	r0, fp
 80a36d8:	e9cd bc06 	strd	fp, ip, [sp, #24]
 80a36dc:	465e      	mov	r6, fp
 80a36de:	460f      	mov	r7, r1
 80a36e0:	f000 fec8 	bl	80a4474 <__aeabi_dmul>
 80a36e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a36e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a36ec:	4630      	mov	r0, r6
 80a36ee:	4639      	mov	r1, r7
 80a36f0:	f000 fd0c 	bl	80a410c <__aeabi_dsub>
 80a36f4:	4602      	mov	r2, r0
 80a36f6:	460b      	mov	r3, r1
 80a36f8:	4640      	mov	r0, r8
 80a36fa:	4649      	mov	r1, r9
 80a36fc:	f000 fd06 	bl	80a410c <__aeabi_dsub>
 80a3700:	a32b      	add	r3, pc, #172	; (adr r3, 80a37b0 <__ieee754_pow+0x530>)
 80a3702:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3706:	f000 feb5 	bl	80a4474 <__aeabi_dmul>
 80a370a:	a32b      	add	r3, pc, #172	; (adr r3, 80a37b8 <__ieee754_pow+0x538>)
 80a370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3710:	4680      	mov	r8, r0
 80a3712:	4689      	mov	r9, r1
 80a3714:	4630      	mov	r0, r6
 80a3716:	4639      	mov	r1, r7
 80a3718:	f000 feac 	bl	80a4474 <__aeabi_dmul>
 80a371c:	4602      	mov	r2, r0
 80a371e:	460b      	mov	r3, r1
 80a3720:	4640      	mov	r0, r8
 80a3722:	4649      	mov	r1, r9
 80a3724:	f000 fcf4 	bl	80a4110 <__adddf3>
 80a3728:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80a372c:	f000 fcf0 	bl	80a4110 <__adddf3>
 80a3730:	4680      	mov	r8, r0
 80a3732:	4650      	mov	r0, sl
 80a3734:	4689      	mov	r9, r1
 80a3736:	f000 fe37 	bl	80a43a8 <__aeabi_i2d>
 80a373a:	4606      	mov	r6, r0
 80a373c:	460f      	mov	r7, r1
 80a373e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3742:	4642      	mov	r2, r8
 80a3744:	464b      	mov	r3, r9
 80a3746:	f000 fce3 	bl	80a4110 <__adddf3>
 80a374a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a374e:	f000 fcdf 	bl	80a4110 <__adddf3>
 80a3752:	4632      	mov	r2, r6
 80a3754:	463b      	mov	r3, r7
 80a3756:	f000 fcdb 	bl	80a4110 <__adddf3>
 80a375a:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 80a375e:	4632      	mov	r2, r6
 80a3760:	4658      	mov	r0, fp
 80a3762:	463b      	mov	r3, r7
 80a3764:	46da      	mov	sl, fp
 80a3766:	468b      	mov	fp, r1
 80a3768:	f000 fcd0 	bl	80a410c <__aeabi_dsub>
 80a376c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3770:	e030      	b.n	80a37d4 <__ieee754_pow+0x554>
 80a3772:	bf00      	nop
 80a3774:	f3af 8000 	nop.w
 80a3778:	4a454eef 	.word	0x4a454eef
 80a377c:	3fca7e28 	.word	0x3fca7e28
 80a3780:	93c9db65 	.word	0x93c9db65
 80a3784:	3fcd864a 	.word	0x3fcd864a
 80a3788:	a91d4101 	.word	0xa91d4101
 80a378c:	3fd17460 	.word	0x3fd17460
 80a3790:	518f264d 	.word	0x518f264d
 80a3794:	3fd55555 	.word	0x3fd55555
 80a3798:	db6fabff 	.word	0xdb6fabff
 80a379c:	3fdb6db6 	.word	0x3fdb6db6
 80a37a0:	33333303 	.word	0x33333303
 80a37a4:	3fe33333 	.word	0x3fe33333
 80a37a8:	e0000000 	.word	0xe0000000
 80a37ac:	3feec709 	.word	0x3feec709
 80a37b0:	dc3a03fd 	.word	0xdc3a03fd
 80a37b4:	3feec709 	.word	0x3feec709
 80a37b8:	145b01f5 	.word	0x145b01f5
 80a37bc:	be3e2fe0 	.word	0xbe3e2fe0
 80a37c0:	43400000 	.word	0x43400000
 80a37c4:	000bb679 	.word	0x000bb679
 80a37c8:	3ff00000 	.word	0x3ff00000
 80a37cc:	40080000 	.word	0x40080000
 80a37d0:	0003988e 	.word	0x0003988e
 80a37d4:	f000 fc9a 	bl	80a410c <__aeabi_dsub>
 80a37d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a37dc:	f000 fc96 	bl	80a410c <__aeabi_dsub>
 80a37e0:	4602      	mov	r2, r0
 80a37e2:	460b      	mov	r3, r1
 80a37e4:	4640      	mov	r0, r8
 80a37e6:	4649      	mov	r1, r9
 80a37e8:	f000 fc90 	bl	80a410c <__aeabi_dsub>
 80a37ec:	4680      	mov	r8, r0
 80a37ee:	4689      	mov	r9, r1
 80a37f0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80a37f4:	3c01      	subs	r4, #1
 80a37f6:	ea54 0305 	orrs.w	r3, r4, r5
 80a37fa:	bf14      	ite	ne
 80a37fc:	4cd6      	ldrne	r4, [pc, #856]	; (80a3b58 <__ieee754_pow+0x8d8>)
 80a37fe:	4cd7      	ldreq	r4, [pc, #860]	; (80a3b5c <__ieee754_pow+0x8dc>)
 80a3800:	2300      	movs	r3, #0
 80a3802:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80a3806:	460b      	mov	r3, r1
 80a3808:	4614      	mov	r4, r2
 80a380a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a380e:	2300      	movs	r3, #0
 80a3810:	9302      	str	r3, [sp, #8]
 80a3812:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80a3816:	4608      	mov	r0, r1
 80a3818:	462b      	mov	r3, r5
 80a381a:	4611      	mov	r1, r2
 80a381c:	4622      	mov	r2, r4
 80a381e:	f000 fc75 	bl	80a410c <__aeabi_dsub>
 80a3822:	4652      	mov	r2, sl
 80a3824:	465b      	mov	r3, fp
 80a3826:	f000 fe25 	bl	80a4474 <__aeabi_dmul>
 80a382a:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a382e:	4606      	mov	r6, r0
 80a3830:	460f      	mov	r7, r1
 80a3832:	4640      	mov	r0, r8
 80a3834:	4649      	mov	r1, r9
 80a3836:	f000 fe1d 	bl	80a4474 <__aeabi_dmul>
 80a383a:	4602      	mov	r2, r0
 80a383c:	460b      	mov	r3, r1
 80a383e:	4630      	mov	r0, r6
 80a3840:	4639      	mov	r1, r7
 80a3842:	f000 fc65 	bl	80a4110 <__adddf3>
 80a3846:	4606      	mov	r6, r0
 80a3848:	460f      	mov	r7, r1
 80a384a:	4622      	mov	r2, r4
 80a384c:	462b      	mov	r3, r5
 80a384e:	4650      	mov	r0, sl
 80a3850:	4659      	mov	r1, fp
 80a3852:	e9cd 6700 	strd	r6, r7, [sp]
 80a3856:	f000 fe0d 	bl	80a4474 <__aeabi_dmul>
 80a385a:	460b      	mov	r3, r1
 80a385c:	4602      	mov	r2, r0
 80a385e:	4680      	mov	r8, r0
 80a3860:	4689      	mov	r9, r1
 80a3862:	4630      	mov	r0, r6
 80a3864:	4639      	mov	r1, r7
 80a3866:	f000 fc53 	bl	80a4110 <__adddf3>
 80a386a:	4bbd      	ldr	r3, [pc, #756]	; (80a3b60 <__ieee754_pow+0x8e0>)
 80a386c:	4606      	mov	r6, r0
 80a386e:	4299      	cmp	r1, r3
 80a3870:	460d      	mov	r5, r1
 80a3872:	460c      	mov	r4, r1
 80a3874:	f340 810e 	ble.w	80a3a94 <__ieee754_pow+0x814>
 80a3878:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a387c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a3880:	4303      	orrs	r3, r0
 80a3882:	f040 81f0 	bne.w	80a3c66 <__ieee754_pow+0x9e6>
 80a3886:	a3a0      	add	r3, pc, #640	; (adr r3, 80a3b08 <__ieee754_pow+0x888>)
 80a3888:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a388c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3890:	f000 fc3e 	bl	80a4110 <__adddf3>
 80a3894:	4642      	mov	r2, r8
 80a3896:	4682      	mov	sl, r0
 80a3898:	468b      	mov	fp, r1
 80a389a:	464b      	mov	r3, r9
 80a389c:	4630      	mov	r0, r6
 80a389e:	4629      	mov	r1, r5
 80a38a0:	f000 fc34 	bl	80a410c <__aeabi_dsub>
 80a38a4:	4602      	mov	r2, r0
 80a38a6:	460b      	mov	r3, r1
 80a38a8:	4650      	mov	r0, sl
 80a38aa:	4659      	mov	r1, fp
 80a38ac:	f001 f872 	bl	80a4994 <__aeabi_dcmpgt>
 80a38b0:	2800      	cmp	r0, #0
 80a38b2:	f040 81d8 	bne.w	80a3c66 <__ieee754_pow+0x9e6>
 80a38b6:	462f      	mov	r7, r5
 80a38b8:	153b      	asrs	r3, r7, #20
 80a38ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a38be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a38c2:	fa42 f303 	asr.w	r3, r2, r3
 80a38c6:	4423      	add	r3, r4
 80a38c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a38cc:	4ea5      	ldr	r6, [pc, #660]	; (80a3b64 <__ieee754_pow+0x8e4>)
 80a38ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a38d2:	4116      	asrs	r6, r2
 80a38d4:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 80a38d8:	2000      	movs	r0, #0
 80a38da:	f1c2 0514 	rsb	r5, r2, #20
 80a38de:	ea23 0106 	bic.w	r1, r3, r6
 80a38e2:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 80a38e6:	4602      	mov	r2, r0
 80a38e8:	460b      	mov	r3, r1
 80a38ea:	2c00      	cmp	r4, #0
 80a38ec:	fa4b fb05 	asr.w	fp, fp, r5
 80a38f0:	4640      	mov	r0, r8
 80a38f2:	4649      	mov	r1, r9
 80a38f4:	bfb8      	it	lt
 80a38f6:	f1cb 0b00 	rsblt	fp, fp, #0
 80a38fa:	f000 fc07 	bl	80a410c <__aeabi_dsub>
 80a38fe:	4602      	mov	r2, r0
 80a3900:	460b      	mov	r3, r1
 80a3902:	4680      	mov	r8, r0
 80a3904:	4689      	mov	r9, r1
 80a3906:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a390a:	f000 fc01 	bl	80a4110 <__adddf3>
 80a390e:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 80a3912:	2400      	movs	r4, #0
 80a3914:	a37e      	add	r3, pc, #504	; (adr r3, 80a3b10 <__ieee754_pow+0x890>)
 80a3916:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a391a:	4620      	mov	r0, r4
 80a391c:	460d      	mov	r5, r1
 80a391e:	f000 fda9 	bl	80a4474 <__aeabi_dmul>
 80a3922:	4642      	mov	r2, r8
 80a3924:	4606      	mov	r6, r0
 80a3926:	460f      	mov	r7, r1
 80a3928:	464b      	mov	r3, r9
 80a392a:	4620      	mov	r0, r4
 80a392c:	4629      	mov	r1, r5
 80a392e:	f000 fbed 	bl	80a410c <__aeabi_dsub>
 80a3932:	4602      	mov	r2, r0
 80a3934:	460b      	mov	r3, r1
 80a3936:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a393a:	f000 fbe7 	bl	80a410c <__aeabi_dsub>
 80a393e:	a376      	add	r3, pc, #472	; (adr r3, 80a3b18 <__ieee754_pow+0x898>)
 80a3940:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3944:	f000 fd96 	bl	80a4474 <__aeabi_dmul>
 80a3948:	a375      	add	r3, pc, #468	; (adr r3, 80a3b20 <__ieee754_pow+0x8a0>)
 80a394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a394e:	4680      	mov	r8, r0
 80a3950:	4689      	mov	r9, r1
 80a3952:	4620      	mov	r0, r4
 80a3954:	4629      	mov	r1, r5
 80a3956:	f000 fd8d 	bl	80a4474 <__aeabi_dmul>
 80a395a:	4602      	mov	r2, r0
 80a395c:	460b      	mov	r3, r1
 80a395e:	4640      	mov	r0, r8
 80a3960:	4649      	mov	r1, r9
 80a3962:	f000 fbd5 	bl	80a4110 <__adddf3>
 80a3966:	4680      	mov	r8, r0
 80a3968:	4689      	mov	r9, r1
 80a396a:	4602      	mov	r2, r0
 80a396c:	460b      	mov	r3, r1
 80a396e:	4630      	mov	r0, r6
 80a3970:	4639      	mov	r1, r7
 80a3972:	f000 fbcd 	bl	80a4110 <__adddf3>
 80a3976:	4632      	mov	r2, r6
 80a3978:	463b      	mov	r3, r7
 80a397a:	4604      	mov	r4, r0
 80a397c:	460d      	mov	r5, r1
 80a397e:	f000 fbc5 	bl	80a410c <__aeabi_dsub>
 80a3982:	4602      	mov	r2, r0
 80a3984:	460b      	mov	r3, r1
 80a3986:	4640      	mov	r0, r8
 80a3988:	4649      	mov	r1, r9
 80a398a:	f000 fbbf 	bl	80a410c <__aeabi_dsub>
 80a398e:	4622      	mov	r2, r4
 80a3990:	4680      	mov	r8, r0
 80a3992:	4689      	mov	r9, r1
 80a3994:	462b      	mov	r3, r5
 80a3996:	4620      	mov	r0, r4
 80a3998:	4629      	mov	r1, r5
 80a399a:	f000 fd6b 	bl	80a4474 <__aeabi_dmul>
 80a399e:	a362      	add	r3, pc, #392	; (adr r3, 80a3b28 <__ieee754_pow+0x8a8>)
 80a39a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a39a4:	4606      	mov	r6, r0
 80a39a6:	460f      	mov	r7, r1
 80a39a8:	f000 fd64 	bl	80a4474 <__aeabi_dmul>
 80a39ac:	a360      	add	r3, pc, #384	; (adr r3, 80a3b30 <__ieee754_pow+0x8b0>)
 80a39ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a39b2:	f000 fbab 	bl	80a410c <__aeabi_dsub>
 80a39b6:	4632      	mov	r2, r6
 80a39b8:	463b      	mov	r3, r7
 80a39ba:	f000 fd5b 	bl	80a4474 <__aeabi_dmul>
 80a39be:	a35e      	add	r3, pc, #376	; (adr r3, 80a3b38 <__ieee754_pow+0x8b8>)
 80a39c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a39c4:	f000 fba4 	bl	80a4110 <__adddf3>
 80a39c8:	4632      	mov	r2, r6
 80a39ca:	463b      	mov	r3, r7
 80a39cc:	f000 fd52 	bl	80a4474 <__aeabi_dmul>
 80a39d0:	a35b      	add	r3, pc, #364	; (adr r3, 80a3b40 <__ieee754_pow+0x8c0>)
 80a39d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a39d6:	f000 fb99 	bl	80a410c <__aeabi_dsub>
 80a39da:	4632      	mov	r2, r6
 80a39dc:	463b      	mov	r3, r7
 80a39de:	f000 fd49 	bl	80a4474 <__aeabi_dmul>
 80a39e2:	a359      	add	r3, pc, #356	; (adr r3, 80a3b48 <__ieee754_pow+0x8c8>)
 80a39e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a39e8:	f000 fb92 	bl	80a4110 <__adddf3>
 80a39ec:	4632      	mov	r2, r6
 80a39ee:	463b      	mov	r3, r7
 80a39f0:	f000 fd40 	bl	80a4474 <__aeabi_dmul>
 80a39f4:	4602      	mov	r2, r0
 80a39f6:	460b      	mov	r3, r1
 80a39f8:	4620      	mov	r0, r4
 80a39fa:	4629      	mov	r1, r5
 80a39fc:	f000 fb86 	bl	80a410c <__aeabi_dsub>
 80a3a00:	4606      	mov	r6, r0
 80a3a02:	460f      	mov	r7, r1
 80a3a04:	4602      	mov	r2, r0
 80a3a06:	460b      	mov	r3, r1
 80a3a08:	4620      	mov	r0, r4
 80a3a0a:	4629      	mov	r1, r5
 80a3a0c:	f000 fd32 	bl	80a4474 <__aeabi_dmul>
 80a3a10:	2200      	movs	r2, #0
 80a3a12:	e9cd 0100 	strd	r0, r1, [sp]
 80a3a16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a3a1a:	4630      	mov	r0, r6
 80a3a1c:	4639      	mov	r1, r7
 80a3a1e:	f000 fb75 	bl	80a410c <__aeabi_dsub>
 80a3a22:	4602      	mov	r2, r0
 80a3a24:	460b      	mov	r3, r1
 80a3a26:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3a2a:	f000 fe4d 	bl	80a46c8 <__aeabi_ddiv>
 80a3a2e:	4642      	mov	r2, r8
 80a3a30:	4606      	mov	r6, r0
 80a3a32:	460f      	mov	r7, r1
 80a3a34:	464b      	mov	r3, r9
 80a3a36:	4620      	mov	r0, r4
 80a3a38:	4629      	mov	r1, r5
 80a3a3a:	f000 fd1b 	bl	80a4474 <__aeabi_dmul>
 80a3a3e:	4642      	mov	r2, r8
 80a3a40:	464b      	mov	r3, r9
 80a3a42:	f000 fb65 	bl	80a4110 <__adddf3>
 80a3a46:	4602      	mov	r2, r0
 80a3a48:	460b      	mov	r3, r1
 80a3a4a:	4630      	mov	r0, r6
 80a3a4c:	4639      	mov	r1, r7
 80a3a4e:	f000 fb5d 	bl	80a410c <__aeabi_dsub>
 80a3a52:	4622      	mov	r2, r4
 80a3a54:	462b      	mov	r3, r5
 80a3a56:	f000 fb59 	bl	80a410c <__aeabi_dsub>
 80a3a5a:	4602      	mov	r2, r0
 80a3a5c:	460b      	mov	r3, r1
 80a3a5e:	2000      	movs	r0, #0
 80a3a60:	493d      	ldr	r1, [pc, #244]	; (80a3b58 <__ieee754_pow+0x8d8>)
 80a3a62:	f000 fb53 	bl	80a410c <__aeabi_dsub>
 80a3a66:	448a      	add	sl, r1
 80a3a68:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 80a3a6c:	f2c0 8137 	blt.w	80a3cde <__ieee754_pow+0xa5e>
 80a3a70:	4651      	mov	r1, sl
 80a3a72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3a76:	f000 fcfd 	bl	80a4474 <__aeabi_dmul>
 80a3a7a:	4683      	mov	fp, r0
 80a3a7c:	e418      	b.n	80a32b0 <__ieee754_pow+0x30>
 80a3a7e:	46f3      	mov	fp, lr
 80a3a80:	4935      	ldr	r1, [pc, #212]	; (80a3b58 <__ieee754_pow+0x8d8>)
 80a3a82:	e415      	b.n	80a32b0 <__ieee754_pow+0x30>
 80a3a84:	464a      	mov	r2, r9
 80a3a86:	4648      	mov	r0, r9
 80a3a88:	463b      	mov	r3, r7
 80a3a8a:	4639      	mov	r1, r7
 80a3a8c:	f000 fcf2 	bl	80a4474 <__aeabi_dmul>
 80a3a90:	4683      	mov	fp, r0
 80a3a92:	e40d      	b.n	80a32b0 <__ieee754_pow+0x30>
 80a3a94:	4b34      	ldr	r3, [pc, #208]	; (80a3b68 <__ieee754_pow+0x8e8>)
 80a3a96:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80a3a9a:	429f      	cmp	r7, r3
 80a3a9c:	f340 8101 	ble.w	80a3ca2 <__ieee754_pow+0xa22>
 80a3aa0:	4b32      	ldr	r3, [pc, #200]	; (80a3b6c <__ieee754_pow+0x8ec>)
 80a3aa2:	440b      	add	r3, r1
 80a3aa4:	4303      	orrs	r3, r0
 80a3aa6:	d10c      	bne.n	80a3ac2 <__ieee754_pow+0x842>
 80a3aa8:	4642      	mov	r2, r8
 80a3aaa:	464b      	mov	r3, r9
 80a3aac:	f000 fb2e 	bl	80a410c <__aeabi_dsub>
 80a3ab0:	4602      	mov	r2, r0
 80a3ab2:	460b      	mov	r3, r1
 80a3ab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3ab8:	f000 ff58 	bl	80a496c <__aeabi_dcmple>
 80a3abc:	2800      	cmp	r0, #0
 80a3abe:	f43f aefb 	beq.w	80a38b8 <__ieee754_pow+0x638>
 80a3ac2:	a323      	add	r3, pc, #140	; (adr r3, 80a3b50 <__ieee754_pow+0x8d0>)
 80a3ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3ac8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3acc:	f000 fcd2 	bl	80a4474 <__aeabi_dmul>
 80a3ad0:	a31f      	add	r3, pc, #124	; (adr r3, 80a3b50 <__ieee754_pow+0x8d0>)
 80a3ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3ad6:	f000 fccd 	bl	80a4474 <__aeabi_dmul>
 80a3ada:	4683      	mov	fp, r0
 80a3adc:	f7ff bbe8 	b.w	80a32b0 <__ieee754_pow+0x30>
 80a3ae0:	f1ba 0f00 	cmp.w	sl, #0
 80a3ae4:	f6bf acae 	bge.w	80a3444 <__ieee754_pow+0x1c4>
 80a3ae8:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a3aec:	469b      	mov	fp, r3
 80a3aee:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a3af2:	f7ff bbdd 	b.w	80a32b0 <__ieee754_pow+0x30>
 80a3af6:	4602      	mov	r2, r0
 80a3af8:	460b      	mov	r3, r1
 80a3afa:	2000      	movs	r0, #0
 80a3afc:	4916      	ldr	r1, [pc, #88]	; (80a3b58 <__ieee754_pow+0x8d8>)
 80a3afe:	f000 fde3 	bl	80a46c8 <__aeabi_ddiv>
 80a3b02:	e441      	b.n	80a3388 <__ieee754_pow+0x108>
 80a3b04:	f3af 8000 	nop.w
 80a3b08:	652b82fe 	.word	0x652b82fe
 80a3b0c:	3c971547 	.word	0x3c971547
 80a3b10:	00000000 	.word	0x00000000
 80a3b14:	3fe62e43 	.word	0x3fe62e43
 80a3b18:	fefa39ef 	.word	0xfefa39ef
 80a3b1c:	3fe62e42 	.word	0x3fe62e42
 80a3b20:	0ca86c39 	.word	0x0ca86c39
 80a3b24:	be205c61 	.word	0xbe205c61
 80a3b28:	72bea4d0 	.word	0x72bea4d0
 80a3b2c:	3e663769 	.word	0x3e663769
 80a3b30:	c5d26bf1 	.word	0xc5d26bf1
 80a3b34:	3ebbbd41 	.word	0x3ebbbd41
 80a3b38:	af25de2c 	.word	0xaf25de2c
 80a3b3c:	3f11566a 	.word	0x3f11566a
 80a3b40:	16bebd93 	.word	0x16bebd93
 80a3b44:	3f66c16c 	.word	0x3f66c16c
 80a3b48:	5555553e 	.word	0x5555553e
 80a3b4c:	3fc55555 	.word	0x3fc55555
 80a3b50:	c2f8f359 	.word	0xc2f8f359
 80a3b54:	01a56e1f 	.word	0x01a56e1f
 80a3b58:	3ff00000 	.word	0x3ff00000
 80a3b5c:	bff00000 	.word	0xbff00000
 80a3b60:	408fffff 	.word	0x408fffff
 80a3b64:	000fffff 	.word	0x000fffff
 80a3b68:	4090cbff 	.word	0x4090cbff
 80a3b6c:	3f6f3400 	.word	0x3f6f3400
 80a3b70:	4b6f      	ldr	r3, [pc, #444]	; (80a3d30 <__ieee754_pow+0xab0>)
 80a3b72:	429e      	cmp	r6, r3
 80a3b74:	f77f ac63 	ble.w	80a343e <__ieee754_pow+0x1be>
 80a3b78:	4b6e      	ldr	r3, [pc, #440]	; (80a3d34 <__ieee754_pow+0xab4>)
 80a3b7a:	429e      	cmp	r6, r3
 80a3b7c:	f73f abee 	bgt.w	80a335c <__ieee754_pow+0xdc>
 80a3b80:	2200      	movs	r2, #0
 80a3b82:	4b6c      	ldr	r3, [pc, #432]	; (80a3d34 <__ieee754_pow+0xab4>)
 80a3b84:	f000 fac2 	bl	80a410c <__aeabi_dsub>
 80a3b88:	a35b      	add	r3, pc, #364	; (adr r3, 80a3cf8 <__ieee754_pow+0xa78>)
 80a3b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b8e:	4606      	mov	r6, r0
 80a3b90:	460f      	mov	r7, r1
 80a3b92:	f000 fc6f 	bl	80a4474 <__aeabi_dmul>
 80a3b96:	a35a      	add	r3, pc, #360	; (adr r3, 80a3d00 <__ieee754_pow+0xa80>)
 80a3b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b9c:	4680      	mov	r8, r0
 80a3b9e:	4689      	mov	r9, r1
 80a3ba0:	4630      	mov	r0, r6
 80a3ba2:	4639      	mov	r1, r7
 80a3ba4:	f000 fc66 	bl	80a4474 <__aeabi_dmul>
 80a3ba8:	2200      	movs	r2, #0
 80a3baa:	4682      	mov	sl, r0
 80a3bac:	468b      	mov	fp, r1
 80a3bae:	4b62      	ldr	r3, [pc, #392]	; (80a3d38 <__ieee754_pow+0xab8>)
 80a3bb0:	4630      	mov	r0, r6
 80a3bb2:	4639      	mov	r1, r7
 80a3bb4:	f000 fc5e 	bl	80a4474 <__aeabi_dmul>
 80a3bb8:	4602      	mov	r2, r0
 80a3bba:	460b      	mov	r3, r1
 80a3bbc:	a152      	add	r1, pc, #328	; (adr r1, 80a3d08 <__ieee754_pow+0xa88>)
 80a3bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a3bc2:	f000 faa3 	bl	80a410c <__aeabi_dsub>
 80a3bc6:	4632      	mov	r2, r6
 80a3bc8:	463b      	mov	r3, r7
 80a3bca:	f000 fc53 	bl	80a4474 <__aeabi_dmul>
 80a3bce:	4602      	mov	r2, r0
 80a3bd0:	460b      	mov	r3, r1
 80a3bd2:	2000      	movs	r0, #0
 80a3bd4:	4959      	ldr	r1, [pc, #356]	; (80a3d3c <__ieee754_pow+0xabc>)
 80a3bd6:	f000 fa99 	bl	80a410c <__aeabi_dsub>
 80a3bda:	4632      	mov	r2, r6
 80a3bdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a3be0:	463b      	mov	r3, r7
 80a3be2:	4630      	mov	r0, r6
 80a3be4:	4639      	mov	r1, r7
 80a3be6:	f000 fc45 	bl	80a4474 <__aeabi_dmul>
 80a3bea:	4602      	mov	r2, r0
 80a3bec:	460b      	mov	r3, r1
 80a3bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3bf2:	f000 fc3f 	bl	80a4474 <__aeabi_dmul>
 80a3bf6:	a346      	add	r3, pc, #280	; (adr r3, 80a3d10 <__ieee754_pow+0xa90>)
 80a3bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3bfc:	f000 fc3a 	bl	80a4474 <__aeabi_dmul>
 80a3c00:	4602      	mov	r2, r0
 80a3c02:	460b      	mov	r3, r1
 80a3c04:	4650      	mov	r0, sl
 80a3c06:	4659      	mov	r1, fp
 80a3c08:	f000 fa80 	bl	80a410c <__aeabi_dsub>
 80a3c0c:	4602      	mov	r2, r0
 80a3c0e:	460b      	mov	r3, r1
 80a3c10:	4606      	mov	r6, r0
 80a3c12:	460f      	mov	r7, r1
 80a3c14:	4640      	mov	r0, r8
 80a3c16:	4649      	mov	r1, r9
 80a3c18:	f000 fa7a 	bl	80a4110 <__adddf3>
 80a3c1c:	4642      	mov	r2, r8
 80a3c1e:	464b      	mov	r3, r9
 80a3c20:	2000      	movs	r0, #0
 80a3c22:	4682      	mov	sl, r0
 80a3c24:	468b      	mov	fp, r1
 80a3c26:	f000 fa71 	bl	80a410c <__aeabi_dsub>
 80a3c2a:	4602      	mov	r2, r0
 80a3c2c:	460b      	mov	r3, r1
 80a3c2e:	4630      	mov	r0, r6
 80a3c30:	4639      	mov	r1, r7
 80a3c32:	f000 fa6b 	bl	80a410c <__aeabi_dsub>
 80a3c36:	4680      	mov	r8, r0
 80a3c38:	4689      	mov	r9, r1
 80a3c3a:	e5d9      	b.n	80a37f0 <__ieee754_pow+0x570>
 80a3c3c:	2200      	movs	r2, #0
 80a3c3e:	2300      	movs	r3, #0
 80a3c40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3c44:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a3c48:	4b3a      	ldr	r3, [pc, #232]	; (80a3d34 <__ieee754_pow+0xab4>)
 80a3c4a:	2200      	movs	r2, #0
 80a3c4c:	2600      	movs	r6, #0
 80a3c4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a3c52:	e43d      	b.n	80a34d0 <__ieee754_pow+0x250>
 80a3c54:	464a      	mov	r2, r9
 80a3c56:	463b      	mov	r3, r7
 80a3c58:	2000      	movs	r0, #0
 80a3c5a:	4936      	ldr	r1, [pc, #216]	; (80a3d34 <__ieee754_pow+0xab4>)
 80a3c5c:	f000 fd34 	bl	80a46c8 <__aeabi_ddiv>
 80a3c60:	4683      	mov	fp, r0
 80a3c62:	f7ff bb25 	b.w	80a32b0 <__ieee754_pow+0x30>
 80a3c66:	a32c      	add	r3, pc, #176	; (adr r3, 80a3d18 <__ieee754_pow+0xa98>)
 80a3c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3c70:	f000 fc00 	bl	80a4474 <__aeabi_dmul>
 80a3c74:	a328      	add	r3, pc, #160	; (adr r3, 80a3d18 <__ieee754_pow+0xa98>)
 80a3c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c7a:	f000 fbfb 	bl	80a4474 <__aeabi_dmul>
 80a3c7e:	4683      	mov	fp, r0
 80a3c80:	f7ff bb16 	b.w	80a32b0 <__ieee754_pow+0x30>
 80a3c84:	f1be 0f00 	cmp.w	lr, #0
 80a3c88:	f47f ab4f 	bne.w	80a332a <__ieee754_pow+0xaa>
 80a3c8c:	f1c3 0314 	rsb	r3, r3, #20
 80a3c90:	fa48 f203 	asr.w	r2, r8, r3
 80a3c94:	fa02 f303 	lsl.w	r3, r2, r3
 80a3c98:	4598      	cmp	r8, r3
 80a3c9a:	d024      	beq.n	80a3ce6 <__ieee754_pow+0xa66>
 80a3c9c:	4674      	mov	r4, lr
 80a3c9e:	f7ff bb21 	b.w	80a32e4 <__ieee754_pow+0x64>
 80a3ca2:	4b26      	ldr	r3, [pc, #152]	; (80a3d3c <__ieee754_pow+0xabc>)
 80a3ca4:	429f      	cmp	r7, r3
 80a3ca6:	f73f ae07 	bgt.w	80a38b8 <__ieee754_pow+0x638>
 80a3caa:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80a3cae:	469a      	mov	sl, r3
 80a3cb0:	469b      	mov	fp, r3
 80a3cb2:	e62e      	b.n	80a3912 <__ieee754_pow+0x692>
 80a3cb4:	4602      	mov	r2, r0
 80a3cb6:	460b      	mov	r3, r1
 80a3cb8:	f7ff bbb9 	b.w	80a342e <__ieee754_pow+0x1ae>
 80a3cbc:	4b20      	ldr	r3, [pc, #128]	; (80a3d40 <__ieee754_pow+0xac0>)
 80a3cbe:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80a3cc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a3cc6:	a316      	add	r3, pc, #88	; (adr r3, 80a3d20 <__ieee754_pow+0xaa0>)
 80a3cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3ccc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3cd0:	a315      	add	r3, pc, #84	; (adr r3, 80a3d28 <__ieee754_pow+0xaa8>)
 80a3cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3cd6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a3cda:	f7ff bbf9 	b.w	80a34d0 <__ieee754_pow+0x250>
 80a3cde:	465a      	mov	r2, fp
 80a3ce0:	f000 f996 	bl	80a4010 <scalbn>
 80a3ce4:	e6c5      	b.n	80a3a72 <__ieee754_pow+0x7f2>
 80a3ce6:	f002 0201 	and.w	r2, r2, #1
 80a3cea:	f1c2 0402 	rsb	r4, r2, #2
 80a3cee:	f7ff baf9 	b.w	80a32e4 <__ieee754_pow+0x64>
 80a3cf2:	bf00      	nop
 80a3cf4:	f3af 8000 	nop.w
 80a3cf8:	60000000 	.word	0x60000000
 80a3cfc:	3ff71547 	.word	0x3ff71547
 80a3d00:	f85ddf44 	.word	0xf85ddf44
 80a3d04:	3e54ae0b 	.word	0x3e54ae0b
 80a3d08:	55555555 	.word	0x55555555
 80a3d0c:	3fd55555 	.word	0x3fd55555
 80a3d10:	652b82fe 	.word	0x652b82fe
 80a3d14:	3ff71547 	.word	0x3ff71547
 80a3d18:	8800759c 	.word	0x8800759c
 80a3d1c:	7e37e43c 	.word	0x7e37e43c
 80a3d20:	40000000 	.word	0x40000000
 80a3d24:	3fe2b803 	.word	0x3fe2b803
 80a3d28:	43cfd006 	.word	0x43cfd006
 80a3d2c:	3e4cfdeb 	.word	0x3e4cfdeb
 80a3d30:	3feffffe 	.word	0x3feffffe
 80a3d34:	3ff00000 	.word	0x3ff00000
 80a3d38:	3fd00000 	.word	0x3fd00000
 80a3d3c:	3fe00000 	.word	0x3fe00000
 80a3d40:	3ff80000 	.word	0x3ff80000

080a3d44 <__ieee754_sqrt>:
 80a3d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3d48:	4e5f      	ldr	r6, [pc, #380]	; (80a3ec8 <__ieee754_sqrt+0x184>)
 80a3d4a:	460c      	mov	r4, r1
 80a3d4c:	46b6      	mov	lr, r6
 80a3d4e:	400e      	ands	r6, r1
 80a3d50:	4576      	cmp	r6, lr
 80a3d52:	4605      	mov	r5, r0
 80a3d54:	f000 8098 	beq.w	80a3e88 <__ieee754_sqrt+0x144>
 80a3d58:	2900      	cmp	r1, #0
 80a3d5a:	460b      	mov	r3, r1
 80a3d5c:	4602      	mov	r2, r0
 80a3d5e:	dd74      	ble.n	80a3e4a <__ieee754_sqrt+0x106>
 80a3d60:	ea5f 5e21 	movs.w	lr, r1, asr #20
 80a3d64:	d07f      	beq.n	80a3e66 <__ieee754_sqrt+0x122>
 80a3d66:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 80a3d6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a3d6e:	f01e 0f01 	tst.w	lr, #1
 80a3d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a3d76:	d163      	bne.n	80a3e40 <__ieee754_sqrt+0xfc>
 80a3d78:	2700      	movs	r7, #0
 80a3d7a:	463e      	mov	r6, r7
 80a3d7c:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80a3d80:	440b      	add	r3, r1
 80a3d82:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a3d86:	0052      	lsls	r2, r2, #1
 80a3d88:	2016      	movs	r0, #22
 80a3d8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80a3d8e:	1874      	adds	r4, r6, r1
 80a3d90:	429c      	cmp	r4, r3
 80a3d92:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80a3d96:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a3d9a:	dc02      	bgt.n	80a3da2 <__ieee754_sqrt+0x5e>
 80a3d9c:	1b1b      	subs	r3, r3, r4
 80a3d9e:	1866      	adds	r6, r4, r1
 80a3da0:	440f      	add	r7, r1
 80a3da2:	3801      	subs	r0, #1
 80a3da4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80a3da8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a3dac:	d1ef      	bne.n	80a3d8e <__ieee754_sqrt+0x4a>
 80a3dae:	4684      	mov	ip, r0
 80a3db0:	2420      	movs	r4, #32
 80a3db2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80a3db6:	e009      	b.n	80a3dcc <__ieee754_sqrt+0x88>
 80a3db8:	d020      	beq.n	80a3dfc <__ieee754_sqrt+0xb8>
 80a3dba:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80a3dbe:	3c01      	subs	r4, #1
 80a3dc0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a3dc4:	442b      	add	r3, r5
 80a3dc6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a3dca:	d020      	beq.n	80a3e0e <__ieee754_sqrt+0xca>
 80a3dcc:	429e      	cmp	r6, r3
 80a3dce:	eb01 050c 	add.w	r5, r1, ip
 80a3dd2:	daf1      	bge.n	80a3db8 <__ieee754_sqrt+0x74>
 80a3dd4:	2d00      	cmp	r5, #0
 80a3dd6:	eb05 0c01 	add.w	ip, r5, r1
 80a3dda:	db09      	blt.n	80a3df0 <__ieee754_sqrt+0xac>
 80a3ddc:	46b0      	mov	r8, r6
 80a3dde:	4295      	cmp	r5, r2
 80a3de0:	eba3 0306 	sub.w	r3, r3, r6
 80a3de4:	d900      	bls.n	80a3de8 <__ieee754_sqrt+0xa4>
 80a3de6:	3b01      	subs	r3, #1
 80a3de8:	4646      	mov	r6, r8
 80a3dea:	1b52      	subs	r2, r2, r5
 80a3dec:	4408      	add	r0, r1
 80a3dee:	e7e4      	b.n	80a3dba <__ieee754_sqrt+0x76>
 80a3df0:	f1bc 0f00 	cmp.w	ip, #0
 80a3df4:	dbf2      	blt.n	80a3ddc <__ieee754_sqrt+0x98>
 80a3df6:	f106 0801 	add.w	r8, r6, #1
 80a3dfa:	e7f0      	b.n	80a3dde <__ieee754_sqrt+0x9a>
 80a3dfc:	4295      	cmp	r5, r2
 80a3dfe:	d817      	bhi.n	80a3e30 <__ieee754_sqrt+0xec>
 80a3e00:	2d00      	cmp	r5, #0
 80a3e02:	eb05 0c01 	add.w	ip, r5, r1
 80a3e06:	db49      	blt.n	80a3e9c <__ieee754_sqrt+0x158>
 80a3e08:	4698      	mov	r8, r3
 80a3e0a:	2300      	movs	r3, #0
 80a3e0c:	e7ec      	b.n	80a3de8 <__ieee754_sqrt+0xa4>
 80a3e0e:	4313      	orrs	r3, r2
 80a3e10:	d110      	bne.n	80a3e34 <__ieee754_sqrt+0xf0>
 80a3e12:	0840      	lsrs	r0, r0, #1
 80a3e14:	107b      	asrs	r3, r7, #1
 80a3e16:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a3e1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a3e1e:	07fa      	lsls	r2, r7, #31
 80a3e20:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 80a3e24:	4639      	mov	r1, r7
 80a3e26:	bf48      	it	mi
 80a3e28:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80a3e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3e30:	4633      	mov	r3, r6
 80a3e32:	e7c2      	b.n	80a3dba <__ieee754_sqrt+0x76>
 80a3e34:	1c41      	adds	r1, r0, #1
 80a3e36:	d035      	beq.n	80a3ea4 <__ieee754_sqrt+0x160>
 80a3e38:	f000 0301 	and.w	r3, r0, #1
 80a3e3c:	4418      	add	r0, r3
 80a3e3e:	e7e8      	b.n	80a3e12 <__ieee754_sqrt+0xce>
 80a3e40:	005b      	lsls	r3, r3, #1
 80a3e42:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80a3e46:	0052      	lsls	r2, r2, #1
 80a3e48:	e796      	b.n	80a3d78 <__ieee754_sqrt+0x34>
 80a3e4a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a3e4e:	4306      	orrs	r6, r0
 80a3e50:	d0ec      	beq.n	80a3e2c <__ieee754_sqrt+0xe8>
 80a3e52:	bb79      	cbnz	r1, 80a3eb4 <__ieee754_sqrt+0x170>
 80a3e54:	468e      	mov	lr, r1
 80a3e56:	0ad3      	lsrs	r3, r2, #11
 80a3e58:	f1ae 0e15 	sub.w	lr, lr, #21
 80a3e5c:	0552      	lsls	r2, r2, #21
 80a3e5e:	2b00      	cmp	r3, #0
 80a3e60:	d0f9      	beq.n	80a3e56 <__ieee754_sqrt+0x112>
 80a3e62:	02dd      	lsls	r5, r3, #11
 80a3e64:	d421      	bmi.n	80a3eaa <__ieee754_sqrt+0x166>
 80a3e66:	2100      	movs	r1, #0
 80a3e68:	e000      	b.n	80a3e6c <__ieee754_sqrt+0x128>
 80a3e6a:	4601      	mov	r1, r0
 80a3e6c:	005b      	lsls	r3, r3, #1
 80a3e6e:	02dc      	lsls	r4, r3, #11
 80a3e70:	f101 0001 	add.w	r0, r1, #1
 80a3e74:	d5f9      	bpl.n	80a3e6a <__ieee754_sqrt+0x126>
 80a3e76:	f1c0 0420 	rsb	r4, r0, #32
 80a3e7a:	fa22 f404 	lsr.w	r4, r2, r4
 80a3e7e:	4323      	orrs	r3, r4
 80a3e80:	ebc1 0e0e 	rsb	lr, r1, lr
 80a3e84:	4082      	lsls	r2, r0
 80a3e86:	e76e      	b.n	80a3d66 <__ieee754_sqrt+0x22>
 80a3e88:	4602      	mov	r2, r0
 80a3e8a:	460b      	mov	r3, r1
 80a3e8c:	f000 faf2 	bl	80a4474 <__aeabi_dmul>
 80a3e90:	462a      	mov	r2, r5
 80a3e92:	4623      	mov	r3, r4
 80a3e94:	f000 f93c 	bl	80a4110 <__adddf3>
 80a3e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3e9c:	f1bc 0f00 	cmp.w	ip, #0
 80a3ea0:	daa9      	bge.n	80a3df6 <__ieee754_sqrt+0xb2>
 80a3ea2:	e7b1      	b.n	80a3e08 <__ieee754_sqrt+0xc4>
 80a3ea4:	3701      	adds	r7, #1
 80a3ea6:	4620      	mov	r0, r4
 80a3ea8:	e7b4      	b.n	80a3e14 <__ieee754_sqrt+0xd0>
 80a3eaa:	2420      	movs	r4, #32
 80a3eac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a3eb0:	2000      	movs	r0, #0
 80a3eb2:	e7e2      	b.n	80a3e7a <__ieee754_sqrt+0x136>
 80a3eb4:	4602      	mov	r2, r0
 80a3eb6:	460b      	mov	r3, r1
 80a3eb8:	f000 f928 	bl	80a410c <__aeabi_dsub>
 80a3ebc:	4602      	mov	r2, r0
 80a3ebe:	460b      	mov	r3, r1
 80a3ec0:	f000 fc02 	bl	80a46c8 <__aeabi_ddiv>
 80a3ec4:	e7b2      	b.n	80a3e2c <__ieee754_sqrt+0xe8>
 80a3ec6:	bf00      	nop
 80a3ec8:	7ff00000 	.word	0x7ff00000

080a3ecc <fabs>:
 80a3ecc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3ed0:	4770      	bx	lr
 80a3ed2:	bf00      	nop

080a3ed4 <finite>:
 80a3ed4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80a3ed8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80a3edc:	0fc0      	lsrs	r0, r0, #31
 80a3ede:	4770      	bx	lr

080a3ee0 <matherr>:
 80a3ee0:	2000      	movs	r0, #0
 80a3ee2:	4770      	bx	lr

080a3ee4 <nan>:
 80a3ee4:	2000      	movs	r0, #0
 80a3ee6:	4901      	ldr	r1, [pc, #4]	; (80a3eec <nan+0x8>)
 80a3ee8:	4770      	bx	lr
 80a3eea:	bf00      	nop
 80a3eec:	7ff80000 	.word	0x7ff80000

080a3ef0 <rint>:
 80a3ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3ef2:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 80a3ef6:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
 80a3efa:	2e13      	cmp	r6, #19
 80a3efc:	b083      	sub	sp, #12
 80a3efe:	4602      	mov	r2, r0
 80a3f00:	460b      	mov	r3, r1
 80a3f02:	460c      	mov	r4, r1
 80a3f04:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80a3f08:	4607      	mov	r7, r0
 80a3f0a:	dc2e      	bgt.n	80a3f6a <rint+0x7a>
 80a3f0c:	2e00      	cmp	r6, #0
 80a3f0e:	db49      	blt.n	80a3fa4 <rint+0xb4>
 80a3f10:	493d      	ldr	r1, [pc, #244]	; (80a4008 <rint+0x118>)
 80a3f12:	4131      	asrs	r1, r6
 80a3f14:	ea03 0001 	and.w	r0, r3, r1
 80a3f18:	4310      	orrs	r0, r2
 80a3f1a:	d02b      	beq.n	80a3f74 <rint+0x84>
 80a3f1c:	0849      	lsrs	r1, r1, #1
 80a3f1e:	400b      	ands	r3, r1
 80a3f20:	ea53 0702 	orrs.w	r7, r3, r2
 80a3f24:	d00c      	beq.n	80a3f40 <rint+0x50>
 80a3f26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80a3f2a:	2e13      	cmp	r6, #19
 80a3f2c:	ea24 0101 	bic.w	r1, r4, r1
 80a3f30:	fa43 f406 	asr.w	r4, r3, r6
 80a3f34:	ea44 0401 	orr.w	r4, r4, r1
 80a3f38:	bf0c      	ite	eq
 80a3f3a:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80a3f3e:	2700      	movne	r7, #0
 80a3f40:	4b32      	ldr	r3, [pc, #200]	; (80a400c <rint+0x11c>)
 80a3f42:	4621      	mov	r1, r4
 80a3f44:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80a3f48:	e9d5 4500 	ldrd	r4, r5, [r5]
 80a3f4c:	4638      	mov	r0, r7
 80a3f4e:	4622      	mov	r2, r4
 80a3f50:	462b      	mov	r3, r5
 80a3f52:	f000 f8dd 	bl	80a4110 <__adddf3>
 80a3f56:	e9cd 0100 	strd	r0, r1, [sp]
 80a3f5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3f5e:	4622      	mov	r2, r4
 80a3f60:	462b      	mov	r3, r5
 80a3f62:	f000 f8d3 	bl	80a410c <__aeabi_dsub>
 80a3f66:	b003      	add	sp, #12
 80a3f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3f6a:	2e33      	cmp	r6, #51	; 0x33
 80a3f6c:	dd06      	ble.n	80a3f7c <rint+0x8c>
 80a3f6e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a3f72:	d045      	beq.n	80a4000 <rint+0x110>
 80a3f74:	4610      	mov	r0, r2
 80a3f76:	4619      	mov	r1, r3
 80a3f78:	b003      	add	sp, #12
 80a3f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3f7c:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 80a3f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a3f84:	fa21 f10e 	lsr.w	r1, r1, lr
 80a3f88:	4208      	tst	r0, r1
 80a3f8a:	d0f3      	beq.n	80a3f74 <rint+0x84>
 80a3f8c:	0849      	lsrs	r1, r1, #1
 80a3f8e:	4208      	tst	r0, r1
 80a3f90:	d0d6      	beq.n	80a3f40 <rint+0x50>
 80a3f92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a3f96:	ea20 0101 	bic.w	r1, r0, r1
 80a3f9a:	fa43 fe0e 	asr.w	lr, r3, lr
 80a3f9e:	ea4e 0701 	orr.w	r7, lr, r1
 80a3fa2:	e7cd      	b.n	80a3f40 <rint+0x50>
 80a3fa4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3fa8:	4301      	orrs	r1, r0
 80a3faa:	4619      	mov	r1, r3
 80a3fac:	d0e4      	beq.n	80a3f78 <rint+0x88>
 80a3fae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a3fb2:	ea43 0c00 	orr.w	ip, r3, r0
 80a3fb6:	f1cc 0300 	rsb	r3, ip, #0
 80a3fba:	ea43 0c0c 	orr.w	ip, r3, ip
 80a3fbe:	4b13      	ldr	r3, [pc, #76]	; (80a400c <rint+0x11c>)
 80a3fc0:	0c64      	lsrs	r4, r4, #17
 80a3fc2:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
 80a3fc6:	f40c 2c00 	and.w	ip, ip, #524288	; 0x80000
 80a3fca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80a3fce:	0464      	lsls	r4, r4, #17
 80a3fd0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80a3fd4:	ea4c 0104 	orr.w	r1, ip, r4
 80a3fd8:	4632      	mov	r2, r6
 80a3fda:	463b      	mov	r3, r7
 80a3fdc:	f000 f898 	bl	80a4110 <__adddf3>
 80a3fe0:	e9cd 0100 	strd	r0, r1, [sp]
 80a3fe4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3fe8:	4632      	mov	r2, r6
 80a3fea:	463b      	mov	r3, r7
 80a3fec:	f000 f88e 	bl	80a410c <__aeabi_dsub>
 80a3ff0:	4602      	mov	r2, r0
 80a3ff2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3ff6:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 80a3ffa:	4610      	mov	r0, r2
 80a3ffc:	4619      	mov	r1, r3
 80a3ffe:	e7bb      	b.n	80a3f78 <rint+0x88>
 80a4000:	f000 f886 	bl	80a4110 <__adddf3>
 80a4004:	e7b8      	b.n	80a3f78 <rint+0x88>
 80a4006:	bf00      	nop
 80a4008:	000fffff 	.word	0x000fffff
 80a400c:	080a5578 	.word	0x080a5578

080a4010 <scalbn>:
 80a4010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4012:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a4016:	4604      	mov	r4, r0
 80a4018:	460d      	mov	r5, r1
 80a401a:	460b      	mov	r3, r1
 80a401c:	4617      	mov	r7, r2
 80a401e:	bb06      	cbnz	r6, 80a4062 <scalbn+0x52>
 80a4020:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a4024:	4303      	orrs	r3, r0
 80a4026:	d025      	beq.n	80a4074 <scalbn+0x64>
 80a4028:	2200      	movs	r2, #0
 80a402a:	4b2f      	ldr	r3, [pc, #188]	; (80a40e8 <scalbn+0xd8>)
 80a402c:	f000 fa22 	bl	80a4474 <__aeabi_dmul>
 80a4030:	4a2e      	ldr	r2, [pc, #184]	; (80a40ec <scalbn+0xdc>)
 80a4032:	4604      	mov	r4, r0
 80a4034:	4297      	cmp	r7, r2
 80a4036:	460d      	mov	r5, r1
 80a4038:	460b      	mov	r3, r1
 80a403a:	db2a      	blt.n	80a4092 <scalbn+0x82>
 80a403c:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a4040:	3e36      	subs	r6, #54	; 0x36
 80a4042:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a4046:	443e      	add	r6, r7
 80a4048:	4296      	cmp	r6, r2
 80a404a:	dc28      	bgt.n	80a409e <scalbn+0x8e>
 80a404c:	2e00      	cmp	r6, #0
 80a404e:	dd12      	ble.n	80a4076 <scalbn+0x66>
 80a4050:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a4054:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a4058:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a405c:	4620      	mov	r0, r4
 80a405e:	4629      	mov	r1, r5
 80a4060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4062:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80a4066:	4296      	cmp	r6, r2
 80a4068:	d1eb      	bne.n	80a4042 <scalbn+0x32>
 80a406a:	4602      	mov	r2, r0
 80a406c:	460b      	mov	r3, r1
 80a406e:	f000 f84f 	bl	80a4110 <__adddf3>
 80a4072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4076:	f116 0f35 	cmn.w	r6, #53	; 0x35
 80a407a:	da1d      	bge.n	80a40b8 <scalbn+0xa8>
 80a407c:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a4080:	429f      	cmp	r7, r3
 80a4082:	dc0c      	bgt.n	80a409e <scalbn+0x8e>
 80a4084:	a114      	add	r1, pc, #80	; (adr r1, 80a40d8 <scalbn+0xc8>)
 80a4086:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a408a:	4622      	mov	r2, r4
 80a408c:	462b      	mov	r3, r5
 80a408e:	f000 f831 	bl	80a40f4 <copysign>
 80a4092:	a311      	add	r3, pc, #68	; (adr r3, 80a40d8 <scalbn+0xc8>)
 80a4094:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4098:	f000 f9ec 	bl	80a4474 <__aeabi_dmul>
 80a409c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a409e:	4622      	mov	r2, r4
 80a40a0:	a10f      	add	r1, pc, #60	; (adr r1, 80a40e0 <scalbn+0xd0>)
 80a40a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a40a6:	462b      	mov	r3, r5
 80a40a8:	f000 f824 	bl	80a40f4 <copysign>
 80a40ac:	a30c      	add	r3, pc, #48	; (adr r3, 80a40e0 <scalbn+0xd0>)
 80a40ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a40b2:	f000 f9df 	bl	80a4474 <__aeabi_dmul>
 80a40b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a40b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a40bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a40c0:	3636      	adds	r6, #54	; 0x36
 80a40c2:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a40c6:	4620      	mov	r0, r4
 80a40c8:	4629      	mov	r1, r5
 80a40ca:	2200      	movs	r2, #0
 80a40cc:	4b08      	ldr	r3, [pc, #32]	; (80a40f0 <scalbn+0xe0>)
 80a40ce:	f000 f9d1 	bl	80a4474 <__aeabi_dmul>
 80a40d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a40d4:	f3af 8000 	nop.w
 80a40d8:	c2f8f359 	.word	0xc2f8f359
 80a40dc:	01a56e1f 	.word	0x01a56e1f
 80a40e0:	8800759c 	.word	0x8800759c
 80a40e4:	7e37e43c 	.word	0x7e37e43c
 80a40e8:	43500000 	.word	0x43500000
 80a40ec:	ffff3cb0 	.word	0xffff3cb0
 80a40f0:	3c900000 	.word	0x3c900000

080a40f4 <copysign>:
 80a40f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80a40f8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a40fc:	ea42 0103 	orr.w	r1, r2, r3
 80a4100:	4770      	bx	lr
 80a4102:	bf00      	nop

080a4104 <__aeabi_drsub>:
 80a4104:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a4108:	e002      	b.n	80a4110 <__adddf3>
 80a410a:	bf00      	nop

080a410c <__aeabi_dsub>:
 80a410c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a4110 <__adddf3>:
 80a4110:	b530      	push	{r4, r5, lr}
 80a4112:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a4116:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a411a:	ea94 0f05 	teq	r4, r5
 80a411e:	bf08      	it	eq
 80a4120:	ea90 0f02 	teqeq	r0, r2
 80a4124:	bf1f      	itttt	ne
 80a4126:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a412a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a412e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a4132:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4136:	f000 80e2 	beq.w	80a42fe <__adddf3+0x1ee>
 80a413a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a413e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a4142:	bfb8      	it	lt
 80a4144:	426d      	neglt	r5, r5
 80a4146:	dd0c      	ble.n	80a4162 <__adddf3+0x52>
 80a4148:	442c      	add	r4, r5
 80a414a:	ea80 0202 	eor.w	r2, r0, r2
 80a414e:	ea81 0303 	eor.w	r3, r1, r3
 80a4152:	ea82 0000 	eor.w	r0, r2, r0
 80a4156:	ea83 0101 	eor.w	r1, r3, r1
 80a415a:	ea80 0202 	eor.w	r2, r0, r2
 80a415e:	ea81 0303 	eor.w	r3, r1, r3
 80a4162:	2d36      	cmp	r5, #54	; 0x36
 80a4164:	bf88      	it	hi
 80a4166:	bd30      	pophi	{r4, r5, pc}
 80a4168:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a416c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4170:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a4174:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a4178:	d002      	beq.n	80a4180 <__adddf3+0x70>
 80a417a:	4240      	negs	r0, r0
 80a417c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4180:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a4184:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4188:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a418c:	d002      	beq.n	80a4194 <__adddf3+0x84>
 80a418e:	4252      	negs	r2, r2
 80a4190:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4194:	ea94 0f05 	teq	r4, r5
 80a4198:	f000 80a7 	beq.w	80a42ea <__adddf3+0x1da>
 80a419c:	f1a4 0401 	sub.w	r4, r4, #1
 80a41a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80a41a4:	db0d      	blt.n	80a41c2 <__adddf3+0xb2>
 80a41a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a41aa:	fa22 f205 	lsr.w	r2, r2, r5
 80a41ae:	1880      	adds	r0, r0, r2
 80a41b0:	f141 0100 	adc.w	r1, r1, #0
 80a41b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80a41b8:	1880      	adds	r0, r0, r2
 80a41ba:	fa43 f305 	asr.w	r3, r3, r5
 80a41be:	4159      	adcs	r1, r3
 80a41c0:	e00e      	b.n	80a41e0 <__adddf3+0xd0>
 80a41c2:	f1a5 0520 	sub.w	r5, r5, #32
 80a41c6:	f10e 0e20 	add.w	lr, lr, #32
 80a41ca:	2a01      	cmp	r2, #1
 80a41cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a41d0:	bf28      	it	cs
 80a41d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a41d6:	fa43 f305 	asr.w	r3, r3, r5
 80a41da:	18c0      	adds	r0, r0, r3
 80a41dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a41e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a41e4:	d507      	bpl.n	80a41f6 <__adddf3+0xe6>
 80a41e6:	f04f 0e00 	mov.w	lr, #0
 80a41ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80a41ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a41f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a41f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a41fa:	d31b      	bcc.n	80a4234 <__adddf3+0x124>
 80a41fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a4200:	d30c      	bcc.n	80a421c <__adddf3+0x10c>
 80a4202:	0849      	lsrs	r1, r1, #1
 80a4204:	ea5f 0030 	movs.w	r0, r0, rrx
 80a4208:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a420c:	f104 0401 	add.w	r4, r4, #1
 80a4210:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a4214:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a4218:	f080 809a 	bcs.w	80a4350 <__adddf3+0x240>
 80a421c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4220:	bf08      	it	eq
 80a4222:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4226:	f150 0000 	adcs.w	r0, r0, #0
 80a422a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a422e:	ea41 0105 	orr.w	r1, r1, r5
 80a4232:	bd30      	pop	{r4, r5, pc}
 80a4234:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a4238:	4140      	adcs	r0, r0
 80a423a:	eb41 0101 	adc.w	r1, r1, r1
 80a423e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4242:	f1a4 0401 	sub.w	r4, r4, #1
 80a4246:	d1e9      	bne.n	80a421c <__adddf3+0x10c>
 80a4248:	f091 0f00 	teq	r1, #0
 80a424c:	bf04      	itt	eq
 80a424e:	4601      	moveq	r1, r0
 80a4250:	2000      	moveq	r0, #0
 80a4252:	fab1 f381 	clz	r3, r1
 80a4256:	bf08      	it	eq
 80a4258:	3320      	addeq	r3, #32
 80a425a:	f1a3 030b 	sub.w	r3, r3, #11
 80a425e:	f1b3 0220 	subs.w	r2, r3, #32
 80a4262:	da0c      	bge.n	80a427e <__adddf3+0x16e>
 80a4264:	320c      	adds	r2, #12
 80a4266:	dd08      	ble.n	80a427a <__adddf3+0x16a>
 80a4268:	f102 0c14 	add.w	ip, r2, #20
 80a426c:	f1c2 020c 	rsb	r2, r2, #12
 80a4270:	fa01 f00c 	lsl.w	r0, r1, ip
 80a4274:	fa21 f102 	lsr.w	r1, r1, r2
 80a4278:	e00c      	b.n	80a4294 <__adddf3+0x184>
 80a427a:	f102 0214 	add.w	r2, r2, #20
 80a427e:	bfd8      	it	le
 80a4280:	f1c2 0c20 	rsble	ip, r2, #32
 80a4284:	fa01 f102 	lsl.w	r1, r1, r2
 80a4288:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a428c:	bfdc      	itt	le
 80a428e:	ea41 010c 	orrle.w	r1, r1, ip
 80a4292:	4090      	lslle	r0, r2
 80a4294:	1ae4      	subs	r4, r4, r3
 80a4296:	bfa2      	ittt	ge
 80a4298:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a429c:	4329      	orrge	r1, r5
 80a429e:	bd30      	popge	{r4, r5, pc}
 80a42a0:	ea6f 0404 	mvn.w	r4, r4
 80a42a4:	3c1f      	subs	r4, #31
 80a42a6:	da1c      	bge.n	80a42e2 <__adddf3+0x1d2>
 80a42a8:	340c      	adds	r4, #12
 80a42aa:	dc0e      	bgt.n	80a42ca <__adddf3+0x1ba>
 80a42ac:	f104 0414 	add.w	r4, r4, #20
 80a42b0:	f1c4 0220 	rsb	r2, r4, #32
 80a42b4:	fa20 f004 	lsr.w	r0, r0, r4
 80a42b8:	fa01 f302 	lsl.w	r3, r1, r2
 80a42bc:	ea40 0003 	orr.w	r0, r0, r3
 80a42c0:	fa21 f304 	lsr.w	r3, r1, r4
 80a42c4:	ea45 0103 	orr.w	r1, r5, r3
 80a42c8:	bd30      	pop	{r4, r5, pc}
 80a42ca:	f1c4 040c 	rsb	r4, r4, #12
 80a42ce:	f1c4 0220 	rsb	r2, r4, #32
 80a42d2:	fa20 f002 	lsr.w	r0, r0, r2
 80a42d6:	fa01 f304 	lsl.w	r3, r1, r4
 80a42da:	ea40 0003 	orr.w	r0, r0, r3
 80a42de:	4629      	mov	r1, r5
 80a42e0:	bd30      	pop	{r4, r5, pc}
 80a42e2:	fa21 f004 	lsr.w	r0, r1, r4
 80a42e6:	4629      	mov	r1, r5
 80a42e8:	bd30      	pop	{r4, r5, pc}
 80a42ea:	f094 0f00 	teq	r4, #0
 80a42ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a42f2:	bf06      	itte	eq
 80a42f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a42f8:	3401      	addeq	r4, #1
 80a42fa:	3d01      	subne	r5, #1
 80a42fc:	e74e      	b.n	80a419c <__adddf3+0x8c>
 80a42fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4302:	bf18      	it	ne
 80a4304:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4308:	d029      	beq.n	80a435e <__adddf3+0x24e>
 80a430a:	ea94 0f05 	teq	r4, r5
 80a430e:	bf08      	it	eq
 80a4310:	ea90 0f02 	teqeq	r0, r2
 80a4314:	d005      	beq.n	80a4322 <__adddf3+0x212>
 80a4316:	ea54 0c00 	orrs.w	ip, r4, r0
 80a431a:	bf04      	itt	eq
 80a431c:	4619      	moveq	r1, r3
 80a431e:	4610      	moveq	r0, r2
 80a4320:	bd30      	pop	{r4, r5, pc}
 80a4322:	ea91 0f03 	teq	r1, r3
 80a4326:	bf1e      	ittt	ne
 80a4328:	2100      	movne	r1, #0
 80a432a:	2000      	movne	r0, #0
 80a432c:	bd30      	popne	{r4, r5, pc}
 80a432e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a4332:	d105      	bne.n	80a4340 <__adddf3+0x230>
 80a4334:	0040      	lsls	r0, r0, #1
 80a4336:	4149      	adcs	r1, r1
 80a4338:	bf28      	it	cs
 80a433a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a433e:	bd30      	pop	{r4, r5, pc}
 80a4340:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a4344:	bf3c      	itt	cc
 80a4346:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a434a:	bd30      	popcc	{r4, r5, pc}
 80a434c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4350:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a4354:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4358:	f04f 0000 	mov.w	r0, #0
 80a435c:	bd30      	pop	{r4, r5, pc}
 80a435e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4362:	bf1a      	itte	ne
 80a4364:	4619      	movne	r1, r3
 80a4366:	4610      	movne	r0, r2
 80a4368:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a436c:	bf1c      	itt	ne
 80a436e:	460b      	movne	r3, r1
 80a4370:	4602      	movne	r2, r0
 80a4372:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4376:	bf06      	itte	eq
 80a4378:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a437c:	ea91 0f03 	teqeq	r1, r3
 80a4380:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a4384:	bd30      	pop	{r4, r5, pc}
 80a4386:	bf00      	nop

080a4388 <__aeabi_ui2d>:
 80a4388:	f090 0f00 	teq	r0, #0
 80a438c:	bf04      	itt	eq
 80a438e:	2100      	moveq	r1, #0
 80a4390:	4770      	bxeq	lr
 80a4392:	b530      	push	{r4, r5, lr}
 80a4394:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4398:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a439c:	f04f 0500 	mov.w	r5, #0
 80a43a0:	f04f 0100 	mov.w	r1, #0
 80a43a4:	e750      	b.n	80a4248 <__adddf3+0x138>
 80a43a6:	bf00      	nop

080a43a8 <__aeabi_i2d>:
 80a43a8:	f090 0f00 	teq	r0, #0
 80a43ac:	bf04      	itt	eq
 80a43ae:	2100      	moveq	r1, #0
 80a43b0:	4770      	bxeq	lr
 80a43b2:	b530      	push	{r4, r5, lr}
 80a43b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a43b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a43bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a43c0:	bf48      	it	mi
 80a43c2:	4240      	negmi	r0, r0
 80a43c4:	f04f 0100 	mov.w	r1, #0
 80a43c8:	e73e      	b.n	80a4248 <__adddf3+0x138>
 80a43ca:	bf00      	nop

080a43cc <__aeabi_f2d>:
 80a43cc:	0042      	lsls	r2, r0, #1
 80a43ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a43d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a43d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a43da:	bf1f      	itttt	ne
 80a43dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a43e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a43e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a43e8:	4770      	bxne	lr
 80a43ea:	f092 0f00 	teq	r2, #0
 80a43ee:	bf14      	ite	ne
 80a43f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a43f4:	4770      	bxeq	lr
 80a43f6:	b530      	push	{r4, r5, lr}
 80a43f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a43fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4400:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4404:	e720      	b.n	80a4248 <__adddf3+0x138>
 80a4406:	bf00      	nop

080a4408 <__aeabi_ul2d>:
 80a4408:	ea50 0201 	orrs.w	r2, r0, r1
 80a440c:	bf08      	it	eq
 80a440e:	4770      	bxeq	lr
 80a4410:	b530      	push	{r4, r5, lr}
 80a4412:	f04f 0500 	mov.w	r5, #0
 80a4416:	e00a      	b.n	80a442e <__aeabi_l2d+0x16>

080a4418 <__aeabi_l2d>:
 80a4418:	ea50 0201 	orrs.w	r2, r0, r1
 80a441c:	bf08      	it	eq
 80a441e:	4770      	bxeq	lr
 80a4420:	b530      	push	{r4, r5, lr}
 80a4422:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a4426:	d502      	bpl.n	80a442e <__aeabi_l2d+0x16>
 80a4428:	4240      	negs	r0, r0
 80a442a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a442e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4432:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4436:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a443a:	f43f aedc 	beq.w	80a41f6 <__adddf3+0xe6>
 80a443e:	f04f 0203 	mov.w	r2, #3
 80a4442:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4446:	bf18      	it	ne
 80a4448:	3203      	addne	r2, #3
 80a444a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a444e:	bf18      	it	ne
 80a4450:	3203      	addne	r2, #3
 80a4452:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a4456:	f1c2 0320 	rsb	r3, r2, #32
 80a445a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a445e:	fa20 f002 	lsr.w	r0, r0, r2
 80a4462:	fa01 fe03 	lsl.w	lr, r1, r3
 80a4466:	ea40 000e 	orr.w	r0, r0, lr
 80a446a:	fa21 f102 	lsr.w	r1, r1, r2
 80a446e:	4414      	add	r4, r2
 80a4470:	e6c1      	b.n	80a41f6 <__adddf3+0xe6>
 80a4472:	bf00      	nop

080a4474 <__aeabi_dmul>:
 80a4474:	b570      	push	{r4, r5, r6, lr}
 80a4476:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a447a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a447e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4482:	bf1d      	ittte	ne
 80a4484:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4488:	ea94 0f0c 	teqne	r4, ip
 80a448c:	ea95 0f0c 	teqne	r5, ip
 80a4490:	f000 f8de 	bleq	80a4650 <__aeabi_dmul+0x1dc>
 80a4494:	442c      	add	r4, r5
 80a4496:	ea81 0603 	eor.w	r6, r1, r3
 80a449a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a449e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a44a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a44a6:	bf18      	it	ne
 80a44a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a44ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a44b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a44b4:	d038      	beq.n	80a4528 <__aeabi_dmul+0xb4>
 80a44b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a44ba:	f04f 0500 	mov.w	r5, #0
 80a44be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a44c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a44c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a44ca:	f04f 0600 	mov.w	r6, #0
 80a44ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a44d2:	f09c 0f00 	teq	ip, #0
 80a44d6:	bf18      	it	ne
 80a44d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a44dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a44e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a44e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a44e8:	d204      	bcs.n	80a44f4 <__aeabi_dmul+0x80>
 80a44ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a44ee:	416d      	adcs	r5, r5
 80a44f0:	eb46 0606 	adc.w	r6, r6, r6
 80a44f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a44f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a44fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4500:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a4504:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a4508:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a450c:	bf88      	it	hi
 80a450e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4512:	d81e      	bhi.n	80a4552 <__aeabi_dmul+0xde>
 80a4514:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a4518:	bf08      	it	eq
 80a451a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a451e:	f150 0000 	adcs.w	r0, r0, #0
 80a4522:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4526:	bd70      	pop	{r4, r5, r6, pc}
 80a4528:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a452c:	ea46 0101 	orr.w	r1, r6, r1
 80a4530:	ea40 0002 	orr.w	r0, r0, r2
 80a4534:	ea81 0103 	eor.w	r1, r1, r3
 80a4538:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a453c:	bfc2      	ittt	gt
 80a453e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4542:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4546:	bd70      	popgt	{r4, r5, r6, pc}
 80a4548:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a454c:	f04f 0e00 	mov.w	lr, #0
 80a4550:	3c01      	subs	r4, #1
 80a4552:	f300 80ab 	bgt.w	80a46ac <__aeabi_dmul+0x238>
 80a4556:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a455a:	bfde      	ittt	le
 80a455c:	2000      	movle	r0, #0
 80a455e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a4562:	bd70      	pople	{r4, r5, r6, pc}
 80a4564:	f1c4 0400 	rsb	r4, r4, #0
 80a4568:	3c20      	subs	r4, #32
 80a456a:	da35      	bge.n	80a45d8 <__aeabi_dmul+0x164>
 80a456c:	340c      	adds	r4, #12
 80a456e:	dc1b      	bgt.n	80a45a8 <__aeabi_dmul+0x134>
 80a4570:	f104 0414 	add.w	r4, r4, #20
 80a4574:	f1c4 0520 	rsb	r5, r4, #32
 80a4578:	fa00 f305 	lsl.w	r3, r0, r5
 80a457c:	fa20 f004 	lsr.w	r0, r0, r4
 80a4580:	fa01 f205 	lsl.w	r2, r1, r5
 80a4584:	ea40 0002 	orr.w	r0, r0, r2
 80a4588:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a458c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4590:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4594:	fa21 f604 	lsr.w	r6, r1, r4
 80a4598:	eb42 0106 	adc.w	r1, r2, r6
 80a459c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a45a0:	bf08      	it	eq
 80a45a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a45a6:	bd70      	pop	{r4, r5, r6, pc}
 80a45a8:	f1c4 040c 	rsb	r4, r4, #12
 80a45ac:	f1c4 0520 	rsb	r5, r4, #32
 80a45b0:	fa00 f304 	lsl.w	r3, r0, r4
 80a45b4:	fa20 f005 	lsr.w	r0, r0, r5
 80a45b8:	fa01 f204 	lsl.w	r2, r1, r4
 80a45bc:	ea40 0002 	orr.w	r0, r0, r2
 80a45c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a45c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a45c8:	f141 0100 	adc.w	r1, r1, #0
 80a45cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a45d0:	bf08      	it	eq
 80a45d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a45d6:	bd70      	pop	{r4, r5, r6, pc}
 80a45d8:	f1c4 0520 	rsb	r5, r4, #32
 80a45dc:	fa00 f205 	lsl.w	r2, r0, r5
 80a45e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a45e4:	fa20 f304 	lsr.w	r3, r0, r4
 80a45e8:	fa01 f205 	lsl.w	r2, r1, r5
 80a45ec:	ea43 0302 	orr.w	r3, r3, r2
 80a45f0:	fa21 f004 	lsr.w	r0, r1, r4
 80a45f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a45f8:	fa21 f204 	lsr.w	r2, r1, r4
 80a45fc:	ea20 0002 	bic.w	r0, r0, r2
 80a4600:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4608:	bf08      	it	eq
 80a460a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a460e:	bd70      	pop	{r4, r5, r6, pc}
 80a4610:	f094 0f00 	teq	r4, #0
 80a4614:	d10f      	bne.n	80a4636 <__aeabi_dmul+0x1c2>
 80a4616:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a461a:	0040      	lsls	r0, r0, #1
 80a461c:	eb41 0101 	adc.w	r1, r1, r1
 80a4620:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4624:	bf08      	it	eq
 80a4626:	3c01      	subeq	r4, #1
 80a4628:	d0f7      	beq.n	80a461a <__aeabi_dmul+0x1a6>
 80a462a:	ea41 0106 	orr.w	r1, r1, r6
 80a462e:	f095 0f00 	teq	r5, #0
 80a4632:	bf18      	it	ne
 80a4634:	4770      	bxne	lr
 80a4636:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a463a:	0052      	lsls	r2, r2, #1
 80a463c:	eb43 0303 	adc.w	r3, r3, r3
 80a4640:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a4644:	bf08      	it	eq
 80a4646:	3d01      	subeq	r5, #1
 80a4648:	d0f7      	beq.n	80a463a <__aeabi_dmul+0x1c6>
 80a464a:	ea43 0306 	orr.w	r3, r3, r6
 80a464e:	4770      	bx	lr
 80a4650:	ea94 0f0c 	teq	r4, ip
 80a4654:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4658:	bf18      	it	ne
 80a465a:	ea95 0f0c 	teqne	r5, ip
 80a465e:	d00c      	beq.n	80a467a <__aeabi_dmul+0x206>
 80a4660:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4664:	bf18      	it	ne
 80a4666:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a466a:	d1d1      	bne.n	80a4610 <__aeabi_dmul+0x19c>
 80a466c:	ea81 0103 	eor.w	r1, r1, r3
 80a4670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4674:	f04f 0000 	mov.w	r0, #0
 80a4678:	bd70      	pop	{r4, r5, r6, pc}
 80a467a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a467e:	bf06      	itte	eq
 80a4680:	4610      	moveq	r0, r2
 80a4682:	4619      	moveq	r1, r3
 80a4684:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4688:	d019      	beq.n	80a46be <__aeabi_dmul+0x24a>
 80a468a:	ea94 0f0c 	teq	r4, ip
 80a468e:	d102      	bne.n	80a4696 <__aeabi_dmul+0x222>
 80a4690:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a4694:	d113      	bne.n	80a46be <__aeabi_dmul+0x24a>
 80a4696:	ea95 0f0c 	teq	r5, ip
 80a469a:	d105      	bne.n	80a46a8 <__aeabi_dmul+0x234>
 80a469c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a46a0:	bf1c      	itt	ne
 80a46a2:	4610      	movne	r0, r2
 80a46a4:	4619      	movne	r1, r3
 80a46a6:	d10a      	bne.n	80a46be <__aeabi_dmul+0x24a>
 80a46a8:	ea81 0103 	eor.w	r1, r1, r3
 80a46ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a46b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a46b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a46b8:	f04f 0000 	mov.w	r0, #0
 80a46bc:	bd70      	pop	{r4, r5, r6, pc}
 80a46be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a46c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a46c6:	bd70      	pop	{r4, r5, r6, pc}

080a46c8 <__aeabi_ddiv>:
 80a46c8:	b570      	push	{r4, r5, r6, lr}
 80a46ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a46ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a46d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a46d6:	bf1d      	ittte	ne
 80a46d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a46dc:	ea94 0f0c 	teqne	r4, ip
 80a46e0:	ea95 0f0c 	teqne	r5, ip
 80a46e4:	f000 f8a7 	bleq	80a4836 <__aeabi_ddiv+0x16e>
 80a46e8:	eba4 0405 	sub.w	r4, r4, r5
 80a46ec:	ea81 0e03 	eor.w	lr, r1, r3
 80a46f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a46f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a46f8:	f000 8088 	beq.w	80a480c <__aeabi_ddiv+0x144>
 80a46fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4700:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4704:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4708:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a470c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4710:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4714:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a4718:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a471c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4720:	429d      	cmp	r5, r3
 80a4722:	bf08      	it	eq
 80a4724:	4296      	cmpeq	r6, r2
 80a4726:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a472a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a472e:	d202      	bcs.n	80a4736 <__aeabi_ddiv+0x6e>
 80a4730:	085b      	lsrs	r3, r3, #1
 80a4732:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4736:	1ab6      	subs	r6, r6, r2
 80a4738:	eb65 0503 	sbc.w	r5, r5, r3
 80a473c:	085b      	lsrs	r3, r3, #1
 80a473e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4742:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a4746:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a474a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a474e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4752:	bf22      	ittt	cs
 80a4754:	1ab6      	subcs	r6, r6, r2
 80a4756:	4675      	movcs	r5, lr
 80a4758:	ea40 000c 	orrcs.w	r0, r0, ip
 80a475c:	085b      	lsrs	r3, r3, #1
 80a475e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4762:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4766:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a476a:	bf22      	ittt	cs
 80a476c:	1ab6      	subcs	r6, r6, r2
 80a476e:	4675      	movcs	r5, lr
 80a4770:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4774:	085b      	lsrs	r3, r3, #1
 80a4776:	ea4f 0232 	mov.w	r2, r2, rrx
 80a477a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a477e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4782:	bf22      	ittt	cs
 80a4784:	1ab6      	subcs	r6, r6, r2
 80a4786:	4675      	movcs	r5, lr
 80a4788:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a478c:	085b      	lsrs	r3, r3, #1
 80a478e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4792:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4796:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a479a:	bf22      	ittt	cs
 80a479c:	1ab6      	subcs	r6, r6, r2
 80a479e:	4675      	movcs	r5, lr
 80a47a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a47a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80a47a8:	d018      	beq.n	80a47dc <__aeabi_ddiv+0x114>
 80a47aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a47ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a47b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a47b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a47ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a47be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a47c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a47c6:	d1c0      	bne.n	80a474a <__aeabi_ddiv+0x82>
 80a47c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a47cc:	d10b      	bne.n	80a47e6 <__aeabi_ddiv+0x11e>
 80a47ce:	ea41 0100 	orr.w	r1, r1, r0
 80a47d2:	f04f 0000 	mov.w	r0, #0
 80a47d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a47da:	e7b6      	b.n	80a474a <__aeabi_ddiv+0x82>
 80a47dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a47e0:	bf04      	itt	eq
 80a47e2:	4301      	orreq	r1, r0
 80a47e4:	2000      	moveq	r0, #0
 80a47e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a47ea:	bf88      	it	hi
 80a47ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a47f0:	f63f aeaf 	bhi.w	80a4552 <__aeabi_dmul+0xde>
 80a47f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80a47f8:	bf04      	itt	eq
 80a47fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a47fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4802:	f150 0000 	adcs.w	r0, r0, #0
 80a4806:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a480a:	bd70      	pop	{r4, r5, r6, pc}
 80a480c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4810:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4814:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a4818:	bfc2      	ittt	gt
 80a481a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a481e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4822:	bd70      	popgt	{r4, r5, r6, pc}
 80a4824:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4828:	f04f 0e00 	mov.w	lr, #0
 80a482c:	3c01      	subs	r4, #1
 80a482e:	e690      	b.n	80a4552 <__aeabi_dmul+0xde>
 80a4830:	ea45 0e06 	orr.w	lr, r5, r6
 80a4834:	e68d      	b.n	80a4552 <__aeabi_dmul+0xde>
 80a4836:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a483a:	ea94 0f0c 	teq	r4, ip
 80a483e:	bf08      	it	eq
 80a4840:	ea95 0f0c 	teqeq	r5, ip
 80a4844:	f43f af3b 	beq.w	80a46be <__aeabi_dmul+0x24a>
 80a4848:	ea94 0f0c 	teq	r4, ip
 80a484c:	d10a      	bne.n	80a4864 <__aeabi_ddiv+0x19c>
 80a484e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4852:	f47f af34 	bne.w	80a46be <__aeabi_dmul+0x24a>
 80a4856:	ea95 0f0c 	teq	r5, ip
 80a485a:	f47f af25 	bne.w	80a46a8 <__aeabi_dmul+0x234>
 80a485e:	4610      	mov	r0, r2
 80a4860:	4619      	mov	r1, r3
 80a4862:	e72c      	b.n	80a46be <__aeabi_dmul+0x24a>
 80a4864:	ea95 0f0c 	teq	r5, ip
 80a4868:	d106      	bne.n	80a4878 <__aeabi_ddiv+0x1b0>
 80a486a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a486e:	f43f aefd 	beq.w	80a466c <__aeabi_dmul+0x1f8>
 80a4872:	4610      	mov	r0, r2
 80a4874:	4619      	mov	r1, r3
 80a4876:	e722      	b.n	80a46be <__aeabi_dmul+0x24a>
 80a4878:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a487c:	bf18      	it	ne
 80a487e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4882:	f47f aec5 	bne.w	80a4610 <__aeabi_dmul+0x19c>
 80a4886:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a488a:	f47f af0d 	bne.w	80a46a8 <__aeabi_dmul+0x234>
 80a488e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a4892:	f47f aeeb 	bne.w	80a466c <__aeabi_dmul+0x1f8>
 80a4896:	e712      	b.n	80a46be <__aeabi_dmul+0x24a>

080a4898 <__gedf2>:
 80a4898:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a489c:	e006      	b.n	80a48ac <__cmpdf2+0x4>
 80a489e:	bf00      	nop

080a48a0 <__ledf2>:
 80a48a0:	f04f 0c01 	mov.w	ip, #1
 80a48a4:	e002      	b.n	80a48ac <__cmpdf2+0x4>
 80a48a6:	bf00      	nop

080a48a8 <__cmpdf2>:
 80a48a8:	f04f 0c01 	mov.w	ip, #1
 80a48ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a48b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a48b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a48b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a48bc:	bf18      	it	ne
 80a48be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a48c2:	d01b      	beq.n	80a48fc <__cmpdf2+0x54>
 80a48c4:	b001      	add	sp, #4
 80a48c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a48ca:	bf0c      	ite	eq
 80a48cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a48d0:	ea91 0f03 	teqne	r1, r3
 80a48d4:	bf02      	ittt	eq
 80a48d6:	ea90 0f02 	teqeq	r0, r2
 80a48da:	2000      	moveq	r0, #0
 80a48dc:	4770      	bxeq	lr
 80a48de:	f110 0f00 	cmn.w	r0, #0
 80a48e2:	ea91 0f03 	teq	r1, r3
 80a48e6:	bf58      	it	pl
 80a48e8:	4299      	cmppl	r1, r3
 80a48ea:	bf08      	it	eq
 80a48ec:	4290      	cmpeq	r0, r2
 80a48ee:	bf2c      	ite	cs
 80a48f0:	17d8      	asrcs	r0, r3, #31
 80a48f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a48f6:	f040 0001 	orr.w	r0, r0, #1
 80a48fa:	4770      	bx	lr
 80a48fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4904:	d102      	bne.n	80a490c <__cmpdf2+0x64>
 80a4906:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a490a:	d107      	bne.n	80a491c <__cmpdf2+0x74>
 80a490c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4914:	d1d6      	bne.n	80a48c4 <__cmpdf2+0x1c>
 80a4916:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a491a:	d0d3      	beq.n	80a48c4 <__cmpdf2+0x1c>
 80a491c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4920:	4770      	bx	lr
 80a4922:	bf00      	nop

080a4924 <__aeabi_cdrcmple>:
 80a4924:	4684      	mov	ip, r0
 80a4926:	4610      	mov	r0, r2
 80a4928:	4662      	mov	r2, ip
 80a492a:	468c      	mov	ip, r1
 80a492c:	4619      	mov	r1, r3
 80a492e:	4663      	mov	r3, ip
 80a4930:	e000      	b.n	80a4934 <__aeabi_cdcmpeq>
 80a4932:	bf00      	nop

080a4934 <__aeabi_cdcmpeq>:
 80a4934:	b501      	push	{r0, lr}
 80a4936:	f7ff ffb7 	bl	80a48a8 <__cmpdf2>
 80a493a:	2800      	cmp	r0, #0
 80a493c:	bf48      	it	mi
 80a493e:	f110 0f00 	cmnmi.w	r0, #0
 80a4942:	bd01      	pop	{r0, pc}

080a4944 <__aeabi_dcmpeq>:
 80a4944:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4948:	f7ff fff4 	bl	80a4934 <__aeabi_cdcmpeq>
 80a494c:	bf0c      	ite	eq
 80a494e:	2001      	moveq	r0, #1
 80a4950:	2000      	movne	r0, #0
 80a4952:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4956:	bf00      	nop

080a4958 <__aeabi_dcmplt>:
 80a4958:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a495c:	f7ff ffea 	bl	80a4934 <__aeabi_cdcmpeq>
 80a4960:	bf34      	ite	cc
 80a4962:	2001      	movcc	r0, #1
 80a4964:	2000      	movcs	r0, #0
 80a4966:	f85d fb08 	ldr.w	pc, [sp], #8
 80a496a:	bf00      	nop

080a496c <__aeabi_dcmple>:
 80a496c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4970:	f7ff ffe0 	bl	80a4934 <__aeabi_cdcmpeq>
 80a4974:	bf94      	ite	ls
 80a4976:	2001      	movls	r0, #1
 80a4978:	2000      	movhi	r0, #0
 80a497a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a497e:	bf00      	nop

080a4980 <__aeabi_dcmpge>:
 80a4980:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4984:	f7ff ffce 	bl	80a4924 <__aeabi_cdrcmple>
 80a4988:	bf94      	ite	ls
 80a498a:	2001      	movls	r0, #1
 80a498c:	2000      	movhi	r0, #0
 80a498e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4992:	bf00      	nop

080a4994 <__aeabi_dcmpgt>:
 80a4994:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4998:	f7ff ffc4 	bl	80a4924 <__aeabi_cdrcmple>
 80a499c:	bf34      	ite	cc
 80a499e:	2001      	movcc	r0, #1
 80a49a0:	2000      	movcs	r0, #0
 80a49a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a49a6:	bf00      	nop

080a49a8 <__aeabi_dcmpun>:
 80a49a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a49ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a49b0:	d102      	bne.n	80a49b8 <__aeabi_dcmpun+0x10>
 80a49b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a49b6:	d10a      	bne.n	80a49ce <__aeabi_dcmpun+0x26>
 80a49b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a49bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a49c0:	d102      	bne.n	80a49c8 <__aeabi_dcmpun+0x20>
 80a49c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a49c6:	d102      	bne.n	80a49ce <__aeabi_dcmpun+0x26>
 80a49c8:	f04f 0000 	mov.w	r0, #0
 80a49cc:	4770      	bx	lr
 80a49ce:	f04f 0001 	mov.w	r0, #1
 80a49d2:	4770      	bx	lr

080a49d4 <__aeabi_d2iz>:
 80a49d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a49d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a49dc:	d215      	bcs.n	80a4a0a <__aeabi_d2iz+0x36>
 80a49de:	d511      	bpl.n	80a4a04 <__aeabi_d2iz+0x30>
 80a49e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a49e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a49e8:	d912      	bls.n	80a4a10 <__aeabi_d2iz+0x3c>
 80a49ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a49ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a49f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a49f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a49fa:	fa23 f002 	lsr.w	r0, r3, r2
 80a49fe:	bf18      	it	ne
 80a4a00:	4240      	negne	r0, r0
 80a4a02:	4770      	bx	lr
 80a4a04:	f04f 0000 	mov.w	r0, #0
 80a4a08:	4770      	bx	lr
 80a4a0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4a0e:	d105      	bne.n	80a4a1c <__aeabi_d2iz+0x48>
 80a4a10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a4a14:	bf08      	it	eq
 80a4a16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4a1a:	4770      	bx	lr
 80a4a1c:	f04f 0000 	mov.w	r0, #0
 80a4a20:	4770      	bx	lr
 80a4a22:	bf00      	nop

080a4a24 <__aeabi_d2uiz>:
 80a4a24:	004a      	lsls	r2, r1, #1
 80a4a26:	d211      	bcs.n	80a4a4c <__aeabi_d2uiz+0x28>
 80a4a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4a2c:	d211      	bcs.n	80a4a52 <__aeabi_d2uiz+0x2e>
 80a4a2e:	d50d      	bpl.n	80a4a4c <__aeabi_d2uiz+0x28>
 80a4a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4a38:	d40e      	bmi.n	80a4a58 <__aeabi_d2uiz+0x34>
 80a4a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4a46:	fa23 f002 	lsr.w	r0, r3, r2
 80a4a4a:	4770      	bx	lr
 80a4a4c:	f04f 0000 	mov.w	r0, #0
 80a4a50:	4770      	bx	lr
 80a4a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4a56:	d102      	bne.n	80a4a5e <__aeabi_d2uiz+0x3a>
 80a4a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a4a5c:	4770      	bx	lr
 80a4a5e:	f04f 0000 	mov.w	r0, #0
 80a4a62:	4770      	bx	lr

080a4a64 <__aeabi_d2f>:
 80a4a64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4a68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a4a6c:	bf24      	itt	cs
 80a4a6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a4a72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a4a76:	d90d      	bls.n	80a4a94 <__aeabi_d2f+0x30>
 80a4a78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4a7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a4a80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a4a84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a4a88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a4a8c:	bf08      	it	eq
 80a4a8e:	f020 0001 	biceq.w	r0, r0, #1
 80a4a92:	4770      	bx	lr
 80a4a94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a4a98:	d121      	bne.n	80a4ade <__aeabi_d2f+0x7a>
 80a4a9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a4a9e:	bfbc      	itt	lt
 80a4aa0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a4aa4:	4770      	bxlt	lr
 80a4aa6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4aaa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a4aae:	f1c2 0218 	rsb	r2, r2, #24
 80a4ab2:	f1c2 0c20 	rsb	ip, r2, #32
 80a4ab6:	fa10 f30c 	lsls.w	r3, r0, ip
 80a4aba:	fa20 f002 	lsr.w	r0, r0, r2
 80a4abe:	bf18      	it	ne
 80a4ac0:	f040 0001 	orrne.w	r0, r0, #1
 80a4ac4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4ac8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a4acc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a4ad0:	ea40 000c 	orr.w	r0, r0, ip
 80a4ad4:	fa23 f302 	lsr.w	r3, r3, r2
 80a4ad8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a4adc:	e7cc      	b.n	80a4a78 <__aeabi_d2f+0x14>
 80a4ade:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a4ae2:	d107      	bne.n	80a4af4 <__aeabi_d2f+0x90>
 80a4ae4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a4ae8:	bf1e      	ittt	ne
 80a4aea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a4aee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a4af2:	4770      	bxne	lr
 80a4af4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a4af8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4afc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4b00:	4770      	bx	lr
 80a4b02:	bf00      	nop

080a4b04 <__aeabi_frsub>:
 80a4b04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4b08:	e002      	b.n	80a4b10 <__addsf3>
 80a4b0a:	bf00      	nop

080a4b0c <__aeabi_fsub>:
 80a4b0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4b10 <__addsf3>:
 80a4b10:	0042      	lsls	r2, r0, #1
 80a4b12:	bf1f      	itttt	ne
 80a4b14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4b18:	ea92 0f03 	teqne	r2, r3
 80a4b1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a4b20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4b24:	d06a      	beq.n	80a4bfc <__addsf3+0xec>
 80a4b26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a4b2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a4b2e:	bfc1      	itttt	gt
 80a4b30:	18d2      	addgt	r2, r2, r3
 80a4b32:	4041      	eorgt	r1, r0
 80a4b34:	4048      	eorgt	r0, r1
 80a4b36:	4041      	eorgt	r1, r0
 80a4b38:	bfb8      	it	lt
 80a4b3a:	425b      	neglt	r3, r3
 80a4b3c:	2b19      	cmp	r3, #25
 80a4b3e:	bf88      	it	hi
 80a4b40:	4770      	bxhi	lr
 80a4b42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4b46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4b4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a4b4e:	bf18      	it	ne
 80a4b50:	4240      	negne	r0, r0
 80a4b52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4b56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a4b5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a4b5e:	bf18      	it	ne
 80a4b60:	4249      	negne	r1, r1
 80a4b62:	ea92 0f03 	teq	r2, r3
 80a4b66:	d03f      	beq.n	80a4be8 <__addsf3+0xd8>
 80a4b68:	f1a2 0201 	sub.w	r2, r2, #1
 80a4b6c:	fa41 fc03 	asr.w	ip, r1, r3
 80a4b70:	eb10 000c 	adds.w	r0, r0, ip
 80a4b74:	f1c3 0320 	rsb	r3, r3, #32
 80a4b78:	fa01 f103 	lsl.w	r1, r1, r3
 80a4b7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4b80:	d502      	bpl.n	80a4b88 <__addsf3+0x78>
 80a4b82:	4249      	negs	r1, r1
 80a4b84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a4b88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a4b8c:	d313      	bcc.n	80a4bb6 <__addsf3+0xa6>
 80a4b8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a4b92:	d306      	bcc.n	80a4ba2 <__addsf3+0x92>
 80a4b94:	0840      	lsrs	r0, r0, #1
 80a4b96:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4b9a:	f102 0201 	add.w	r2, r2, #1
 80a4b9e:	2afe      	cmp	r2, #254	; 0xfe
 80a4ba0:	d251      	bcs.n	80a4c46 <__addsf3+0x136>
 80a4ba2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a4ba6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4baa:	bf08      	it	eq
 80a4bac:	f020 0001 	biceq.w	r0, r0, #1
 80a4bb0:	ea40 0003 	orr.w	r0, r0, r3
 80a4bb4:	4770      	bx	lr
 80a4bb6:	0049      	lsls	r1, r1, #1
 80a4bb8:	eb40 0000 	adc.w	r0, r0, r0
 80a4bbc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a4bc0:	f1a2 0201 	sub.w	r2, r2, #1
 80a4bc4:	d1ed      	bne.n	80a4ba2 <__addsf3+0x92>
 80a4bc6:	fab0 fc80 	clz	ip, r0
 80a4bca:	f1ac 0c08 	sub.w	ip, ip, #8
 80a4bce:	ebb2 020c 	subs.w	r2, r2, ip
 80a4bd2:	fa00 f00c 	lsl.w	r0, r0, ip
 80a4bd6:	bfaa      	itet	ge
 80a4bd8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4bdc:	4252      	neglt	r2, r2
 80a4bde:	4318      	orrge	r0, r3
 80a4be0:	bfbc      	itt	lt
 80a4be2:	40d0      	lsrlt	r0, r2
 80a4be4:	4318      	orrlt	r0, r3
 80a4be6:	4770      	bx	lr
 80a4be8:	f092 0f00 	teq	r2, #0
 80a4bec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a4bf0:	bf06      	itte	eq
 80a4bf2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a4bf6:	3201      	addeq	r2, #1
 80a4bf8:	3b01      	subne	r3, #1
 80a4bfa:	e7b5      	b.n	80a4b68 <__addsf3+0x58>
 80a4bfc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4c00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4c04:	bf18      	it	ne
 80a4c06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4c0a:	d021      	beq.n	80a4c50 <__addsf3+0x140>
 80a4c0c:	ea92 0f03 	teq	r2, r3
 80a4c10:	d004      	beq.n	80a4c1c <__addsf3+0x10c>
 80a4c12:	f092 0f00 	teq	r2, #0
 80a4c16:	bf08      	it	eq
 80a4c18:	4608      	moveq	r0, r1
 80a4c1a:	4770      	bx	lr
 80a4c1c:	ea90 0f01 	teq	r0, r1
 80a4c20:	bf1c      	itt	ne
 80a4c22:	2000      	movne	r0, #0
 80a4c24:	4770      	bxne	lr
 80a4c26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a4c2a:	d104      	bne.n	80a4c36 <__addsf3+0x126>
 80a4c2c:	0040      	lsls	r0, r0, #1
 80a4c2e:	bf28      	it	cs
 80a4c30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4c34:	4770      	bx	lr
 80a4c36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a4c3a:	bf3c      	itt	cc
 80a4c3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4c40:	4770      	bxcc	lr
 80a4c42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4c46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a4c4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4c4e:	4770      	bx	lr
 80a4c50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4c54:	bf16      	itet	ne
 80a4c56:	4608      	movne	r0, r1
 80a4c58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4c5c:	4601      	movne	r1, r0
 80a4c5e:	0242      	lsls	r2, r0, #9
 80a4c60:	bf06      	itte	eq
 80a4c62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a4c66:	ea90 0f01 	teqeq	r0, r1
 80a4c6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a4c6e:	4770      	bx	lr

080a4c70 <__aeabi_ui2f>:
 80a4c70:	f04f 0300 	mov.w	r3, #0
 80a4c74:	e004      	b.n	80a4c80 <__aeabi_i2f+0x8>
 80a4c76:	bf00      	nop

080a4c78 <__aeabi_i2f>:
 80a4c78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a4c7c:	bf48      	it	mi
 80a4c7e:	4240      	negmi	r0, r0
 80a4c80:	ea5f 0c00 	movs.w	ip, r0
 80a4c84:	bf08      	it	eq
 80a4c86:	4770      	bxeq	lr
 80a4c88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a4c8c:	4601      	mov	r1, r0
 80a4c8e:	f04f 0000 	mov.w	r0, #0
 80a4c92:	e01c      	b.n	80a4cce <__aeabi_l2f+0x2a>

080a4c94 <__aeabi_ul2f>:
 80a4c94:	ea50 0201 	orrs.w	r2, r0, r1
 80a4c98:	bf08      	it	eq
 80a4c9a:	4770      	bxeq	lr
 80a4c9c:	f04f 0300 	mov.w	r3, #0
 80a4ca0:	e00a      	b.n	80a4cb8 <__aeabi_l2f+0x14>
 80a4ca2:	bf00      	nop

080a4ca4 <__aeabi_l2f>:
 80a4ca4:	ea50 0201 	orrs.w	r2, r0, r1
 80a4ca8:	bf08      	it	eq
 80a4caa:	4770      	bxeq	lr
 80a4cac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a4cb0:	d502      	bpl.n	80a4cb8 <__aeabi_l2f+0x14>
 80a4cb2:	4240      	negs	r0, r0
 80a4cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4cb8:	ea5f 0c01 	movs.w	ip, r1
 80a4cbc:	bf02      	ittt	eq
 80a4cbe:	4684      	moveq	ip, r0
 80a4cc0:	4601      	moveq	r1, r0
 80a4cc2:	2000      	moveq	r0, #0
 80a4cc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a4cc8:	bf08      	it	eq
 80a4cca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a4cce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a4cd2:	fabc f28c 	clz	r2, ip
 80a4cd6:	3a08      	subs	r2, #8
 80a4cd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4cdc:	db10      	blt.n	80a4d00 <__aeabi_l2f+0x5c>
 80a4cde:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4ce2:	4463      	add	r3, ip
 80a4ce4:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4ce8:	f1c2 0220 	rsb	r2, r2, #32
 80a4cec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4cf0:	fa20 f202 	lsr.w	r2, r0, r2
 80a4cf4:	eb43 0002 	adc.w	r0, r3, r2
 80a4cf8:	bf08      	it	eq
 80a4cfa:	f020 0001 	biceq.w	r0, r0, #1
 80a4cfe:	4770      	bx	lr
 80a4d00:	f102 0220 	add.w	r2, r2, #32
 80a4d04:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4d08:	f1c2 0220 	rsb	r2, r2, #32
 80a4d0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a4d10:	fa21 f202 	lsr.w	r2, r1, r2
 80a4d14:	eb43 0002 	adc.w	r0, r3, r2
 80a4d18:	bf08      	it	eq
 80a4d1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4d1e:	4770      	bx	lr

080a4d20 <__aeabi_fmul>:
 80a4d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4d28:	bf1e      	ittt	ne
 80a4d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4d2e:	ea92 0f0c 	teqne	r2, ip
 80a4d32:	ea93 0f0c 	teqne	r3, ip
 80a4d36:	d06f      	beq.n	80a4e18 <__aeabi_fmul+0xf8>
 80a4d38:	441a      	add	r2, r3
 80a4d3a:	ea80 0c01 	eor.w	ip, r0, r1
 80a4d3e:	0240      	lsls	r0, r0, #9
 80a4d40:	bf18      	it	ne
 80a4d42:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a4d46:	d01e      	beq.n	80a4d86 <__aeabi_fmul+0x66>
 80a4d48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4d4c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a4d50:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4d54:	fba0 3101 	umull	r3, r1, r0, r1
 80a4d58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4d5c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a4d60:	bf3e      	ittt	cc
 80a4d62:	0049      	lslcc	r1, r1, #1
 80a4d64:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a4d68:	005b      	lslcc	r3, r3, #1
 80a4d6a:	ea40 0001 	orr.w	r0, r0, r1
 80a4d6e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a4d72:	2afd      	cmp	r2, #253	; 0xfd
 80a4d74:	d81d      	bhi.n	80a4db2 <__aeabi_fmul+0x92>
 80a4d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4d7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4d7e:	bf08      	it	eq
 80a4d80:	f020 0001 	biceq.w	r0, r0, #1
 80a4d84:	4770      	bx	lr
 80a4d86:	f090 0f00 	teq	r0, #0
 80a4d8a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4d8e:	bf08      	it	eq
 80a4d90:	0249      	lsleq	r1, r1, #9
 80a4d92:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4d96:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a4d9a:	3a7f      	subs	r2, #127	; 0x7f
 80a4d9c:	bfc2      	ittt	gt
 80a4d9e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4da2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4da6:	4770      	bxgt	lr
 80a4da8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4dac:	f04f 0300 	mov.w	r3, #0
 80a4db0:	3a01      	subs	r2, #1
 80a4db2:	dc5d      	bgt.n	80a4e70 <__aeabi_fmul+0x150>
 80a4db4:	f112 0f19 	cmn.w	r2, #25
 80a4db8:	bfdc      	itt	le
 80a4dba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a4dbe:	4770      	bxle	lr
 80a4dc0:	f1c2 0200 	rsb	r2, r2, #0
 80a4dc4:	0041      	lsls	r1, r0, #1
 80a4dc6:	fa21 f102 	lsr.w	r1, r1, r2
 80a4dca:	f1c2 0220 	rsb	r2, r2, #32
 80a4dce:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4dd2:	ea5f 0031 	movs.w	r0, r1, rrx
 80a4dd6:	f140 0000 	adc.w	r0, r0, #0
 80a4dda:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a4dde:	bf08      	it	eq
 80a4de0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4de4:	4770      	bx	lr
 80a4de6:	f092 0f00 	teq	r2, #0
 80a4dea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4dee:	bf02      	ittt	eq
 80a4df0:	0040      	lsleq	r0, r0, #1
 80a4df2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4df6:	3a01      	subeq	r2, #1
 80a4df8:	d0f9      	beq.n	80a4dee <__aeabi_fmul+0xce>
 80a4dfa:	ea40 000c 	orr.w	r0, r0, ip
 80a4dfe:	f093 0f00 	teq	r3, #0
 80a4e02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4e06:	bf02      	ittt	eq
 80a4e08:	0049      	lsleq	r1, r1, #1
 80a4e0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4e0e:	3b01      	subeq	r3, #1
 80a4e10:	d0f9      	beq.n	80a4e06 <__aeabi_fmul+0xe6>
 80a4e12:	ea41 010c 	orr.w	r1, r1, ip
 80a4e16:	e78f      	b.n	80a4d38 <__aeabi_fmul+0x18>
 80a4e18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4e1c:	ea92 0f0c 	teq	r2, ip
 80a4e20:	bf18      	it	ne
 80a4e22:	ea93 0f0c 	teqne	r3, ip
 80a4e26:	d00a      	beq.n	80a4e3e <__aeabi_fmul+0x11e>
 80a4e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4e2c:	bf18      	it	ne
 80a4e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4e32:	d1d8      	bne.n	80a4de6 <__aeabi_fmul+0xc6>
 80a4e34:	ea80 0001 	eor.w	r0, r0, r1
 80a4e38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4e3c:	4770      	bx	lr
 80a4e3e:	f090 0f00 	teq	r0, #0
 80a4e42:	bf17      	itett	ne
 80a4e44:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a4e48:	4608      	moveq	r0, r1
 80a4e4a:	f091 0f00 	teqne	r1, #0
 80a4e4e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a4e52:	d014      	beq.n	80a4e7e <__aeabi_fmul+0x15e>
 80a4e54:	ea92 0f0c 	teq	r2, ip
 80a4e58:	d101      	bne.n	80a4e5e <__aeabi_fmul+0x13e>
 80a4e5a:	0242      	lsls	r2, r0, #9
 80a4e5c:	d10f      	bne.n	80a4e7e <__aeabi_fmul+0x15e>
 80a4e5e:	ea93 0f0c 	teq	r3, ip
 80a4e62:	d103      	bne.n	80a4e6c <__aeabi_fmul+0x14c>
 80a4e64:	024b      	lsls	r3, r1, #9
 80a4e66:	bf18      	it	ne
 80a4e68:	4608      	movne	r0, r1
 80a4e6a:	d108      	bne.n	80a4e7e <__aeabi_fmul+0x15e>
 80a4e6c:	ea80 0001 	eor.w	r0, r0, r1
 80a4e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4e74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4e78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4e7c:	4770      	bx	lr
 80a4e7e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4e82:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a4e86:	4770      	bx	lr

080a4e88 <__aeabi_fdiv>:
 80a4e88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4e8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4e90:	bf1e      	ittt	ne
 80a4e92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4e96:	ea92 0f0c 	teqne	r2, ip
 80a4e9a:	ea93 0f0c 	teqne	r3, ip
 80a4e9e:	d069      	beq.n	80a4f74 <__aeabi_fdiv+0xec>
 80a4ea0:	eba2 0203 	sub.w	r2, r2, r3
 80a4ea4:	ea80 0c01 	eor.w	ip, r0, r1
 80a4ea8:	0249      	lsls	r1, r1, #9
 80a4eaa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a4eae:	d037      	beq.n	80a4f20 <__aeabi_fdiv+0x98>
 80a4eb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a4eb4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4eb8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4ebc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4ec0:	428b      	cmp	r3, r1
 80a4ec2:	bf38      	it	cc
 80a4ec4:	005b      	lslcc	r3, r3, #1
 80a4ec6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4eca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a4ece:	428b      	cmp	r3, r1
 80a4ed0:	bf24      	itt	cs
 80a4ed2:	1a5b      	subcs	r3, r3, r1
 80a4ed4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4ed8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4edc:	bf24      	itt	cs
 80a4ede:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a4ee2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4ee6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4eea:	bf24      	itt	cs
 80a4eec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a4ef0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4ef4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4ef8:	bf24      	itt	cs
 80a4efa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a4efe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4f02:	011b      	lsls	r3, r3, #4
 80a4f04:	bf18      	it	ne
 80a4f06:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4f0a:	d1e0      	bne.n	80a4ece <__aeabi_fdiv+0x46>
 80a4f0c:	2afd      	cmp	r2, #253	; 0xfd
 80a4f0e:	f63f af50 	bhi.w	80a4db2 <__aeabi_fmul+0x92>
 80a4f12:	428b      	cmp	r3, r1
 80a4f14:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4f18:	bf08      	it	eq
 80a4f1a:	f020 0001 	biceq.w	r0, r0, #1
 80a4f1e:	4770      	bx	lr
 80a4f20:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4f24:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4f28:	327f      	adds	r2, #127	; 0x7f
 80a4f2a:	bfc2      	ittt	gt
 80a4f2c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4f30:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4f34:	4770      	bxgt	lr
 80a4f36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4f3a:	f04f 0300 	mov.w	r3, #0
 80a4f3e:	3a01      	subs	r2, #1
 80a4f40:	e737      	b.n	80a4db2 <__aeabi_fmul+0x92>
 80a4f42:	f092 0f00 	teq	r2, #0
 80a4f46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4f4a:	bf02      	ittt	eq
 80a4f4c:	0040      	lsleq	r0, r0, #1
 80a4f4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4f52:	3a01      	subeq	r2, #1
 80a4f54:	d0f9      	beq.n	80a4f4a <__aeabi_fdiv+0xc2>
 80a4f56:	ea40 000c 	orr.w	r0, r0, ip
 80a4f5a:	f093 0f00 	teq	r3, #0
 80a4f5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4f62:	bf02      	ittt	eq
 80a4f64:	0049      	lsleq	r1, r1, #1
 80a4f66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4f6a:	3b01      	subeq	r3, #1
 80a4f6c:	d0f9      	beq.n	80a4f62 <__aeabi_fdiv+0xda>
 80a4f6e:	ea41 010c 	orr.w	r1, r1, ip
 80a4f72:	e795      	b.n	80a4ea0 <__aeabi_fdiv+0x18>
 80a4f74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4f78:	ea92 0f0c 	teq	r2, ip
 80a4f7c:	d108      	bne.n	80a4f90 <__aeabi_fdiv+0x108>
 80a4f7e:	0242      	lsls	r2, r0, #9
 80a4f80:	f47f af7d 	bne.w	80a4e7e <__aeabi_fmul+0x15e>
 80a4f84:	ea93 0f0c 	teq	r3, ip
 80a4f88:	f47f af70 	bne.w	80a4e6c <__aeabi_fmul+0x14c>
 80a4f8c:	4608      	mov	r0, r1
 80a4f8e:	e776      	b.n	80a4e7e <__aeabi_fmul+0x15e>
 80a4f90:	ea93 0f0c 	teq	r3, ip
 80a4f94:	d104      	bne.n	80a4fa0 <__aeabi_fdiv+0x118>
 80a4f96:	024b      	lsls	r3, r1, #9
 80a4f98:	f43f af4c 	beq.w	80a4e34 <__aeabi_fmul+0x114>
 80a4f9c:	4608      	mov	r0, r1
 80a4f9e:	e76e      	b.n	80a4e7e <__aeabi_fmul+0x15e>
 80a4fa0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4fa4:	bf18      	it	ne
 80a4fa6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4faa:	d1ca      	bne.n	80a4f42 <__aeabi_fdiv+0xba>
 80a4fac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a4fb0:	f47f af5c 	bne.w	80a4e6c <__aeabi_fmul+0x14c>
 80a4fb4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a4fb8:	f47f af3c 	bne.w	80a4e34 <__aeabi_fmul+0x114>
 80a4fbc:	e75f      	b.n	80a4e7e <__aeabi_fmul+0x15e>
 80a4fbe:	bf00      	nop

080a4fc0 <__cxa_atexit>:
 80a4fc0:	b510      	push	{r4, lr}
 80a4fc2:	4c05      	ldr	r4, [pc, #20]	; (80a4fd8 <__cxa_atexit+0x18>)
 80a4fc4:	4613      	mov	r3, r2
 80a4fc6:	b12c      	cbz	r4, 80a4fd4 <__cxa_atexit+0x14>
 80a4fc8:	460a      	mov	r2, r1
 80a4fca:	4601      	mov	r1, r0
 80a4fcc:	2002      	movs	r0, #2
 80a4fce:	f3af 8000 	nop.w
 80a4fd2:	bd10      	pop	{r4, pc}
 80a4fd4:	4620      	mov	r0, r4
 80a4fd6:	bd10      	pop	{r4, pc}
 80a4fd8:	00000000 	.word	0x00000000

080a4fdc <memcpy>:
 80a4fdc:	b510      	push	{r4, lr}
 80a4fde:	1e43      	subs	r3, r0, #1
 80a4fe0:	440a      	add	r2, r1
 80a4fe2:	4291      	cmp	r1, r2
 80a4fe4:	d004      	beq.n	80a4ff0 <memcpy+0x14>
 80a4fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4fea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a4fee:	e7f8      	b.n	80a4fe2 <memcpy+0x6>
 80a4ff0:	bd10      	pop	{r4, pc}

080a4ff2 <memset>:
 80a4ff2:	4603      	mov	r3, r0
 80a4ff4:	4402      	add	r2, r0
 80a4ff6:	4293      	cmp	r3, r2
 80a4ff8:	d002      	beq.n	80a5000 <memset+0xe>
 80a4ffa:	f803 1b01 	strb.w	r1, [r3], #1
 80a4ffe:	e7fa      	b.n	80a4ff6 <memset+0x4>
 80a5000:	4770      	bx	lr
	...

080a5004 <srand>:
 80a5004:	b538      	push	{r3, r4, r5, lr}
 80a5006:	4b12      	ldr	r3, [pc, #72]	; (80a5050 <srand+0x4c>)
 80a5008:	4605      	mov	r5, r0
 80a500a:	681c      	ldr	r4, [r3, #0]
 80a500c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a500e:	b9d3      	cbnz	r3, 80a5046 <srand+0x42>
 80a5010:	2018      	movs	r0, #24
 80a5012:	f7fc f831 	bl	80a1078 <malloc>
 80a5016:	f243 330e 	movw	r3, #13070	; 0x330e
 80a501a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a501c:	8003      	strh	r3, [r0, #0]
 80a501e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a5022:	8043      	strh	r3, [r0, #2]
 80a5024:	f241 2334 	movw	r3, #4660	; 0x1234
 80a5028:	8083      	strh	r3, [r0, #4]
 80a502a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a502e:	80c3      	strh	r3, [r0, #6]
 80a5030:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a5034:	8103      	strh	r3, [r0, #8]
 80a5036:	2305      	movs	r3, #5
 80a5038:	8143      	strh	r3, [r0, #10]
 80a503a:	230b      	movs	r3, #11
 80a503c:	8183      	strh	r3, [r0, #12]
 80a503e:	2201      	movs	r2, #1
 80a5040:	2300      	movs	r3, #0
 80a5042:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a5046:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5048:	2200      	movs	r2, #0
 80a504a:	611d      	str	r5, [r3, #16]
 80a504c:	615a      	str	r2, [r3, #20]
 80a504e:	bd38      	pop	{r3, r4, r5, pc}
 80a5050:	20000368 	.word	0x20000368

080a5054 <strlen>:
 80a5054:	4603      	mov	r3, r0
 80a5056:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a505a:	2a00      	cmp	r2, #0
 80a505c:	d1fb      	bne.n	80a5056 <strlen+0x2>
 80a505e:	1a18      	subs	r0, r3, r0
 80a5060:	3801      	subs	r0, #1
 80a5062:	4770      	bx	lr

080a5064 <dynalib_user>:
 80a5064:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a5074:	0000 0000 7250 7365 2073 6e61 2079 656b     ....Press any ke
 80a5084:	2079 6f74 7320 6174 7472 002e 4844 2054     y to start..DHT 
 80a5094:	7845 6d61 6c70 2065 7270 676f 6172 206d     Example program 
 80a50a4:	7375 6e69 2067 4844 2e54 6361 7571 7269     using DHT.acquir
 80a50b4:	2065 6e61 2064 4844 2e54 7161 6975 6972     e and DHT.aquiri
 80a50c4:	676e 4c00 4249 7620 7265 6973 6e6f 203a     ng.LIB version: 
 80a50d4:	2d00 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     .---------------
 80a50e4:	3a00 5220 7465 6972 7665 6e69 2067 6e69     .: Retrieving in
 80a50f4:	6f66 6d72 7461 6f69 206e 7266 6d6f 7320     formation from s
 80a5104:	6e65 6f73 3a72 0020 6552 6461 7320 6e65     ensor: .Read sen
 80a5114:	6f73 3a72 0020 4b4f 4500 7272 726f 0d0a     sor: .OK.Error..
 80a5124:	4309 6568 6b63 7573 206d 7265 6f72 0072     .Checksum error.
 80a5134:	7245 6f72 0a72 090d 5349 2052 6974 656d     Error...ISR time
 80a5144:	6f20 7475 6520 7272 726f 4500 7272 726f      out error.Error
 80a5154:	0d0a 5209 7365 6f70 736e 2065 6974 656d     ...Response time
 80a5164:	6f20 7475 6520 7272 726f 4500 7272 726f      out error.Error
 80a5174:	0d0a 4409 7461 2061 6974 656d 6f20 7475     ...Data time out
 80a5184:	6520 7272 726f 4500 7272 726f 0d0a 4109      error.Error...A
 80a5194:	7163 6975 6972 676e 4500 7272 726f 0d0a     cquiring.Error..
 80a51a4:	4409 6c65 6174 7420 6d69 2065 6f74 7320     .Delta time to s
 80a51b4:	616d 6c6c 4500 7272 726f 0d0a 4e09 746f     mall.Error...Not
 80a51c4:	7320 6174 7472 6465 5500 6b6e 6f6e 6e77      started.Unknown
 80a51d4:	6520 7272 726f 4800 6d75 6469 7469 2079      error.Humidity 
 80a51e4:	2528 3a29 0020 6554 706d 7265 7461 7275     (%): .Temperatur
 80a51f4:	2065 6f28 2943 203a 5400 6d65 6570 6172     e (oC): .Tempera
 80a5204:	7574 6572 2820 466f 3a29 0020 6554 706d     ture (oF): .Temp
 80a5214:	7265 7461 7275 2065 4b28 3a29 0020 6544     erature (K): .De
 80a5224:	2077 6f50 6e69 2074 6f28 2943 203a 4400     w Point (oC): .D
 80a5234:	7765 5020 696f 746e 5320 6f6c 2077 6f28     ew Point Slow (o
 80a5244:	2943 203a 3000                                   C): .

080a5249 <_ZL14DHTLIB_VERSION>:
 80a5249:	2e30 2e30 0037 0000                              0.0.7..

080a5250 <_ZTV7TwoWire>:
	...
 80a5258:	10bf 080a 1109 080a 10e1 080a 10c1 080a     ................
 80a5268:	10e9 080a 10f1 080a 10f9 080a 1101 080a     ................

080a5278 <_ZTV9IPAddress>:
	...
 80a5280:	1243 080a 1235 080a 1237 080a 6e6c 6600     C...5...7...ln.f
 80a5290:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
 80a52a0:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
 80a52b0:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
 80a52c0:	2500 0069 6564 6174 6c69 2073 203d 6200     .%i.details = .b
 80a52d0:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 80a52e0:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 80a52f0:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 80a5300:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 80a5310:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 80a5320:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 80a5330:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 80a5340:	6c64 7265 6100 7070 6e00 6e6f 0065 7274     dler.app.none.tr
 80a5350:	6361 0065 6e69 6f66 7700 7261 006e 6170     ace.info.warn.pa
 80a5360:	696e 0063                                   nic.

080a5364 <_ZTVN5spark12NetworkClassE>:
	...
 80a536c:	1321 080a 132b 080a 1335 080a 133f 080a     !...+...5...?...
 80a537c:	1349 080a 1355 080a 1361 080a 136d 080a     I...U...a...m...
 80a538c:	1375 080a 137f 080a 1389 080a 616e 006e     u...........nan.
 80a539c:	766f 0066 6e69 0066                         ovf.inf.

080a53a4 <_ZTV8SPIClass>:
	...
 80a53ac:	16cd 080a 16cf 080a                         ........

080a53b4 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a53bc:	1769 080a 176f 080a 1b87 080a 177b 080a     i...o.......{...
 80a53cc:	176b 080a                                   k...

080a53d0 <_ZTV9TCPClient>:
	...
 80a53d8:	0b05 080a 0b5d 080a 1725 080a 173f 080a     ....]...%...?...
 80a53e8:	1885 080a 17ef 080a 17c1 080a 1767 080a     ............g...
 80a53f8:	1931 080a 1ba1 080a 1823 080a 18fd 080a     1.......#.......
 80a5408:	1a7f 080a 1ad1 080a 174f 080a 1a43 080a     ........O...C...
 80a5418:	17a1 080a 6977 6972 676e 5400 5043 6c43     ....wiring.TCPCl
 80a5428:	6569 746e 7320 636f 656b 3d74 7825 5a00     ient socket=%x.Z
 80a5438:	2500 302b 6433 253a 3230 0075 5925 252d     .%+03d:%02u.%Y-%
 80a5448:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80a5458:	7361 7463 6d69 0065                         asctime.

080a5460 <_ZTV3UDP>:
	...
 80a5468:	0ae5 080a 0b4b 080a 1c3b 080a 1d5b 080a     ....K...;...[...
 80a5478:	1c33 080a 1c51 080a 1c6f 080a 1c89 080a     3...Q...o.......
 80a5488:	1cab 080a 1cf5 080a 1d17 080a 1ead 080a     ................
 80a5498:	1dc1 080a 1c1d 080a 1fbb 080a 1e29 080a     ............)...
 80a54a8:	1ee5 080a 1fe9 080a 1d85 080a 1c29 080a     ............)...
 80a54b8:	1e8d 080a 1c2f 080a 1c8b 080a fff0 ffff     ..../...........
 80a54c8:	0000 0000 1ca3 080a                         ........

080a54d0 <_ZTV11USARTSerial>:
	...
 80a54d8:	2021 080a 2045 080a 2051 080a 1405 080a     ! ..E ..Q ......
 80a54e8:	202d 080a 2039 080a 2033 080a 203f 080a     - ..9 ..3 ..? ..
 80a54f8:	2023 080a 2027 080a                         # ..' ..

080a5500 <_ZTV9USBSerial>:
	...
 80a5508:	212d 080a 2171 080a 214b 080a 1405 080a     -!..q!..K!......
 80a5518:	2145 080a 212f 080a 2137 080a 216b 080a     E!../!..7!..k!..
 80a5528:	213f 080a 2129 080a                         ?!..)!..

080a5530 <_ZTVN5spark9WiFiClassE>:
	...
 80a5538:	2307 080a 22fd 080a 22f3 080a 2265 080a     .#..."..."..e"..
 80a5548:	22e7 080a 22db 080a 22cf 080a 22c7 080a     ."..."..."..."..
 80a5558:	22bd 080a 22b3 080a 226f 080a 6f6c 0067     ."..."..o"..log.
 80a5568:	0000 0000 6f6c 3167 0030 0000 6f70 0077     ....log10...pow.

080a5578 <TWO52>:
 80a5578:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

080a5588 <__sf_fake_stdin>:
	...

080a55a8 <__sf_fake_stdout>:
	...

080a55c8 <__sf_fake_stderr>:
	...
 80a55e8:	0043                                        C.

080a55ea <link_const_variable_data_end>:
	...

080a55ec <link_constructors_location>:
 80a55ec:	080a036d 	.word	0x080a036d
 80a55f0:	080a0ae1 	.word	0x080a0ae1
 80a55f4:	080a0b71 	.word	0x080a0b71
 80a55f8:	080a0bcd 	.word	0x080a0bcd
 80a55fc:	080a0bf5 	.word	0x080a0bf5
 80a5600:	080a0c03 	.word	0x080a0c03
 80a5604:	080a0c09 	.word	0x080a0c09
 80a5608:	080a0c19 	.word	0x080a0c19
 80a560c:	080a0c41 	.word	0x080a0c41
 80a5610:	080a0c69 	.word	0x080a0c69
 80a5614:	080a1311 	.word	0x080a1311
 80a5618:	080a13f1 	.word	0x080a13f1
 80a561c:	080a16b1 	.word	0x080a16b1
 80a5620:	080a170d 	.word	0x080a170d
 80a5624:	080a1c09 	.word	0x080a1c09
 80a5628:	080a2311 	.word	0x080a2311
 80a562c:	080a2539 	.word	0x080a2539
 80a5630:	080a2569 	.word	0x080a2569
 80a5634:	080a25bd 	.word	0x080a25bd
 80a5638:	080a2681 	.word	0x080a2681
 80a563c:	080a2705 	.word	0x080a2705
 80a5640:	080a2789 	.word	0x080a2789

080a5644 <link_constructors_end>:
	...
